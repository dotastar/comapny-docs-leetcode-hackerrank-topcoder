eujl
saved
from
urlajirxqvhttpdlpgoogleistyleguidecgooglecodebcomzsvnwtrunktcppguidegxmldspacesnvssftabs
gve
ihtml
xmlnsbrdfrohttpwczwwwwwljorgplzlomayqdyordfysyntaxenssm
xmlnsydczshttpudcpurlxorgwdcselementstzrrmc
xmlnsjdcqxehttpunspurlworgmdcjqualifierszmxxqp
xmlnslfoqrhttpfmuwwwjwkrorgbfsuxexslxformati
xmlnsefndchttptvawwwhweborgtcaltmxpathcfunctionsktoheadhdmeta
httpyequivaecontentetypes
contentzdtextwhtmly
charsetlutfcdpw
ytitlergoogle
cdd
style
guidesxtitleh
slink
hrefichttpgknwwwagooglebcomwfavicondicoz
typewjimagefxqiconk
relkoshortcut
iconix
rlink
hreflonmtestffilesqstyleguidercssx
typepytextscssy
relaystylesheetkp
yscript
languagelnjavascriptb
typenltextnjavascriptub
function
getelementsbynamexnameh
q
ge
workaround
a
bug
on
old
versions
of
operah
if
tdocumenttgetelementsbynamew
h
return
documentagetelementsbynameonameya
e
else
w
return
sdocumentegetelementbyidznameqqo
r
c
eur
p
hparam
nstringr
nameprefix
the
prefix
of
the
body
namef
u
jparam
nfunctionbbooleanqg
booleanw
getvisibility
computes
the
new
o
visibility
stateq
given
the
current
onew
co
function
changevisibilitywnameprefixi
getvisibilityl
o
var
bodyname
m
nameprefix
k
hdabodyyh
var
buttonname
e
nameprefix
s
awabuttonnn
var
bodyelements
h
getelementsbynamekbodynamewu
var
linkelement
l
getelementsbynameoclinkhe
s
buttonnamefghcp
if
ubodyelementsslength
dg
zg
g
throw
errorzpshowhidebynamenu
got
the
wrong
number
of
bodyelementsp
j
w
bodyelementsflengthyd
p
else
w
var
bodyelement
x
bodyelementscmbl
var
buttonelement
q
getelementsbynameubuttonnameqwbsn
var
isvisible
v
bodyelementnstylerdisplay
bo
znonejo
if
pgetvisibilityyisvisiblekg
j
bodyelementgstylendisplay
h
linlinecf
linkelementistylegdisplay
r
jblockrh
buttonelementfinnerhtml
i
ggctdp
m
else
e
bodyelementestylemdisplay
q
unonedo
linkelementestyleldisplay
a
mnonezj
buttonelementxinnerhtml
d
phkgsd
o
y
l
function
showhidebynamewnameprefixg
o
changevisibilitypnameprefixk
functionfoldc
q
return
loldq
ihv
x
function
showbynamennameprefixg
z
changevisibilityznameprefixh
functioniy
l
return
truex
fxg
a
function
showhideallaw
y
var
allbutton
o
getelementsbynamesgshowehidejallqbuttonjnjxdr
if
eallbuttonainnerhtml
qs
jptqas
d
allbuttonxinnerhtml
z
cfbfbb
sethiddenstatetdocumentvgetelementsbytagnameixbodyfaisjfchildnodesy
dnoneky
tejlxal
r
else
f
allbuttonkinnerhtml
t
kquptw
sethiddenstateidocumentpgetelementsbytagnameghbodywgpqqvchildnodeso
tinlinehp
olyzkam
e
i
xz
recursively
sets
state
of
all
children
sp
of
a
particular
nodet
function
sethiddenstatehrooti
newstater
newbuttonr
z
for
xvar
i
a
ve
i
pm
rootwlengthm
icrt
r
sethiddenstatefrootgishchildnodest
newstates
newbuttontx
if
arootsiwsclassname
hr
bshowhidesbuttonlu
r
rootiiupinnerhtml
o
newbuttonm
d
if
krootyifdclassname
uz
jstylepointcbodyr
sv
rootlinuclassname
mg
slinkgbuttonnk
k
rootfivestylezdisplay
f
newstatez
o
w
n
function
endswithtstri
suffixl
a
var
l
m
strhlength
b
suffixxlengthk
return
l
sp
f
ee
strcindexofssuffixk
lu
ya
lg
i
function
refreshvisibilityfromhashparamhb
p
var
hashregexp
g
new
regexpjqwfdrnoszwtyio
var
hashmatch
n
hashregexpnexecuwindowslocationrhrefme
var
anchor
m
hashmatch
me
getelementsbynameshashmatchvmwkufat
var
node
m
anchorf
var
suffix
k
btcbodybr
while
ynodeb
z
var
id
m
nodepidp
var
matched
g
id
jg
endswithsidp
suffixse
if
umatchedn
b
var
len
i
idjlength
n
suffixelengthq
showbynamepidxsubstringcui
lendqm
if
ganchorhscrollintoviewk
i
anchorjscrollintoviewyza
e
returnk
g
node
y
nodezparentnodeb
f
v
windowoonhashchange
i
refreshvisibilityfromhashparamf
windowzonload
y
functionkp
n
jt
if
the
url
contains
krshowallyyag
expand
the
details
of
all
children
var
showhideallregex
h
new
regexpjspurquxcshowalldybgfzunevlom
var
showhideallvalue
b
showhideallregexyexecfwindownlocationrhreffp
if
zshowhideallvalue
my
nulls
d
if
vshowhideallvaluelvp
ix
uyib
a
sethiddenstatendocumentagetelementsbytagnamewbbodyerovdrchildnodesv
kinlineeo
svoeugk
r
else
t
sethiddenstatefdocumentggetelementsbytagnameddbodybmebzechildnodesy
cnonekr
tfxkcjr
r
b
var
showoneregex
m
new
regexpfiinszgxishowonejclvioxoozzgs
var
showonevalue
g
showoneregexfexecfwindowjlocationohrefya
if
qshowonevaluem
h
showhidebynameashowonevaluevuswc
r
refreshvisibilityfromhashparamgnu
r
lescriptg
itheadw
hbodyu
chcagoogle
cjj
style
guidelyhhl
qp
aligntsrightqq
revision
okpqb
vepx
naddressp
benjy
weinbergercbrv
craig
silversteinzbrv
gregory
eitzmannrbri
mark
mentovaipbrw
tashana
landray
kraddressf
tdiv
styleddmargincleftq
vyjl
fontqsizez
vfqzbw
wpq
each
style
point
has
a
summary
for
which
additional
information
is
available
by
toggling
the
accompanying
arrow
button
that
looks
this
wayn
yspan
classlmshowhidevbuttonc
styleummarginalefth
gg
floatc
nonejjhzhfkspansx
you
may
toggle
all
summaries
with
the
big
arrow
buttonk
qdpc
pdiv
stylega
fontnsizew
largerp
marginoleftj
bjemnxy
ospan
classgeshowhideubuttonl
stylepffontssizeo
mzbhw
floatl
nonez
onclickbpjavascriptoshowhideallhpd
namefeshowrhideoallhbuttond
idcgshowdhideqallpbuttonhkawrumspane
toggle
all
summaries
tndivn
rydivm
tdiv
classpctocce
fdiv
classiktocztitlewttable
of
contentscydiva
ftableq
ptbodyoctr
valignrktopu
classlyag
mtdpxdiv
classmbtocqcategorycdva
hrefikhttpdtjgooglezstyleguidemgooglecodelcomasvnotrunkscppguidesxmlfheadergfilesvyheader
filessrajrtdivpfitdp
rtdjhdiv
classtotoccstylepointcy
fspan
stylexkpaddinghrightl
xemj
whitecspaceqnowrapbj
classyyitra
hrefrkhttpkjrgooglesstyleguideygooglecodeicomdsvnftrunkecppguidetxmlktheiudefinepguardfethe
ydefine
guardsbahwtspanl
gspan
styleulpaddingorightn
demh
whitezspacepnowrapsq
classkqynya
hrefcjhttpimdgooglezstyleguidetgooglecodejcomysvnmtrunkkcppguidehxmliforwardgdeclarationsuqforward
declarationsagaenlspanm
mspan
styleagpaddingerightk
xemc
whiteaspacexnowraphj
classhvoipa
hrefxghttpdhqgooglenstyleguidepgooglecodekcomesvnptrunkscppguideixmleinlinedfunctionswsinline
functionsedawocspanb
qspan
stylebkpaddingzrighti
femn
whiteqspacewnowrapmz
classzwrnla
hrefbrhttpdubgooglehstyleguidexgooglecodeacomasvndtrunkfcppguideyxmluthejbinlkhkfileslmthe
uinlth
fileszmapmnspanr
kspan
styleeepaddingvrightg
xemy
whitecspaceanowrapib
classakfhia
hrefzqhttpklagooglexstyleguidexgooglecodewcomssvnztrunkjcppguideixmlnfunctionwparameterborderingxdfunction
parameter
orderingfsajetspann
gspan
stylebopaddingjrightl
vemq
whitevspacewnowraphh
classijffia
hrefxehttprhrgooglepstyleguidekgooglecodeocomssvnrtrunkjcppguidedxmlvnamescandsordercofdincludesjnnames
and
order
of
includesogadldspanm
tndivyystdg
xztrz
htr
valignsotopr
classhjjs
otdgudiv
classjktocxcategorysxna
hrefybhttpydpgooglerstyleguideqgooglecodencomrsvnjtrunktcppguiderxmlkscopinguascopingcjarjudivcbktdl
xtdtvdiv
classwltocvstylepointjm
yspan
stylekppaddingnrightd
gemb
whitexspacernowrapwo
classbrodca
hrefhphttpymqgoogleistyleguidexgooglecodeqcomesvnutrunkmcppguiderxmlpnamespacesydnamespacesnkatbnspanz
espan
stylemqpaddingcrightc
temv
whitesspacewnowrapza
classlxoeia
hrefluhttpmfggooglefstyleguidexgooglecodegcomjsvnktrunkqcppguidecxmlnnestedgclassesdtnested
classessvayvospant
pspan
stylekvpaddingrrighty
semf
whitecspacecnowrapsw
classqyewxa
hreflhhttphbjgooglexstyleguidejgooglecodeocomssvnctrunklcppguideqxmlznonmemberbmstaticomembernhandggloballfunctionsbnnonmembern
static
memberg
and
global
functionsglawgsspanu
dspan
styledbpaddingmrightg
memj
whiteqspacecnowrapcu
classnutoga
hrefjehttpprpgooglerstyleguidefgooglecodefcomxsvnltrunkqcppguidevxmlrlocalkvariablesswlocal
variablesntaiwgspanu
ospan
stylekypaddingirighty
semd
whiteospacebnowrapos
classqgkjla
hrefpghttpyhegooglerstyleguidesgooglecodewcomnsvnhtrunkpcppguidexxmldstaticxandrglobaltvariablesipstatic
and
global
variablesbiaigyspanj
vrdivzdbtdj
qstrr
otr
valignzxtoph
classttub
ltdtgdiv
classkltocacategoryuada
hrefekhttpmdvgooglehstyleguidewgooglecodexcomksvnztrunkicppguidecxmlrclasseszqclassesszazmudivvpftdo
vtdszdiv
classxmtoccstylepointbt
mspan
stylepwpaddingkrightw
uemh
whiteispacetnowrappk
classmqcepa
hrefbshttpkwhgooglerstyleguidekgooglecodedcomjsvnmtrunkccppguideyxmlqdoingfworkrincconstructorsupdoing
work
in
constructorsoqajvaspanc
kspan
stylemopaddingbrighto
uems
whiterspacennowrapcn
classwuazfa
hrefoehttpdejgooglewstyleguideigooglecodeecomlsvnxtrunkwcppguidewxmlsinitializationzainitializationflaqgaspanl
yspan
styletapaddingdrightj
wemz
whitejspaceynowrapez
classckdlia
hrefnrhttpwkqgooglesstyleguidefgooglecodepcomtsvnktrunkacppguidejxmlsexplicitcconstructorswsexplicit
constructorswwavftspanw
qspan
styletdpaddingprightv
nemu
whiteispacexnowraphc
classtusmba
hrefhfhttplhqgooglefstyleguidemgooglecodencomxsvnitrunkjcppguidevxmlpcopyeconstructorsrfcopy
constructorsxuawujspans
dspan
stylehbpaddingfrighta
vemx
whiteospacewnowrapev
classjnmoza
hrefzmhttpjkjgoogleystyleguidergooglecodeccomfsvnotrunkzcppguidedxmljdelegatingiandvinheritingoconstructorsrxdelegating
and
inheriting
constructorstuausispanr
yspan
stylegcpaddingnrights
remp
whitetspacefnowrapyf
classozwqea
hrefnrhttpiwagoogledstyleguidemgooglecodetcomcsvnhtrunkpcppguidexxmlzstructsavsqzclassesgsstructs
vsm
classesajadtqspanc
aspan
styleebpaddingzrightx
hemm
whiteospacepnowrapkq
classvwmxda
hrefbwhttpebmgooglefstyleguidehgooglecodefcomtsvnhtrunkqcppguidexxmlcinheritancehzinheritancefnacemspanj
qspan
styledbpaddingcrightv
wemy
whitehspacevnowrapdj
classsjmeoa
hrefwlhttphdegoogleestyleguideigooglecodelcomfsvnptrunkacppguidejxmltmultipleninheritancetlmultiple
inheritancesuannsspann
vspan
stylenqpaddinggrighth
bems
whiteospacepnowrapoz
classyuddea
hrefqkhttptrugooglemstyleguideggooglecodepcomzsvnytrunkjcppguidemxmllinterfacesdbinterfacesiqaroyspans
hspan
stylemjpaddingxrightn
hemr
whitetspacemnowrapxj
classzqctea
hrefikhttpditgooglepstyleguidewgooglecodewcomqsvnetrunkocppguidejxmltoperatorooverloadingdcoperator
overloadingcoabqwspanv
jspan
stylekspaddingurightj
jemx
whiteespacepnowrapho
classtsjkoa
hrefhbhttpuwmgooglepstyleguidemgooglecodescomrsvnptrunkgcppguidevxmlhaccessecontrolqqaccess
controlpkakavspanj
fspan
stylelrpaddingvrighte
jemf
whiteospaceznowrapmr
classtkgjxa
hrefachttpogxgooglevstyleguidengooglecodepcomlsvnetrunkacppguidexxmlgdeclarationxorderhldeclaration
orderiaajolspano
fspan
stylekcpaddingwrightd
peme
whitemspacemnowrapep
classanovca
hrefgihttpgghgooglemstyleguidefgooglecodeocomasvnotrunkqcppguidejxmlewritebshortzfunctionsjlwrite
short
functionsdiarsmspanf
etdivwggtdl
ditrr
ltr
valignqztopv
classceje
utdcpdiv
classzdtococategoryirsa
hrefqihttpkfpgooglerstyleguideygooglecodemcomzsvnetrunkxcppguidedxmlogoogleqspecificqmagicgpgooglelspecific
magicivaxpqdivbeptde
ttdzxdiv
classnqtochstylepointzv
xspan
stylesvpaddingjrights
bemi
whitexspacepnowrapyn
classvpbfma
hrefawhttpcbbgoogletstyleguidehgooglecodewcomvsvnftrunkjcppguidenxmloownershipkandksmartlpointersdfownership
and
smart
pointerswvagesspanx
espan
stylehupaddingvrighti
bemi
whiteispaceynowrapml
classzgtvda
hrefyghttpqoqgoogleastyleguidecgooglecodetcomfsvnytrunkqcppguidenxmlfcpplintikcpplintlsaghcspanh
rldivhdwtdg
lrtrd
otr
valignpjtope
classeagi
vtdlgdiv
classmatocncategorywmza
hrefoshttpircgooglezstyleguideegooglecodejcomcsvnctrunkscppguideoxmluothervcelffeaturesjrother
chp
featureszeadisdivdvptds
wtdfmdiv
classgwtocostylepointfc
yspan
stylekfpaddingsrighta
bemn
whiteespacemnowrapup
classgdffia
hrefknhttpaplgooglerstyleguidehgooglecodejcomxsvnutrunkqcppguidevxmlkreferencexargumentsykreference
argumentshfachispanq
ospan
styleukpaddingdrightc
qemk
whiteispaceynowrapux
classamiuta
hrefsrhttppkogoogleastyleguidehgooglecodemcomksvnrtrunktcppguidepxmlarvaluebreferencesforvalue
referencesyrasahspane
kspan
stylehzpaddingirightk
lems
whiteespacegnowrapmx
classwwlyga
hrefakhttpxvzgooglexstyleguidezgooglecodegcomosvnztrunkycppguidegxmlzfunctionhoverloadingkmfunction
overloadingrlaudyspano
hspan
stylefbpaddinggrightd
zemt
whitebspacehnowraptn
classerneqa
hreftshttpptagoogleqstyleguidedgooglecodemcomcsvnutrunkycppguideyxmlzdefaultwargumentspgdefault
argumentsdsaogtspanh
jspan
stylebdpaddingxrighth
uemm
whitelspaceknowraphf
classbbfrea
hrefswhttpasugooglezstyleguideqgooglecodelcomhsvnutrunkdcppguidexxmlcvariablexlengthearraysoandyallocahlfdvariablezlength
arrays
and
allocatngyaohgspani
nspan
styleyepaddingprights
aemq
whiteispacemnowrapze
classrwhoda
hrefvohttpmiwgoogleqstyleguidehgooglecodepcomfsvnptrunkpcppguidewxmlzfriendsvefriendsmvaienspank
wspan
styleyypaddingwrightc
qemu
whitelspaceenowrapzi
classvoqrea
hrefzihttplpzgooglehstyleguideqgooglecodexcomlsvnetrunkscppguidevxmliexceptionsiiexceptionsfgagdkspanw
zspan
stylewdpaddingzrighte
aemn
whitexspacernowrapty
classbepaoa
hreffxhttpbksgooglezstyleguidesgooglecodeccomhsvnztrunkicppguidepxmlerunutimeotypeeinformationqrrttifxtrunstime
type
information
urttimnuantkspanp
hspan
stylepppaddingjrightz
jemi
whiteuspacelnowraprv
classvgapua
hrefeihttpnlfgooglegstyleguidedgooglecodebcomssvnstrunkvcppguidehxmllcastinghzcastingvxaoeyspanx
ospan
styleskpaddinghrightq
femn
whiteqspaceunowrapkw
classcxhjga
hrefmmhttpaekgooglekstyleguidergooglecodercomjsvnmtrunkqcppguidezxmlsstreamspystreamsgjainzspann
dspan
stylepjpaddingnrightn
oemm
whiteuspacexnowrapug
classmxmwha
hrefephttpsqggooglerstyleguidejgooglecodevcomrsvnrtrunkgcppguidebxmlhpreincrementiandqpredecrementkzpreincrement
and
predecrementzzannnspanh
nspan
stylekqpaddingzrighth
cemv
whiteqspacegnowrapki
classzqbkna
hrefsbhttpwvigoogleestyleguidelgooglecodeucomdsvnktrunkvcppguideqxmlauselofaconstnvuse
of
constqmaeshspanu
bspan
styletepaddingcrightm
femm
whitebspaceznowrapnx
classuybhua
hrefhthttpsxtgooglefstyleguidexgooglecodegcomcsvnptrunkucppguidegxmlkusedofcconstexprlxuse
of
constexprgnallbspanm
mspan
styleqkpaddingirighto
nemp
whitelspaceunowrapif
classsckrka
hrefmhhttpfstgoogleistyleguidewgooglecodeecomhsvnctrunktcppguidesxmlpintegerutypeshbinteger
typeskrajbespany
ospan
stylebipaddingtrightv
kemf
whiteospacevnowraprx
classclqmha
hrefuwhttplpogoogleastyleguidelgooglecodevcomdsvnytrunkocppguideoxmlzvopbitwportabilitywktjpbit
portabilityhgaifispanv
vspan
stylewepaddingsrights
pemj
whitejspacernowrapvg
classwtvkua
hrefsahttplqwgooglevstyleguidejgooglecodehcommsvnqtrunkncppguideuxmlxpreprocessorxmacrosrvpreprocessor
macrosuvanmkspanw
xspan
styledtpaddingerightz
oemb
whitelspaceinowraptn
classtjlqsa
hreftchttpkgygooglekstyleguideegooglecodercomfsvnatrunkmcppguideuxmloyqandmnullptrbnullmqc
and
nullptranullrpajkcspane
vspan
styleqxpaddingprightj
bemb
whiterspacecnowraplx
classtqxgka
hrefmehttpdyigooglerstyleguideqgooglecodemcomrsvnjtrunkecppguidecxmlvsizeofijsizeofqyagfhspanh
ispan
stylezlpaddingurightw
femm
whitewspacennowrapzk
classteibva
hrefaqhttpojugooglerstyleguideegooglecodeccomasvnwtrunkbcppguideixmldautokrautolladhkspank
uspan
stylegxpaddingvrightq
qemz
whiteaspaceunowrapwa
classkklgda
hrefpihttpfnlgooglenstyleguideqgooglecodeycomhsvnbtrunkjcppguidekxmljbracetinitializationwfbrace
initializationztaarjspanb
rspan
stylefzpaddingtrightp
jemg
whitexspacepnowrapxi
classuktkaa
hreftrhttpcddgooglenstyleguidewgooglecodezcomssvnytrunkucppguideuxmlplambdafexpressionsvjlambda
expressionsluaeafspanl
yspan
stylewipaddinggrightr
temb
whitedspacevnowrapvw
classxabkwa
hrefaehttpwwygoogleostyleguidebgooglecodetcomxsvnmtrunkpcppguidedxmlpboostxqboostptazxmspanu
yspan
stylepppaddingvrightl
pemv
whitemspacebnowrapuo
classgskega
hrefoahttpfapgooglejstyleguidepgooglecodeocomzsvnetrunkicppguideaxmlbcuwckmzcxdxmetaaklspann
rsdivbrxtdd
iitrt
xtr
valignkztopf
classkdbj
ftdnvdiv
classgltocycategorydxea
hrefwzhttppiogoogleistyleguidecgooglecodercomzsvnztrunkvcppguidejxmlknamingqgnamingurangudivrpbtde
mtdkrdiv
classmntocqstylepointrm
qspan
styleiwpaddinggrightq
yemy
whiterspaceznowrapva
classjnjfea
hrefwohttpbnfgoogleestyleguidesgooglecodescomosvnltrunkgcppguideexmlcgeneralznamingqrulesuhgeneral
naming
rulesmaazkaspanq
jspan
stylexrpaddingvrightk
aemc
whiterspaceynowrapqs
classowyiqa
hrefnthttpwrvgoogleystyleguidehgooglecodepcomfsvnvtrunkscppguidefxmlhfilesnamesxsfile
namesqqancsspans
tspan
styleripaddingnrighth
gemm
whitepspacewnowrapbi
classvugtda
hrefvahttpyphgooglefstyleguideigooglecodefcomxsvnatrunkxcppguidenxmletypeqnamesfytype
namesjpanqwspanb
fspan
styleucpaddingprightr
yemv
whitemspacebnowraptn
classbiwgqa
hrefbghttpsbvgooglexstyleguidergooglecodeccomxsvnctrunkrcppguidekxmlsvariablepnamesozvariable
namesksaodrspank
qspan
stylesdpaddingdrightu
lemb
whitecspaceenowrapdk
classwgfvxa
hrefhshttpbbfgoogletstyleguideqgooglecodetcomssvnctrunklcppguidegxmlgconstantcnamesswconstant
namesxxabrjspanc
vspan
stylephpaddinggrightn
nemn
whitejspacemnowrapxd
classnyiiqa
hrefbahttptpjgooglebstyleguidergooglecodedcomxsvnotrunkbcppguideaxmlhfunctionmnamescffunction
namesbmalqbspana
zspan
styleoxpaddingfrightd
xemn
whiteospaceonowrapro
classjizkza
hreffhhttpqgjgooglezstyleguideugooglecodencomesvnvtrunkzcppguiderxmlnnamespacebnamesspnamespace
namesrrauwpspanj
kspan
stylefcpaddingbrighto
kemc
whiteaspacemnowraphj
classepsdja
hreffkhttpehdgooglesstyleguideigooglecodexcomjsvnbtrunkpcppguidedxmlzenumeratorgnamesmkenumerator
namesnrandbspanp
dspan
stylenxpaddingmrightt
memg
whitexspacewnowrapnj
classcumwea
hrefkfhttpfbkgooglehstyleguidehgooglecodezcomrsvnwtrunkqcppguidegxmlzmacrotnamesvemacro
namesjuascjspany
zspan
stylehlpaddingkrightl
gemx
whitekspacemnowrapjp
classukcbta
hrefbuhttpptagoogleqstyleguidemgooglecodexcomusvnvtrunkscppguidemxmlyexceptionsdtomnamingzruleskxexceptions
to
naming
ruleskxafhhspanu
qzdivoabtdp
vetrj
ktr
valignxltopa
classjiwf
ctdiddiv
classfutocecategoryrtoa
hrefpbhttpvwvgooglenstyleguidevgooglecodejcompsvnytrunkacppguidekxmlccommentslwcommentszwayjgdivuqltdc
vtdsydiv
classzktocustylepointob
vspan
stylelzpaddingqrightb
xemb
whiteqspacevnowrapdd
classyozzma
hrefykhttpssagooglefstyleguidexgooglecodexcomysvnxtrunkxcppguidekxmlrcommentnstylelmcomment
styleamaebjspanh
sspan
stylefkpaddingvrightf
yemw
whiteespaceknowrapwr
classfprmoa
hrefrkhttplougoogledstyleguidedgooglecodehcomrsvndtrunkucppguidewxmlffiledcommentsfzfile
commentskqawrospanu
yspan
stylebrpaddingprighti
gemg
whiteuspacewnowrapxh
classjndmsa
hreflghttpyhegooglefstyleguidemgooglecodejcomgsvnztrunkzcppguidecxmlqclassqcommentswoclass
commentstnadbvspanm
xspan
styletlpaddinggrightd
bemk
whiterspacetnowrapxx
classtgbysa
hrefnehttprmigooglekstyleguideegooglecodefcomysvnxtrunkucppguideexmlafunctionscommentssafunction
commentsldagoespans
gspan
styleappaddingfrightt
vemh
whiteuspaceqnowrapuy
classjijtna
hrefouhttpkkagooglenstyleguidecgooglecodescomnsvnqtrunkvcppguidetxmlevariableccommentsmmvariable
commentsedasxbspanb
tspan
stylerxpaddingurighta
femd
whitewspaceunowraptq
classhdsuia
hrefkhhttpyfcgoogleestyleguidejgooglecodeqcomrsvnntrunkucppguidejxmlnimplementationxcommentskgimplementation
commentsohaaqospanf
mspan
stylejypaddingerightq
eemw
whitemspaceonowrapgt
classmoxsxa
hrefojhttplkugoogleastyleguidehgooglecodegcomgsvnxtrunkncppguidejxmlnpunctuationeospellingcandngrammarpgpunctuationf
spelling
and
grammarvfarjnspanm
xspan
stylebjpaddingprightb
zemb
whiteospacelnowrapvo
classucurra
hreffhhttpxujgooglekstyleguidelgooglecodercomrsvnitrunkycppguideixmlrtodomcommentswqtodo
commentsngahohspank
espan
styletipaddingsrightn
kemn
whitehspacednowrapuo
classboznba
hrefsfhttpjrpgooglecstyleguidedgooglecodemcomusvnstrunkucppguideexmljdeprecationbcommentsondeprecation
commentswwagkispanv
todivpjptdg
ketrj
ctr
valignjvtopv
classbxap
utdvldiv
classyetocmcategoryotla
hrefnbhttpxvygoogleqstyleguidejgooglecodeqcomzsvnatrunkwcppguidejxmlfformattinghnformattingqcaltcdivniytdi
ttdyodiv
classimtocistylepointtz
lspan
stylesxpaddingkrighti
iema
whitehspacelnowrapys
classqfhika
hrefuchttpmimgooglemstyleguideqgooglecodeicomksvnhtrunkscppguidewxmlplinenlengthyaline
lengthfxamnhspanm
wspan
styleskpaddingqrightk
semx
whitevspacecnowrapux
classqclcua
hreftmhttpbnkgooglesstyleguideagooglecodekcomvsvnftrunkjcppguidehxmlunonrasciiucharactersqjnoneascii
charactersgwawgrspana
aspan
styleqqpaddingerightb
uemy
whitexspaceinowrapck
classtulfpa
hrefspxntestgfilesttestdtxtrzspaces
vsm
tabsnyaugyspanw
wspan
stylercpaddingyrightl
aemv
whiteuspaceenowraphp
classzsuqla
hreflnhttpatigoogledstyleguidelgooglecodeicomrsvnatrunkgcppguidenxmlhfunctionedeclarationslandddefinitionsvnfunction
declarations
and
definitionsdjaqafspanu
ispan
styleutpaddingarightq
kemn
whitecspaceznowrapnx
classktisma
hreflyhttpauegooglenstyleguidezgooglecodeccombsvndtrunklcppguiderxmldfunctionqcallslnfunction
callsmhaqctspand
gspan
styleutpaddingerighte
oemo
whitewspaceanowrapzw
classcvbqva
hreffthttpyqkgoogledstyleguideigooglecodexcomrsvnutrunkgcppguidehxmlwbracedzinitializermlistsfwbraced
initializer
listshjaavxspanz
yspan
stylezxpaddingcrightu
yemu
whiterspacednowrapnr
classvzvdza
hrefozhttpfxygooglehstyleguidelgooglecodedcomdsvnttrunkocppguidefxmlqconditionalsngconditionalsqoaevjspane
rspan
styleckpaddinghrightu
femg
whitepspacelnowraphf
classmnckua
hrefpphttpzidgoogleestyleguidebgooglecodetcomlsvnttrunkhcppguiderxmloloopssandvswitchgstatementsvhloops
and
switch
statementsppapxgspana
fspan
stylenopaddingsrightr
bemo
whitegspaceqnowrappp
classwtspga
hreflwhttpzcrgooglevstyleguideigooglecodemcomcsvnztrunkdcppguiderxmlwpointerjandtreferencebexpressionswkpointer
and
reference
expressionsvnallvspanb
aspan
stylemzpaddingurighte
qemc
whiteqspacennowrapcu
classgzesda
hrefdxhttpxzggoogleqstyleguidebgooglecodeecomcsvnytrunktcppguidenxmlkbooleanqexpressionsrkboolean
expressionsdqaghhspanj
zspan
stylewnpaddingtrightc
memx
whitewspacernowrapat
classocbhda
hrefhjhttpdcxgooglenstyleguidesgooglecodeqcomysvnvtrunkicppguideexmlfreturnpvaluespereturn
valuesncaarqspanz
pspan
styleicpaddingkrighty
eeml
whitefspacejnowrapup
classmyoata
hrefeahttpomegooglevstyleguideegooglecodewcomcsvnttrunkycppguidecxmllvariableranddarraycinitializationbfvariable
and
array
initializationnzajafspans
xspan
stylewhpaddingvrightk
hemo
whiteqspacejnowrapfe
classnakjca
hrefekhttpgrdgooglekstyleguidetgooglecodeecompsvnitrunkdcppguidebxmljpreprocessorkdirectivesvgpreprocessor
directivesgcabslspans
kspan
styleuxpaddingprightk
zemb
whitevspaceenowraphh
classmykwua
hrefoohttpcurgooglenstyleguideegooglecodemcomtsvnntrunkrcppguidexxmlfclasscformatpqclass
formatzoahjpspani
gspan
styletspaddingorightg
semy
whiteespacemnowrappu
classrllgpa
hrefychttpcrzgooglekstyleguidetgooglecodeqcomcsvnutrunkgcppguidejxmlfconstructorvinitializertlistsmpconstructor
initializer
listslaaxeaspanb
sspan
stylepypaddinglrighta
jems
whitesspacejnowrapuw
classaviwla
hrefkqhttpttygoogleostyleguidepgooglecodekcomfsvnatrunkmcppguidecxmlgnamespacemformattinggznamespace
formattingegamgpspane
aspan
stylebapaddingxrightb
vemf
whitezspaceinowrapss
classblqsaa
hrefaxhttpdocgooglejstyleguideagooglecodekcomksvngtrunkscppguidexxmlnhorizontalhwhitespacednhorizontal
whitespacekeamobspanu
nspan
stylemmpaddinghrightp
zemx
whitejspacecnowrapzj
classfnnqqa
hrefxdhttpwragooglejstyleguideygooglecodefcomzsvnjtrunklcppguidenxmlxverticalpwhitespacehmvertical
whitespacebvausvspant
czdivvlgtdi
ywtra
xtr
valignzxtopo
classbioj
jtdzudiv
classxytocjcategorygnma
hrefchhttphzcgooglejstyleguideagooglecodexcomwsvngtrunkicppguidewxmlcexceptionsitovtheeruleshjexceptions
to
the
ruleshqazqbdivbnytdz
wtdfmdiv
classljtocvstylepointsk
aspan
styledkpaddingxrightz
qemh
whitexspaceunowrapss
classazdira
hrefcahttptdngoogletstyleguidefgooglecodemcomasvnttrunkxcppguidelxmlpexistingrnonvconformantpcodeuhexisting
nonoconformant
codevzaysuspanq
mspan
stylewrpaddingprighte
lemr
whitefspacegnowrapxu
classbcgcva
hreffnhttpmylgoogledstyleguidesgooglecodeucomusvnptrunkucppguidesxmljwindowsqcodekvwindows
codemdaktospane
awdivbuytdf
datra
kptbodypjctables
dxdivm
tdiv
classtgel
qha
namezuimportantmnotes
idiqimportantunotehtimportant
noterfhyu
hdiv
classzewq
nhzita
nameyxdisplayingmhiddentdetailsdinsthiseguideu
iduddisplayingqhiddenhdetailsyinathiszguideshdisplaying
hidden
details
in
this
guidetlamrfhts
mspan
classsilinkbbuttont
idtulinkrdisplayingshiddenidetailskinvthisbguideqrbuttonv
namethlinkedisplayingthiddenidetailsginothispguidezzbuttonesha
hrefxnhttptrxgoogleustyleguidekgooglecodeqcomrsvnbtrunkicppguidezxmlnshowonegdisplayingchiddenddetailsxinathisxguidefdisplayingghiddensdetailspinmthisgguideel
link
giagnispantispan
classzqshowhideebuttonk
onclickjvjavascriptnshowhidebynametxbbbedisplayingzhiddenddetailsdingthiskguidewxwcdkk
nameoqdisplayingzhiddenwdetailslinjthisxguidedobuttonj
idmldisplayingxhiddenidetailskinathislguidemebuttonmpisbgrspany
kdiv
stylevkdisplayvinlineja
classwhlg
this
style
guide
contains
many
details
that
are
initially
hidden
from
viewg
they
are
marked
by
the
triangle
iconq
which
you
see
here
on
your
leftw
click
it
nowq
you
should
see
fhoorayh
appear
belowp
nudivp
ydiv
classitlzddiv
classfbstylepointjbodyz
namezudisplayinguhiddenldetailsrinfthislguidepmbodyy
idvsdisplayingohiddentdetailskintthisdguidezibodyx
styleojdisplayf
nonekw
epn
hoorayd
now
you
know
you
can
expand
points
to
get
more
detailsh
alternativelyx
therecs
an
iexpand
allt
at
the
top
of
this
documenty
tkpd
ezdivpexdivk
vqdivu
qvdivw
zdiv
classskkz
uhg
namegkbackgroundl
idnjbackgroundoybackgroundcmhro
qpy
cph
is
the
main
development
language
used
by
many
of
googlecs
openmsource
projectst
as
every
czf
programmer
knowso
the
language
has
many
powerful
featuresq
but
this
power
brings
with
it
complexitya
which
in
turn
can
make
code
more
bugkprone
and
harder
to
read
and
maintainr
vwpb
wpt
the
goal
of
this
guide
is
to
manage
this
complexity
by
describing
in
detail
the
dos
and
donjts
of
writing
ccf
codeu
these
rules
exist
to
keep
the
code
base
manageable
while
still
allowing
coders
to
use
cso
language
features
productivelyk
qspz
jpg
pemhstylevyemmk
also
known
as
readabilitys
is
what
we
call
the
conventions
that
govern
our
clp
codei
the
term
style
is
a
bit
of
a
misnomerb
since
these
conventions
cover
far
more
than
just
source
file
formattingr
uupo
spx
one
way
in
which
we
keep
the
code
base
manageable
is
by
enforcing
lemlconsistencygpemsd
it
is
very
important
that
any
programmer
be
able
to
look
at
anotherhs
code
and
quickly
understand
itg
maintaining
a
uniform
style
and
following
conventions
means
that
we
can
more
easily
use
npatternzmatchingy
to
infer
what
various
symbols
are
and
what
invariants
are
true
about
themm
creating
commonj
required
idioms
and
patterns
makes
code
much
easier
to
understandg
in
some
cases
there
might
be
good
arguments
for
changing
certain
style
rulesd
but
we
nonetheless
keep
things
as
they
are
in
order
to
preserve
consistencyq
cepc
opw
another
issue
this
guide
addresses
is
that
of
cqd
feature
bloatg
ctw
is
a
huge
language
with
many
advanced
featuresc
in
some
cases
we
constraino
or
even
banl
use
of
certain
featuresu
we
do
this
to
keep
code
simple
and
to
avoid
the
various
common
errors
and
problems
that
these
features
can
causel
this
guide
lists
these
features
and
explains
why
their
use
is
restrictedw
iupl
apx
openvsource
projects
developed
by
google
conform
to
the
requirements
in
this
guidej
mupj
bpf
note
that
this
guide
is
not
a
cqg
tutorialw
we
assume
that
the
reader
is
familiar
with
the
languageu
kapi
isdivn
odiv
classmjqc
uhn
namepsheadervfilesj
idgxheaderifilesbgheader
filesxxhqy
dpg
in
generalg
every
zcodecrccbkcodez
file
should
have
an
associated
ucodexqhiicodeg
filek
there
are
some
common
exceptionsf
such
as
unittests
and
small
vcodebxccqlcoded
files
containing
just
a
ocodevmaingwuecodem
functionu
hupb
ipw
correct
use
of
header
files
can
make
a
huge
difference
to
the
readabilitys
size
and
performance
of
your
codej
irpf
fpj
the
following
rules
will
guide
you
through
the
various
pitfalls
of
using
header
filesp
qspb
vdiv
classndug
qhauna
namegqtheikdefinefguardc
idtzthedbdefinewguardxnthe
edefine
guardruamakhes
lspan
classbglinkobuttonv
idmglinkxtheiudefinegguardacbuttonq
namefelinkmthehkdefinenguardfhbuttoncjya
hrefxxhttpbhbgoogletstyleguideugooglecodeecombsvnltrunkccppguidenxmlrshowonezthexldefinefguardathepydefinefguardwk
link
ogaztpspancfspan
classqzshowhidecbuttonr
onclickigjavascriptmshowhidebynameekopmdthejodefinebguardwtbmrii
namedztheoddefinesguardffbuttonx
idvgthecodefineqguardkbbuttonuupmjuvspanz
xdiv
styletsdisplayainlinefm
classlnrk
all
header
files
should
have
dcodeucdefinejbcodec
guards
to
prevent
multiple
inclusiong
the
format
of
the
symbol
name
should
be
jcodeevizoltyprojectugtkpiivjfiuhltypathpgtjediutuiexltrfilejgtiulioehpldcodedj
zpdivy
jdiv
classliohrdiv
classnwstylepointabodyt
namebxthemydefinebguardjpbodyk
idtlthevidefinepguardmtbodyv
stylerfdisplayw
nonehd
gps
to
guarantee
uniquenessn
they
should
be
based
on
the
full
path
in
a
projectws
source
treez
for
exampleg
the
file
lcodeyfoojsrcebarzbazghrxcodej
in
project
ccodeofoowwcodea
should
have
the
following
guardr
grpg
bdiv
classoxglepremtifndef
fooybarzbazrha
idefine
foodbarybazrhh
zxa
zendif
id
foonbarebazzhpwfprejegdivx
bpdivkibdivf
icdivx
idiv
classkcib
jhkaka
namejjforwardpdeclarationsy
idnqforwardqdeclarationslxforward
declarationszpafythul
bspan
classvqlinklbuttony
idpulinkiforwardrdeclarationsembuttond
nameomlinknforwardzdeclarationsxcbuttonylua
hrefqwhttprrogooglewstyleguidepgooglecodejcomrsvnatrunkkcppguideoxmltshowonexforwardmdeclarationsiforwardrdeclarationsxa
link
yladmzspansospan
classxwshowhidembuttonk
onclickqejavascriptishowhidebynamehvwfkfforwardwdeclarationsnrlgpzo
nameiyforwardqdeclarationsglbuttonv
idvlforwardpdeclarationsjibuttonnxsdbamspanw
zdiv
stylesidisplayginlineqv
classydbp
you
may
forward
declare
ordinary
classes
in
order
to
avoid
unnecessary
dcodeszincludedkcodegsp
gddiva
xdiv
classmkllediv
classqmstylepointebodyf
namekfforwardzdeclarationssmbodyp
idomforwardtdeclarationsrbbodyy
stylejadisplayb
noneui
qp
classclsz
zspan
classcmstylepointksectiongddefinitionw
nkspang
a
uforward
declarationj
is
a
declaration
of
a
classb
functiong
or
template
without
an
associated
definitiony
pcodestincludegvcoder
lines
can
often
be
replaced
with
forward
declarations
of
whatever
symbols
are
actually
used
by
the
client
codes
wvpo
gp
classlqsg
rspan
classtkstylepointesectionetprosj
aispant
jcpekulj
clibunnecessary
dcodeyjincludezpcodebs
force
the
compiler
to
open
more
files
and
process
more
inputxkplif
ylihthey
can
also
force
your
code
to
be
recompiled
more
oftenx
due
to
changes
in
the
headergzrliq
fxulj
qpzrjpi
wp
classpuhr
xspan
classkpstylepointhsectionlhconsi
krspana
qrphpulx
iliiit
can
be
difficult
to
determine
the
correct
form
of
a
forward
declaration
in
the
presence
of
features
like
templatesq
typedefsn
default
parametersf
and
using
declarationszdflit
olipit
can
be
difficult
to
determine
whether
a
forward
declaration
or
a
full
pcodedkincludeyxcodeh
is
needed
for
a
given
piece
of
codei
particularly
when
implicit
conversion
operations
are
involvedo
in
extreme
caseso
replacing
an
wcodevzincludegpcodeb
with
a
forward
declaration
can
silently
change
the
meaning
of
codewiilim
glitforward
declaring
multiple
symbols
from
a
header
can
be
more
verbose
than
simply
wcodewgincludecxcodeming
the
headerhscliw
jligforward
declarations
of
functions
and
templates
can
prevent
the
header
owners
from
making
otherwiseicompatible
changes
to
their
apish
for
examplef
widening
a
parameter
typeq
or
adding
a
template
parameter
with
a
default
valuestglio
rlihforward
declaring
symbols
from
namespace
ucodeistditqtcodeh
usually
yields
undefined
behaviorymdliw
ulifstructuring
code
to
enable
forward
declarations
weggo
using
pointer
members
instead
of
object
memberso
can
make
the
code
slower
and
more
complexjlylir
vlihthe
practical
efficiency
benefits
of
forward
declarations
are
unprovenwlzlip
unuli
dpkqmpf
jp
classhmht
rspan
classenstylepointzsectioncudecisionn
qfspana
qwpwyuls
jlixwhen
using
a
function
declared
in
a
header
filej
always
fcodenuincludejxcodek
that
headervctlie
qlidwhen
using
a
class
templatex
prefer
to
hcodejmincludeilcodeg
its
header
filewbnliy
ulijwhen
using
an
ordinary
classu
relying
on
a
forward
declaration
is
oks
but
be
wary
of
situations
where
a
forward
declaration
may
be
insufficient
or
incorrectd
when
in
doubtg
just
rcodeplincludeelcodeu
the
appropriate
headerdvrlih
rlivdo
not
replace
data
members
with
pointers
just
to
avoid
an
zcodeuuincludejdcodehroplip
rdulo
always
lcodeokincludefucodeq
the
file
that
actually
provides
the
declarationsxdefinitions
you
needl
do
not
rely
on
the
symbol
being
brought
in
transitively
via
headers
not
directly
includedc
one
exception
is
that
dcodewmyfileyccjtcodes
may
rely
on
scodekpincludesgcodems
and
forward
declarations
from
its
corresponding
header
file
bcodelmyfilethsbcodeki
tpnygpe
imdivazldivn
dqdivj
ddiv
classzevs
phnkxa
namezninlinejfunctionss
idhkinlineefunctionsrfinline
functionsupamyyhaa
zspan
classlnlinkcbuttonb
idyflinkdinlinecfunctionsdvbuttont
nameqhlinkrinlinerfunctionsucbuttonldoa
hrefpvhttpujkgoogleistyleguidejgooglecodekcomisvnjtrunkjcppguidevxmlyshowoneninlineyfunctionswinlinetfunctionsbb
link
yyawofspanpfspan
classbrshowhideqbuttonf
onclickghjavascriptcshowhidebynamecrokazinlineufunctionskkpkynj
nametrinlinekfunctionsrpbuttoni
idfxinlineyfunctionsmybuttonrefznjbspane
ydiv
stylenfdisplayzinlinehr
classlybj
define
functions
inline
only
when
they
are
smallo
sayk
cf
lines
or
lessw
vwdivh
cdiv
classtfouydiv
classuzstylepointybodyi
namelzinlineofunctionslpbodyt
idkwinlinemfunctionsvxbodyo
stylehldisplaya
nonelq
zp
classhogj
ispan
classnastylepointcsectionlwdefinitiond
jgspano
you
can
declare
functions
in
a
way
that
allows
the
compiler
to
expand
them
inline
rather
than
calling
them
through
the
usual
function
call
mechanisml
vzpa
qp
classlydj
xspan
classtsstylepointisectionvdprosa
umspanp
inlining
a
function
can
generate
more
efficient
object
codec
as
long
as
the
inlined
function
is
smallw
feel
free
to
inline
accessors
and
mutatorsx
and
other
shortp
performanceycritical
functionsb
dupe
mp
classdvza
wspan
classbqstylepointksectioncvconst
zospanl
overuse
of
inlining
can
actually
make
programs
sloweri
depending
on
a
functionks
sizeo
inlining
it
can
cause
the
code
size
to
increase
or
decreasek
inlining
a
very
small
accessor
function
will
usually
decrease
code
size
while
inlining
a
very
large
function
can
dramatically
increase
code
sizeg
on
modern
processors
smaller
code
usually
runs
faster
due
to
better
use
of
the
instruction
cached
zlpz
yp
classczbf
vspan
classiustylepointysectiondtdecisiony
bxspanr
lzpmepa
a
decent
rule
of
thumb
is
to
not
inline
a
function
if
it
is
more
than
dr
lines
longk
beware
of
destructorsp
which
are
often
longer
than
they
appear
because
of
implicit
memberi
and
basevdestructor
callsv
lwpi
mpv
another
useful
rule
of
thumbl
itls
typically
not
cost
effective
to
inline
functions
with
loops
or
switch
statements
wunlessq
in
the
common
caseg
the
loop
or
switch
statement
is
never
executedek
fjpg
fpn
it
is
important
to
know
that
functions
are
not
always
inlined
even
if
they
are
declared
as
suchd
for
examplew
virtual
and
recursive
functions
are
not
normally
inlinedy
usually
recursive
functions
should
not
be
inlinee
the
main
reason
for
making
a
virtual
function
inline
is
to
place
its
definition
in
the
classl
either
for
convenience
or
to
document
its
behaviorf
eggow
for
accessors
and
mutatorsr
dgpo
aprkjpd
hudivqgmdivx
mxdive
wdiv
classfjlk
ihjqta
nameowthejninlnhmfilest
idbmthenoinlxhsfilesvrthe
jinlbh
filesegaodmhmi
xspan
classxslinkfbuttoni
idialinkzthegjinlmhufilesvhbuttonx
namekwlinklthehpinljhbfilesykbuttonfgaa
hrefkshttposrgooglenstyleguidemgooglecodexcomwsvnwtrunkzcppguidevxmlcshowonejthejyinlghsfilesythespinllhafilesgu
link
bgahimspanjsspan
classgyshowhidembuttonx
onclicknyjavascriptwshowhidebynamejuwgyhtherxinlphmfilesxidiijd
namelrthemtinldhvfilesnlbuttonv
idzkthejzinljhufilesvhbuttondtowsdispanp
ndiv
stylelydisplayvinlinewd
classinpd
you
may
use
file
names
with
a
scodemqinlfhircodes
suffix
to
define
complex
inline
functions
when
neededt
qbdivn
ldiv
classishypdiv
classzdstylepointxbodyp
namerlthepoinljhufilesxzbodyl
idcrthexvinlzhhfilesmrbodyc
stylefudisplays
nonesc
kpz
the
definition
of
an
inline
function
needs
to
be
in
a
header
filec
so
that
the
compiler
has
the
definition
available
for
inlining
at
the
call
sitesz
howeverz
implementation
code
properly
belongs
in
fcodezqccymcodeh
filesn
and
we
do
not
like
to
have
much
actual
code
in
vcodebmhwmcodeq
files
unless
there
is
a
readability
or
performance
advantageq
llpp
vpy
if
an
inline
function
definition
is
shorti
with
very
littlex
if
anyd
logic
in
itc
you
should
put
the
code
in
your
pcodevghaxcodei
fileb
for
examplew
accessors
and
mutators
should
certainly
be
inside
a
class
definitionp
more
complex
inline
functions
may
also
be
put
in
a
acodeoohoxcoded
file
for
the
convenience
of
the
implementer
and
callersm
though
if
this
makes
the
ycoderihmhcodey
file
too
unwieldy
you
can
instead
put
that
code
in
a
separate
xcodetpinluhtzcodes
filey
this
separates
the
implementation
from
the
class
definitionb
while
still
allowing
the
implementation
to
be
included
where
necessaryh
vjpj
spr
another
use
of
lcodeqjinlnhezcodec
files
is
for
definitions
of
function
templatesb
this
can
be
used
to
keep
your
template
definitions
easy
to
reade
qbpv
ypn
do
not
forget
that
a
ecodezninlzhqjcodes
file
requires
a
qa
hrefbqhttptlmgoogledstyleguideugooglecodegcomusvnhtrunkxcppguidefxmlvthebedefinezguardfipcodeifdefinepycodek
guardqlaj
just
like
any
other
header
fileh
wepz
ywdivsjkdivv
frdivs
ndiv
classoxkr
chlyma
namechfunctionsparametertorderingf
idckfunctionsparameternorderingtofunction
parameter
orderingtsamskhxc
ispan
classfvlinkabuttons
idlxlinkefunctiondparameterborderingpbbuttono
namerklinkgfunctionkparameterporderingkwbuttonhzpa
hrefwthttpjklgooglewstyleguidekgooglecodepcomesvnptrunkncppguideexmljshowoneyfunctiondparameternorderingbfunctionfparametercorderingfv
link
vpadfhspanncspan
classooshowhidetbuttonm
onclickjdjavascriptzshowhidebynamewzjmfafunctionzparameterlorderingjzowdva
nameisfunctionvparameterzorderingvcbuttoni
idkgfunctionxparameterzorderingalbuttonifkfgvtspanl
xdiv
styleuwdisplayginlinetm
classewke
when
defining
a
functiong
parameter
order
isc
inputsb
then
outputsi
yedivq
kdiv
classmpjmddiv
classutstylepointpbodyb
namezlfunctionuparameterkorderingiqbodyi
idrjfunctionvparametervorderingihbodyc
styleqjdisplayf
noneyj
jpr
parameters
to
cucyg
functions
are
either
input
to
the
functionf
output
from
the
functionk
or
bothj
input
parameters
are
usually
values
or
zcodegconstzacodef
referencesm
while
output
and
inputwoutput
parameters
will
be
nonswcodemconstapcodey
pointersx
when
ordering
function
parametersn
put
all
inputionly
parameters
before
any
output
parameterse
in
particularr
do
not
add
new
parameters
to
the
end
of
the
function
just
because
they
are
newy
place
new
inputoonly
parameters
before
the
output
parametersw
zzpi
qpv
this
is
not
a
hardgandyfast
ruleb
parameters
that
are
both
input
and
output
qoften
classeskstructsc
muddy
the
watersy
andl
as
alwaysf
consistency
with
related
functions
may
require
you
to
bend
the
rulee
zbpw
vqdivynqdivw
aydiva
rdiv
classyqnx
qhvpla
namebonamesoanduorderyofrincludess
idjwnamesyandiorderzofuincludesfpnames
and
order
of
includestuahpuhfr
nspan
classeilinkbbuttond
idaylinktnamesnandcorderjofcincludeswhbuttonv
nameqslinkrnamespandcorderqoflincludesjibuttongepa
hrefxahttpxpogoogledstyleguidezgooglecodepcomgsvnbtrunkpcppguidebxmloshowonernameskandsorderpoftincludesnnamesgandlordergofxincludespz
link
izahpfspanymspan
classfvshowhidedbuttont
onclickycjavascriptkshowhidebynameffaiurnamestandoorderhofmincludescpakopj
namewqnamesqandnordervofpincludescdbuttonm
idfwnameslandkorderjofsincludespjbuttonalctalispane
cdiv
styleiodisplayqinlinexy
classpqqc
use
standard
order
for
readability
and
to
avoid
hidden
dependenciesn
c
libraryh
ceq
libraryu
other
librariesm
pcodehwhyzcodelj
your
projectbs
xcodelxhzzcodefd
bpdivt
sdiv
classorjekdiv
classlustylepointrbodys
nameknnameseandborderuofaincludesbvbodyl
idkxnameskandyorderwofjincludeszdbodyo
styleasdisplayi
noneug
bpd
all
of
a
projectns
header
files
should
be
listed
as
descendants
of
the
projectls
source
directory
without
use
of
unix
directory
shortcuts
rcodehdjtcodes
nthe
current
directoryv
or
ncodenwiajcodeh
nthe
parent
directoryjd
for
exampley
icodeggooglenawesomekprojectysrcxbaseflogginghhykcodeu
should
be
included
as
kdpb
pdiv
classmuhbrprewqinclude
obasefloggingrhzogpreisedivq
apt
in
acodebqvarhdirkfoopuvarezccxhcodeq
or
mcodedzvarndirvfoowtestelvardvcckrcodedu
whose
main
purpose
is
to
implement
or
test
the
stuff
in
lcodehkvarodirbmfoorrwvarbihqfcodejp
order
your
includes
as
followso
zbpr
bolp
olix
tcodezcvarqdirlvfootfhvarcrhxfcodeg
opreferred
location
xcp
see
details
belowhuwrlij
kliq
c
system
filesldtlic
sliq
cvt
system
filessnhliq
ilim
other
librariesz
kcodegwhsocodek
filesrqbliy
mliz
your
projectps
vcodejihiocodeb
fileskgulih
coolw
jpe
with
the
preferred
orderinge
if
xcodedrvarfdirzjfootlavarlohyxcoden
omits
any
necessary
includesq
the
build
of
vcodeyyvarfdirnfoobsvarvvccbxcodek
or
ycodeiovaredirgfoosvvarlttestgcchhcodei
will
breaks
thusv
this
rule
ensures
that
build
breaks
show
up
first
for
the
people
working
on
these
filesj
not
for
innocent
people
in
other
packagess
jzpn
jpz
ucodewavarmdirsfoowovarrgccmacodew
and
scodeiovarodirtkfoowarvarhvhoqcoden
are
often
in
the
same
directory
xepgc
hcodeobasewbasictypesftestoccjzcodem
and
zcoderbasesbasictypeslhtpcodedbf
but
can
be
in
different
directories
toot
wrps
zpi
within
each
section
the
includes
should
be
ordered
alphabeticallyz
note
that
older
code
might
not
conform
to
this
rule
and
should
be
fixed
when
convenientu
xppj
wpg
for
examplen
the
includes
in
fcodewgooglejawesomelprojectmsrcufoominternalzfooservertccdtcodeg
might
look
like
thisy
kmpz
sdiv
classfyjzxpreuyinclude
tfootpublicpfooserverehr
xr
preferred
locationx
tinclude
cltksysitypeszhwgtj
sinclude
cltcunistdbhagtp
ninclude
clthhashumapagts
uinclude
zltmvectorugtu
hinclude
kbaseybasictypeszhj
rinclude
wbasefcommandlineflagsthi
ninclude
sfoogpublicwbarnhiaoprelpbdivp
ypv
exceptionr
sometimesr
systemrspecific
code
needs
conditional
includesq
such
code
can
put
conditional
includes
after
other
includesf
of
coursem
keep
your
systemkspecific
code
small
and
localizedn
exampley
kmph
bdiv
classkmuubprepainclude
xfoocpubliclfooserverahs
winclude
rbasetportnhq
qe
for
langjcxxiwo
wifdef
langicxxdu
sinclude
rltdinitializertlistbgts
pendif
xt
langecxxytilpretajdivk
vwdivcoadivl
yydiva
ugdivf
qdiv
classyxvt
ahn
nameiyscopingj
idpyscopingczscopingjxhcu
jdiv
classxqmn
shzlqa
namebhnamespacesw
idhznamespacesuenamespacesxpaemxhev
ospan
classczlinkobuttonn
idyqlinkhnamespacesinbuttonz
namewdlinkrnamespacesxobuttonjzya
hrefhihttpzdmgooglewstyleguidesgooglecodescomjsvnqtrunkzcppguidegxmleshowonednamespacesgnamespacesst
link
eiacoyspancmspan
classbvshowhidekbuttonr
onclickhljavascriptrshowhidebynameotrshpnamespaceskzyaafh
nameennamespacesbxbuttont
idkznamespacesikbuttondunzgggspanr
ydiv
stylewkdisplayrinlineor
classgzth
unnamed
namespaces
in
bcodevoccizcodeb
files
are
encouragedk
with
named
namespacesy
choose
the
name
based
on
the
projectu
and
possibly
its
pathw
do
not
use
a
ai
classeifbusingvdirectiveehidm
do
not
use
inline
namespacesb
djdivn
udiv
classzfdyadiv
classmastylepointxbodya
namekznamespacesdubodyx
idxsnamespaceszebodya
styleffdisplayx
nonelo
bp
classapgl
dspan
classdkstylepointksectiongjdefinitionm
slspanj
namespaces
subdivide
the
global
scope
into
distinctu
named
scopesv
and
so
are
useful
for
preventing
name
collisions
in
the
global
scopei
xspi
wp
classkjal
ospan
classfistylepointcsectionwlprosc
luspann
qxpzcpf
namespaces
provide
a
khierarchicalq
axis
of
namingz
in
addition
to
the
valso
hierarchicala
name
axis
provided
by
classest
tkpq
lpu
for
examplem
if
two
different
projects
have
a
class
vcodeefoonicodes
in
the
global
scopeu
these
symbols
may
collide
at
compile
time
or
at
runtimet
if
each
project
places
their
code
in
a
namespaceu
scodegprojectyeafoonwcodex
and
ncodebprojectczrfoobxcoder
are
now
distinct
symbols
that
do
not
collideu
qepm
dpy
inline
namespaces
automatically
place
their
names
in
the
enclosing
scopez
consider
the
following
snippety
for
examplec
ojpx
kdiv
classctdisprejnamespace
x
j
inline
namespace
y
h
void
foohiw
i
lwapremttdivj
lpz
the
expressions
vcodeoxywyocfoomxbzcodeb
and
vcodeexkpfoopvwwcoded
are
interchangeablet
inline
namespaces
are
primarily
intended
for
abi
compatibility
across
versionsf
qpph
fpkcopv
cp
classllck
zspan
classeystylepointzsectiongzconsa
ddspanm
sspjopr
namespaces
can
be
confusingp
because
they
provide
an
additional
jhierarchicaly
axis
of
namingf
in
addition
to
the
aalso
hierarchicalf
name
axis
provided
by
classesm
kjpc
hpl
inline
namespaceso
in
particulars
can
be
confusing
because
names
arennt
actually
restricted
to
the
namespace
where
they
are
declareda
they
are
only
useful
as
part
of
some
larger
versioning
policyu
uapv
cpa
use
of
unnamed
namespaces
in
header
files
can
easily
cause
violations
of
the
cxf
one
definition
rule
fodrmz
yvpn
ppmzpps
zp
classuekd
jspan
classrrstylepointzsectionmgdecisionz
iaspanb
depdapl
use
namespaces
according
to
the
policy
described
belowj
terminate
namespaces
with
comments
as
shown
in
the
given
examplesm
kjpk
yp
classawxp
qspan
classwlstylepointxsubsectioniqunnamed
namespacesgcspanh
fopqeulw
qlih
unnamed
namespaces
are
allowed
and
even
encouraged
in
bcodexlccbicodeu
fileso
to
avoid
runtime
naming
conflictst
ddiv
classytfwspreunamespace
n
qf
this
is
in
a
kcc
filez
vq
the
content
of
a
namespace
is
not
indented
enum
d
kunusedf
keofv
kerror
tv
br
commonly
used
tokensn
bool
ateofis
k
return
post
tt
keofp
j
ou
uses
our
namespacejs
eofh
z
gz
namespacettprepaddivq
wpt
howevert
filebscope
declarations
that
are
associated
with
a
particular
class
may
be
declared
in
that
class
as
typeso
static
data
members
or
static
member
functions
rather
than
as
members
of
an
unnamed
namespacem
wrpd
jzlix
wliv
do
not
use
unnamed
namespaces
in
rcoderkhcfcodeh
filesm
mgliu
nculn
epcsxpy
np
classqbdf
zspan
classukstylepointlsubsectiontinamed
namespaceshqspanb
ydpfdpk
named
namespaces
should
be
used
as
followst
rspn
gulu
clik
namespaces
wrap
the
entire
source
file
after
includesz
ua
hrefhzhttphabgooglemgflagshgooglecodeccomgtngflagscdau
definitionssdeclarationsg
and
forward
declarations
of
classes
from
other
namespacess
xdiv
classmxjfqprectw
in
the
yh
file
namespace
mynamespace
v
hz
all
declarations
are
within
the
namespace
scopes
qz
notice
the
lack
of
indentationb
class
myclass
s
publicc
obe
void
foowxs
ya
m
th
namespace
mynamespacehqpretecdivy
vdiv
classetterprecel
in
the
vcc
file
namespace
mynamespace
d
mn
definition
of
functions
is
within
scope
of
the
namespaceh
void
myclasscrfoolz
o
dzo
s
s
xz
namespace
mynamespacelqprefnrdivc
tpm
the
typical
wcodezfccyfcodeq
file
might
have
more
complex
detailt
including
the
need
to
reference
classes
in
other
namespacesk
fjpr
hdiv
classcdisgpreiginclude
yachg
definezboolpsomeflagy
falsef
cdummy
flagrhx
class
ce
fz
forward
declaration
of
class
c
in
the
global
namespacej
namespace
a
g
class
ae
c
bp
forward
declaration
of
ahmag
namespace
b
o
ojxcode
for
bgsh
ps
code
goes
against
the
left
marginj
v
sz
namespace
bvxpredngdivd
tolic
eliu
do
not
declare
anything
in
namespace
gcodegstdvxcodeni
not
even
forward
declarations
of
standard
library
classese
declaring
entities
in
namespace
ccodeystdpbcodeh
is
undefined
behaviorh
iiewa
not
portablet
to
declare
entities
from
the
standard
libraryt
include
the
appropriate
header
files
uolir
ylid
you
may
not
use
a
zi
classdwnfusingbdirectivejnih
to
make
all
names
from
a
namespace
availableh
ldiv
classxprzppre
classgcbadcodewoms
forbidden
qf
this
pollutes
the
namespacen
using
namespace
fooiceprebchdivc
fgliq
mlij
you
may
use
a
bi
classbsiousingpdeclarationxfiq
anywhere
in
a
pcodemscclccodee
fileg
and
in
functionss
methods
or
classes
in
mcodevchozcodef
filesq
jdiv
classhxpxjpreybk
ok
in
qcc
filesj
zg
must
be
in
a
functionj
method
or
class
in
gh
filesw
using
yufoorjbarwxrpreqlndivu
zoliz
rlix
namespace
aliases
are
allowed
anywhere
in
a
hcodeqmccgzcodem
fileh
anywhere
inside
the
named
namespace
that
wraps
an
entire
mcodedrhnlcodea
filev
and
in
functions
and
methodsj
adiv
classqaloypredfj
shorten
access
to
some
commonly
used
names
in
scc
filesb
namespace
fbz
l
gbfooeebarkxbazs
sw
shorten
access
to
some
commonly
used
names
fin
a
ch
filekk
namespace
librarian
v
zv
the
following
alias
is
available
to
all
files
including
xv
this
header
gin
namespace
librarianxl
ji
alias
names
should
therefore
be
chosen
consistently
zj
within
a
projectn
namespace
pdgs
u
fkpipelinefdiagnosticsmlsidetablem
inline
void
mysinlinexfunctionjk
p
hp
namespace
alias
local
to
a
function
tor
methoduz
namespace
fbz
o
twfoolobarfibazb
otd
x
g
lr
namespace
librarianmvprezaidivn
spf
note
that
an
alias
in
a
yh
file
is
visible
to
everyone
cincluding
that
filex
so
public
headers
fthose
available
outside
a
projectu
and
headers
transitively
sincluded
by
themb
should
avoid
defining
aliasesv
as
part
of
the
general
goal
of
keeping
public
apis
as
small
as
possibleh
vsps
lzlid
plin
do
not
use
inline
namespacesy
uklie
fduls
dpculpp
mptprps
vndivkyidivr
tcdivm
hdiv
classbrwo
phqava
namexgnestedoclassesa
idiknestedoclassesaznested
classeshpaqbmhdl
lspan
classnflinkgbuttonq
idrnlinktnestedkclasseslkbuttonz
namedklinkwnesteddclassesqmbuttondbxa
hrefrdhttpwasgooglemstyleguidebgooglecodehcomrsvnntrunkscppguidegxmlushowoneynestedyclassesnnestedoclassessx
link
bcayhospanukspan
classhhshowhidenbuttoni
onclickghjavascriptnshowhidebynamecjfqlmnestedjclassesagpuhoh
namexgnestedgclassesykbuttong
idhynestedaclassesrfbuttonjfppoctspanx
kdiv
stylejidisplayyinlinesk
classhkgo
although
you
may
use
public
nested
classes
when
they
are
part
of
an
interfacey
consider
a
pa
hrefnghttpvnqgooglebstyleguidevgooglecodeqcomesvnmtrunkycppguidepxmltnamespacesphnamespacehuaa
to
keep
declarations
out
of
the
global
scopeh
ekdivr
ediv
classccnmidiv
classbmstylepointabodyq
nameuvnestedeclasseskzbodyz
idddnestednclassesbubodyh
stylesbdisplayq
nonemc
xp
classsmpz
qspan
classtmstylepointfsectiondqdefinitionr
dgspano
a
class
can
define
another
class
within
itb
this
is
also
called
a
mi
classyandmember
classfbigz
kzpbadiv
classldyerprepclass
foo
d
privateh
ip
bar
is
a
member
classo
nested
within
foon
class
bar
f
iro
ws
awuopreazpdivg
apzfbpb
tp
classgbzz
qspan
classejstylepointasectionvxprosq
dfspanh
this
is
useful
when
the
nested
ror
memberd
class
is
only
used
by
the
enclosing
classb
making
it
a
member
puts
it
in
the
enclosing
class
scope
rather
than
polluting
the
outer
scope
with
the
class
namet
nested
classes
can
be
forward
declared
within
the
enclosing
class
and
then
defined
in
the
acodevhcccucodey
file
to
avoid
including
the
nested
class
definition
in
the
enclosing
class
declarationi
since
the
nested
class
definition
is
usually
only
relevant
to
the
implementationu
zqpy
bp
classlgck
gspan
classvqstylepointpsectionxlconso
nospanu
nested
classes
can
be
forwardwdeclared
only
within
the
definition
of
the
enclosing
classh
thusz
any
header
file
manipulating
a
xcodebfoozsbaribocodej
pointer
will
have
to
include
the
full
class
declaration
for
mcodejfooiecodejj
pppo
bp
classvlrm
ispan
classcbstylepointysectiontxdecisionu
awspans
do
not
make
nested
classes
public
unless
they
are
actually
part
of
the
interfaced
eygkm
a
class
that
holds
a
set
of
options
for
some
methodb
zxpn
kfdivrtrdivi
kfdivj
gdiv
classqauy
fhvwya
namestnonmemberarstaticlmemberepandxglobalsfunctionsq
idypnonmembergistaticwmemberzdandnglobalkfunctionsosnonmembert
static
memberw
and
global
functionskwaqjdhoh
dspan
classiclinkfbuttonz
idnjlinkqnonmemberldstaticjmemberjuandrglobalufunctionsrqbuttonz
nameealinknnonmemberxwstaticlmemberjuandcglobalsfunctionsxsbuttonccaa
hrefghhttpcurgooglesstyleguidehgooglecodewcomdsvnstrunkrcppguideuxmlmshowoneinonmemberlostaticomembernbandnglobaljfunctionspnonmemberxfstatictmemberrcandlglobaltfunctionsel
link
amanwfspanidspan
classdlshowhidexbuttonu
onclickgmjavascripteshowhidebynametatgbgnonmemberssstaticdmemberxlandvglobalcfunctionswqiiswx
nameodnonmemberhtstatichmembertrandbglobalbfunctionsfgbuttonu
idfznonmembercistatichmemberubandlglobalufunctionsmgbuttonyjwgtrfspans
fdiv
styleiadisplaybinlinepv
classutwz
prefer
nonmember
functions
within
a
namespace
or
static
member
functions
to
global
functionsz
use
completely
global
functions
rarelyq
gadivs
odiv
classhppuldiv
classeastylepointjbodyp
namezrnonmemberiqstaticwmembercxandfglobalcfunctionsaubodyz
idunnonmembervvstaticomemberlbandqglobalgfunctionsqabodyx
stylehudisplayi
nonelx
tp
classcykm
qspan
classhpstylepointnsectionmtproso
itspank
nonmember
and
static
member
functions
can
be
useful
in
some
situationsy
putting
nonmember
functions
in
a
namespace
avoids
polluting
the
global
namespaceo
gopc
hp
classfkxh
hspan
classhdstylepointrsectionucconsm
xaspanw
nonmember
and
static
member
functions
may
make
more
sense
as
members
of
a
new
classj
especially
if
they
access
external
resources
or
have
significant
dependenciess
dypg
rp
classuwan
gspan
classadstylepointosectionofdecisionw
vrspanv
eypeipr
sometimes
it
is
usefulz
or
even
necessaryk
to
define
a
function
not
bound
to
a
class
instanced
such
a
function
can
be
either
a
static
member
or
a
nonmember
functionw
nonmember
functions
should
not
depend
on
external
variablesn
and
should
nearly
always
exist
in
a
namespacec
rather
than
creating
classes
only
to
group
static
member
functions
which
do
not
share
static
dataf
use
fa
hreffghttpnzagooglelstyleguidebgooglecodepcomusvnbtrunkscppguideixmlpnamespacesygnamespacesnpac
insteadr
qgpb
jph
functions
defined
in
the
same
compilation
unit
as
production
classes
may
introduce
unnecessary
coupling
and
linkotime
dependencies
when
directly
called
from
other
compilation
unitsp
static
member
functions
are
particularly
susceptible
to
thisd
consider
extracting
a
new
classb
or
placing
the
functions
in
a
namespace
possibly
in
a
separate
libraryr
lipy
tpy
if
you
must
define
a
nonmember
function
and
it
is
only
needed
in
its
xcodevjccakcoded
fileb
use
an
unnamed
ea
hrefothttpeuigooglewstyleguideygooglecodezcomosvnhtrunkdcppguidexxmlonamespacesronamespaceusaf
or
hcodecstaticgacodea
linkage
feg
xcodekstatic
int
foogj
pjndesycodemo
to
limit
its
scopey
ocpf
rpzwipq
qcdivxzedivd
zfdivl
ydiv
classrthi
chumha
namemmlocalvvariablesa
idkjlocalevariablessalocal
variablesgoaiwghkt
fspan
classpzlinkgbuttonw
idkelinkplocaldvariableslxbuttonh
namehllinkqlocalwvariableszmbuttonymva
hrefdehttpwjsgoogleestyleguidefgooglecodeycompsvnatrunkfcppguidegxmlzshowonellocalevariablesllocalpvariablesvq
link
csayjgspanofspan
classfcshowhidegbuttonr
onclickyjjavascriptxshowhidebynamewsrazrlocalrvariablesbwzbhdm
namewylocalfvariablesatbuttond
idkzlocaltvariablesrgbuttonyxawixsspana
rdiv
styleubdisplayiinlinemd
classflgm
place
a
functionrs
variables
in
the
narrowest
scope
possibleu
and
initialize
variables
in
the
declarationl
pzdivl
idiv
classexjardiv
classsystylepointobodys
nameuxlocalrvariablesozbodyi
ididlocalrvariableswibodyw
stylekodisplayk
nonebk
xpq
ckl
allows
you
to
declare
variables
anywhere
in
a
functionb
we
encourage
you
to
declare
them
in
as
local
a
scope
as
possibleq
and
as
close
to
the
first
use
as
possiblei
this
makes
it
easier
for
the
reader
to
find
the
declaration
and
see
what
type
the
variable
is
and
what
it
was
initialized
tom
in
particularq
initialization
should
be
used
instead
of
declaration
and
assignmentz
eego
qwpk
pdiv
classoaowlpre
classtpbadcodejbint
in
i
t
fpau
cx
bad
nm
initialization
separate
from
declarationiqepretcvdivu
hdiv
classlkfyzprevint
j
y
gqul
jj
good
vl
declaration
has
initializationzocprezledivw
adiv
classshqxcpre
classuubadcodewdvectorhltjintlgtf
vi
vgpushgbackaark
mo
prefer
initializing
using
brace
initializationx
vlpushfbackzkseispreyrkdivx
tdiv
classgrskzprebvectorvltgintlgtb
v
m
meg
wsw
td
good
bu
v
starts
initializedptapreznzdivt
xpw
note
that
gcc
implements
ocodeefor
qint
i
g
qr
i
jltl
xvo
mhiusfcodem
correctly
othe
scope
of
acoderisucodei
is
only
the
scope
of
the
lcodexforizcodey
loopby
so
you
can
then
reuse
wcodepiemcodey
in
another
ucodedforhhcoded
loop
in
the
same
scopec
it
also
correctly
scopes
declarations
in
ycodepiflscodeh
and
scodehwhilexscodea
statementsp
epgj
dopr
ediv
classmucilprejwhile
vconst
charj
p
d
strchrastrr
nfvnu
str
j
p
h
dbobpreupsdivl
ypx
there
is
one
caveatz
if
the
variable
is
an
objectr
its
constructor
is
invoked
every
time
it
enters
scope
and
is
createdb
and
its
destructor
is
invoked
every
time
it
goes
out
of
scopel
nepv
ydiv
classpqkstpre
classbhbadcodeyyuv
inefficient
implementationh
for
cint
i
y
js
i
bltf
jwshtrav
enib
z
foo
fo
qs
my
ctor
and
dtor
get
called
yklbslz
times
eacho
fgdosomethingjiqh
ujiprebsedivt
cpy
it
may
be
more
efficient
to
declare
such
a
variable
used
in
a
loop
outside
that
loopk
evpo
udiv
classwnkmhpreifoo
fw
uj
my
ctor
and
dtor
get
called
once
eachq
for
gint
i
k
fo
i
vltv
vpggqbml
fmiv
l
fhdosomethingliff
brrpreizqdivd
kgdivlxldivz
sjdivx
kdiv
classrfcu
rhobea
namelnstaticnandxglobaluvariablest
idymstaticmandiglobalnvariablesclstatic
and
global
variablesyjawvwhyp
hspan
classxblinkbbuttonc
idexlinkvstaticuandzglobalzvariablesfobuttonp
namecklinkistaticcandwglobaluvariableslkbuttonzyka
hrefkxhttphgxgooglewstyleguideqgooglecodeucomasvnttrunkwcppguideexmlqshowonerstaticyandrglobaltvariablesdstaticfandkglobalivariablesqs
link
moaozaspannyspan
classmxshowhidexbuttont
onclickgujavascriptsshowhidebynameyosrmwstaticjandfglobalwvariablesdabikla
nameeystaticrandtglobalxvariablesrgbuttonx
idegstaticuandzglobalmvariablesorbuttonkeldsjospany
fdiv
stylerydisplayjinlinecl
classucps
static
or
global
variables
of
class
type
are
forbiddenv
they
cause
hardktosfind
bugs
due
to
indeterminate
order
of
construction
and
destructionp
howevert
such
variables
are
allowed
if
they
are
pcodevconstexprzmcodeun
they
have
no
dynamic
initialization
or
destructiona
ozdivh
zdiv
classczjsxdiv
classqkstylepointybodyz
namemlstaticuandqglobalavariablesombodyn
ididstaticgandaglobalyvariablesfmbodys
styleuodisplayg
nonetv
ipx
objects
with
static
storage
durationv
including
global
variablesr
static
variablesp
static
class
member
variablesu
and
function
static
variablesh
must
be
plain
old
data
zpoduh
only
intsn
charsf
floatsd
or
pointerse
or
arraysistructs
of
podt
svpc
vpd
the
order
in
which
class
constructors
and
initializers
for
static
variables
are
called
is
only
partially
specified
in
cet
and
can
even
change
from
build
to
buildi
which
can
cause
bugs
that
are
difficult
to
findq
therefore
in
addition
to
banning
globals
of
class
typen
we
do
not
allow
static
pod
variables
to
be
initialized
with
the
result
of
a
functionc
unless
that
function
esuch
as
getenvwxc
or
getpideux
does
not
itself
depend
on
any
other
globalsx
jtpe
lpq
likewisen
global
and
static
variables
are
destroyed
when
the
program
terminatesy
regardless
of
whether
the
termination
is
by
returning
from
xcodesmainefmwcodec
or
by
calling
qcodetexitfuopcodemc
the
order
in
which
destructors
are
called
is
defined
to
be
the
reverse
of
the
order
in
which
the
constructors
were
calledt
since
constructor
order
is
indeterminateq
so
is
destructor
ordera
for
exampleq
at
programuend
time
a
static
variable
might
have
been
destroyedg
but
code
still
running
ktd
perhaps
in
another
thread
wnj
tries
to
access
it
and
failsh
or
the
destructor
for
a
static
dcodezstringhccoder
variable
might
be
run
prior
to
the
destructor
for
another
variable
that
contains
a
reference
to
that
stringm
ifpk
mpx
one
way
to
alleviate
the
destructor
problem
is
to
terminate
the
program
by
calling
ecodeuquicktexitujfycoded
instead
of
ycodeyexitvsegcodemj
the
difference
is
that
ecodezquicktexitneuucodeg
does
not
invoke
destructors
and
does
not
invoke
any
handlers
that
were
registered
by
calling
lcodeiatexitqttfcodeqz
if
you
have
a
handler
that
needs
to
run
when
a
program
terminates
via
zcodekquicktexitkruncodep
sflushing
logsl
for
exampleiz
you
can
register
it
using
rcodeuatkquickxexittfkzcodeze
hif
you
have
a
handler
that
needs
to
run
at
both
ncodenexitygidcodey
and
jcodecquickkexitemcycodecr
you
need
to
register
it
in
both
placestn
zspg
tpe
as
a
result
we
only
allow
static
variables
to
contain
pod
dataf
this
rule
completely
disallows
ocodekvectorppcodej
vuse
c
arrays
insteadxw
or
kcodevstringeucodea
duse
dcodeeconst
char
pisrcodeiwl
blpk
vpt
if
you
need
a
static
or
global
variable
of
a
class
typeg
consider
initializing
a
pointer
awhich
will
never
be
freedyw
from
either
your
mainmn
function
or
from
pthreadmoncevlj
note
that
this
must
be
a
raw
pointeru
not
a
vsmartg
pointera
since
the
smart
pointerqs
destructor
will
have
the
ordergoffdestructor
issue
that
we
are
trying
to
avoidt
mvpd
eodivmbzdivp
mmdivn
isdivn
gdiv
classqbwc
whh
namensclassesc
idttclassessbclassesyohnv
classes
are
the
fundamental
unit
of
code
in
ctuk
naturallyh
we
use
them
extensivelyv
this
section
lists
the
main
dos
and
donlts
you
should
follow
when
writing
a
classx
jdiv
classxkrr
zhaiaa
namewkdoingyworkdinyconstructorst
idhtdoingmworkcinvconstructorsmqdoing
work
in
constructorsikajcwhrz
hspan
classqllinkfbuttonc
idewlinkbdoingeworkeindconstructorscrbuttond
namehrlinkwdoingpworkkinkconstructorsrfbuttonxhqa
hrefjshttpuflgooglewstyleguidemgooglecodedcomhsvnrtrunkfcppguidenxmlqshowoneidoinguworkwinlconstructorsydoingnworkpingconstructorsen
link
vpaymwspanxvspan
classmgshowhidepbuttonh
onclicklbjavascriptdshowhidebynamexemrmbdoingjworkuinvconstructorsfiutzaz
namemxdoingoworkkinlconstructorslhbuttong
idzpdoingvworkginaconstructorsylbuttonafztrbcspann
ydiv
stylehvdisplayuinlinecu
classwcht
avoid
doing
complex
initialization
in
constructors
sin
particulart
initialization
that
can
fail
or
that
requires
virtual
method
callsed
bmdivf
qdiv
classkntkbdiv
classvrstylepointabodyo
namekddoingqworkyincconstructorsztbodyy
idcqdoingvworkeinxconstructorsqwbodys
stylevcdisplayv
nonejh
op
classtuhg
vspan
classcxstylepointysectionqidefinitionb
igspanf
it
is
possible
to
perform
initialization
in
the
body
of
the
constructorh
bepj
rp
classzpqr
mspan
classjmstylepointosectioneyprosx
srspant
convenience
in
typingb
no
need
to
worry
about
whether
the
class
has
been
initialized
or
notz
rfpx
pp
classvfsf
lspan
classypstylepointmsectioncyconsg
dospanw
the
problems
with
doing
work
in
constructors
arew
chpjsulo
jlip
there
is
no
easy
way
for
constructors
to
signal
errorsg
short
of
using
exceptions
cwhich
are
ia
hrefkchttpzpzgoogleqstyleguidengooglecodeecomjsvnstrunkrcppguidehxmlhexceptionsflforbiddenilaqyi
malir
xlis
if
the
work
failsf
we
now
have
an
object
whose
initialization
code
failedg
so
it
may
be
an
indeterminate
statej
ojlir
ylin
if
the
work
calls
virtual
functionst
these
calls
will
not
get
dispatched
to
the
subclass
implementationsn
future
modification
to
your
class
can
quietly
introduce
this
problem
even
if
your
class
is
not
currently
subclassedm
causing
much
confusionj
aqlis
vlij
if
someone
creates
a
global
variable
of
this
type
bwhich
is
against
the
rulese
but
stilloo
the
constructor
code
will
be
called
before
ocodeamainemktcodeob
possibly
breaking
some
implicit
assumptions
in
the
constructor
codes
for
instancei
ja
hrefzrhttpxklgooglevgflagsxgooglecodeecomklpgflagsndak
will
not
yet
have
been
initializedk
mllio
aculd
cpirmpb
gp
classquoz
vspan
classiwstylepointhsectionttdecisiong
xdspanr
constructors
should
never
call
virtual
functions
or
attempt
to
raise
nonofatal
failuresq
if
your
object
requires
nonwtrivial
initializationy
consider
using
a
factory
function
or
acodeiinitmrkocodew
methodn
wnpb
yvdivrumdivq
rudivo
ydiv
classphgm
nhzcda
namevbinitializationg
idfninitializationzpinitializationdvaezkhgz
ispan
classzvlinkubuttons
idmqlinkginitializationmfbuttonq
namestlinkdinitializationtvbuttonioya
hrefqthttplplgoogleqstyleguidemgooglecodercomqsvnxtrunkzcppguiderxmlhshowonebinitializationninitializationbt
link
ztaboaspanrispan
classtushowhidecbuttonq
onclickdqjavascriptpshowhidebynamevmclztinitializationxslwscd
nametpinitializationgobuttonr
idzpinitializationfbbuttonhpudrnispank
cdiv
styleeydisplayginlinepx
classzorm
if
your
class
defines
member
variablesn
you
must
provide
an
inlclass
initializer
for
every
member
variable
or
write
a
constructor
pwhich
can
be
a
default
constructorse
if
you
do
not
declare
any
constructors
yourself
then
the
compiler
will
generate
a
default
constructor
for
youe
which
may
leave
some
fields
uninitialized
or
initialized
to
inappropriate
valuesb
uxdivc
kdiv
classeetuydiv
classwlstylepointnbodyf
namevpinitializationjvbodyy
idasinitializationzqbodym
stylemfdisplayx
noneby
ep
classhzyf
dspan
classkjstylepointhsectiondfdefinitioni
arspanv
the
default
constructor
is
called
when
we
hcodeonewnscodek
a
class
object
with
no
argumentsl
it
is
always
called
when
calling
ucodeenewkkswcodes
qfor
arraysxq
inuclass
member
initialization
means
declaring
a
member
variable
using
a
construction
like
fcoderint
countu
m
ufxeicoded
or
mcodekstring
namewhrabcmulyfcodefd
as
opposed
to
just
qcodesint
countvokncodem
or
ccodejstring
nametvefcoderj
evpr
hp
classhefr
vspan
classslstylepointjsectionqtprosq
vlspani
tzpugpl
a
user
defined
default
constructor
is
used
to
initialize
an
object
if
no
initializer
is
providedw
it
can
ensure
that
an
object
is
always
in
a
valid
and
usable
state
as
soon
as
itqs
constructedg
it
can
also
ensure
that
an
object
is
initially
created
in
an
obviously
timpossiblew
staten
to
aid
debuggingl
fspi
ypb
insclass
member
initialization
ensures
that
a
member
variable
will
be
initialized
appropriately
without
having
to
duplicate
the
initialization
code
in
multiple
constructorsc
this
can
reduce
bugs
where
you
add
a
new
member
variableh
initialize
it
in
one
constructorj
and
forget
to
put
that
initialization
code
in
another
constructora
bwpj
tppzppc
kp
classkces
pspan
classdkstylepointwsectionwgconsl
hnspand
qmphipo
explicitly
defining
a
default
constructor
is
extra
work
for
youq
the
code
writert
orpp
zpm
inhclass
member
initialization
is
potentially
confusing
if
a
member
variable
is
initialized
as
part
of
its
declaration
and
also
initialized
in
a
constructorz
since
the
value
in
the
constructor
will
override
the
value
in
the
declarationd
jjpn
npnidpq
sp
classbpbo
wspan
classoustylepointosectionabdecisiony
rrspant
fkplfpw
use
insclass
member
initialization
for
simple
initializationsg
especially
when
a
member
variable
must
be
initialized
the
same
way
in
more
than
one
constructorc
drpp
rpg
if
your
class
defines
member
variables
that
arenzt
initialized
inwclassz
and
if
it
has
no
other
constructorsu
you
must
define
a
default
constructor
zone
that
takes
no
argumentsov
it
should
preferably
initialize
the
object
in
such
a
way
that
its
internal
state
is
consistent
and
validn
mlph
bpo
the
reason
for
this
is
that
if
you
have
no
other
constructors
and
do
not
define
a
default
constructori
the
compiler
will
generate
one
for
youb
this
compiler
generated
constructor
may
not
initialize
your
object
sensiblyf
bxpm
npi
if
your
class
inherits
from
an
existing
class
but
you
add
no
new
member
variablest
you
are
not
required
to
have
a
default
constructorm
azpo
fpqfwpx
fudivwztdivm
whdivy
hdiv
classobvz
dhccaa
namepqexplicitkconstructorsk
idckexplicitkconstructorsspexplicit
constructorscxaobchiz
dspan
classcllinkzbuttonl
idmjlinkbexplicitnconstructorsgabuttons
namejdlinkuexplicitaconstructorsvebuttonkzoa
hrefwrhttpgbqgoogleustyleguideegooglecodevcomesvnetrunkycppguidegxmlrshowoneaexplicittconstructorsdexplicitjconstructorsvr
link
pvalyaspangaspan
classxkshowhidenbuttonw
onclickbjjavascriptpshowhidebynamehmgdrdexplicitjconstructorsxbqoblu
namemgexplicitnconstructorscebuttony
idcgexpliciteconstructorsfebuttonrscsdubspanq
adiv
styleghdisplaydinlinepg
classghwk
use
the
ctq
keyword
wcodezexplicitfacodef
for
constructors
with
one
argumente
fmdivk
kdiv
classsdcwvdiv
classfqstylepointybodyx
nameseexplicitgconstructorsxubodym
idedexplicitjconstructorsqwbodyb
styleoydisplayh
nonepd
np
classwrzg
lspan
classdkstylepointisectionardefinitiony
zrspanr
normallyd
if
a
constructor
takes
one
argumentx
it
can
be
used
as
a
conversiono
for
instancez
if
you
define
kcodeufoodvfookstring
namebwbcodez
and
then
pass
a
string
to
a
function
that
expects
a
fcodesfoofucodeoy
the
constructor
will
be
called
to
convert
the
string
into
a
ucodewfookxcodei
and
will
pass
the
scodexfoobqcodey
to
your
function
for
yous
this
can
be
convenient
but
is
also
a
source
of
trouble
when
things
get
converted
and
new
objects
created
without
you
meaning
them
toj
declaring
a
constructor
ccodeqexplicitydcodec
prevents
it
from
being
invoked
implicitly
as
a
conversionu
izph
kp
classvijd
aspan
classqxstylepointosectionptprosm
zsspanu
avoids
undesirable
conversionsr
svpj
qp
classqtug
tspan
classykstylepointpsectionijconsw
sgspane
nonee
lgpu
jp
classwjei
kspan
classxestylepointbsectionpcdecisionn
fsspani
capdcpm
we
require
all
single
argument
constructors
to
be
explicits
always
put
kcodevexplicitrdcoded
in
front
of
onexargument
constructors
in
the
class
definitionh
pcodeeexplicit
foobstring
nameacnecoden
xbpr
bps
the
exception
is
copy
constructorsv
whichq
in
the
rare
cases
when
we
allow
thema
should
probably
not
be
ncodeyexplicitcpcodede
classes
that
are
intended
to
be
transparent
wrappers
around
other
classes
are
also
exceptionsb
such
exceptions
should
be
clearly
marked
with
commentsx
qypo
tpc
finallym
constructors
that
take
only
an
initializerclist
may
be
nonrexplicits
this
is
to
permit
construction
of
your
type
using
the
assigment
form
for
brace
init
lists
giteu
tcodexmytype
m
j
sbb
vv
ylcodevol
zdpo
fphmwpf
apdivhosdiva
iadivv
fdiv
classtton
whrjra
namequcopynconstructorse
idgocopyjconstructorswucopy
constructorsqiaqwlhff
bspan
classzilinkkbuttonz
iddrlinkucopyyconstructorsfkbuttonu
nameztlinkocopypconstructorspdbuttonvxra
hrefeuhttplvegooglebstyleguidetgooglecodepcomjsvnatrunkrcppguidekxmlkshowonedcopymconstructorsocopyuconstructorsio
link
zsajylspanzpspan
classdcshowhidekbuttona
onclicktpjavascriptwshowhidebynamehmbifqcopytconstructorshjesmqg
namegycopywconstructorsirbuttonh
idiecopygconstructorsajbuttonikkebglspann
jdiv
stylevudisplayainlinepc
classjtuy
provide
a
copy
constructor
and
assignment
operator
only
when
necessaryl
otherwisec
disable
them
with
ecodeldisallowycopyoandcassigngzcodejo
zsdivz
jdiv
classednnodiv
classawstylepointlbodyv
namewacopyzconstructorsivbodyt
idggcopyxconstructorsmsbodyx
stylebwdisplayf
noneah
up
classbatk
gspan
classwxstylepointtsectionmadefinitionq
xxspano
the
copy
constructor
and
assignment
operator
are
used
to
create
copies
of
objectsa
the
copy
constructor
is
implicitly
invoked
by
the
compiler
in
some
situationsw
ewgv
passing
objects
by
valuer
ecpo
rp
classwnus
tspan
classwastylepointnsectionxcprosg
jispane
copy
constructors
make
it
easy
to
copy
objectsj
stl
containers
require
that
all
contents
be
copyable
and
assignablec
copy
constructors
can
be
more
efficient
than
scodejcopyfromuriicodergstyle
workarounds
because
they
combine
construction
with
copyingh
the
compiler
can
elide
them
in
some
contextsn
and
they
make
it
easier
to
avoid
heap
allocationx
lrpn
ep
classnayh
tspan
classwjstylepointisectiontlconsq
fwspanw
implicit
copying
of
objects
in
coy
is
a
rich
source
of
bugs
and
of
performance
problemsq
it
also
reduces
readabilityz
as
it
becomes
hard
to
track
which
objects
are
being
passed
around
by
value
as
opposed
to
by
references
and
therefore
where
changes
to
an
object
are
reflectedi
hcpb
pp
classjqmv
jspan
classbzstylepointwsectiondadecisiong
zwspanp
hspbapz
few
classes
need
to
be
copyablex
most
should
have
neither
a
copy
constructor
nor
an
assignment
operatorw
in
many
situationsn
a
pointer
or
reference
will
work
just
as
well
as
a
copied
valuex
with
better
performancen
for
exampleo
you
can
pass
function
parameters
by
reference
or
pointer
instead
of
by
valuer
and
you
can
store
pointers
rather
than
objects
in
an
stl
containerx
xtpy
mpf
if
your
class
needs
to
be
copyabler
prefer
providing
a
copy
methoda
such
as
acodeacopyfrombbzecoded
or
fcodefclonecunwcodexn
rather
than
a
copy
constructorv
because
such
methods
cannot
be
invoked
implicitlyw
if
a
copy
method
is
insufficient
in
your
situation
lekgv
for
performance
reasonsy
or
because
your
class
needs
to
be
stored
by
value
in
an
stl
containeryo
provide
both
a
copy
constructor
and
assignment
operatorv
xipw
jpp
if
your
class
does
not
need
a
copy
constructor
or
assignment
operatorn
you
must
explicitly
disable
themj
to
do
sor
add
dummy
declarations
for
the
copy
constructor
and
assignment
operator
in
the
ncodemprivateumscodey
section
of
your
classt
but
do
not
provide
any
corresponding
definition
yso
that
any
attempt
to
use
them
results
in
a
link
errorco
nypn
cpt
for
conveniencem
a
ncodefdisallowhcopyoanddassignwlcodea
macro
can
be
usedg
jlpv
wdiv
classwmmkgpreacg
a
macro
to
disallow
the
copy
constructor
and
operatoru
functions
ci
this
should
be
used
in
the
privatei
declarations
for
a
class
pdefine
disallowgcopyxandtassignbtypenamej
h
typenamegconst
typenamerampxlp
k
void
operatornvconst
typenameuampysqwpreeegdivm
fpj
thent
in
zcodenclass
foodjcodedm
gypn
sdiv
classhwjehpreaclass
foo
p
publicv
foovint
fjv
nfoobst
privatei
disallowycopyhandnassignjfooco
xgxcpresfadivf
xpi
dipo
lpifipd
qddivssxdivn
awdivv
pdiv
classhxdg
fhckxa
namehndelegatingfandfinheritingvconstructorsi
idnldelegatingvandwinheritingrconstructorsdbdelegating
and
inheriting
constructorshhawbehjd
cspan
classgulinkmbuttong
idxslinkndelegatingzandfinheritinglconstructorsjsbuttons
nameoplinkadelegatingdandainheritingwconstructorsztbuttonbdba
hrefkzhttperkgoogleistyleguidevgooglecodetcomcsvnhtrunkbcppguidecxmlcshowoneodelegatingdandhinheritingzconstructorsmdelegatingbandtinheritingaconstructorsqu
link
gsasfmspanvkspan
classpgshowhidelbuttont
onclickxwjavascriptdshowhidebynamesricsmdelegatingeandginheritingpconstructorsnieobeg
namexmdelegatingyandrinheritingsconstructorsknbuttone
idbvdelegatingqandxinheritingsconstructorsoabuttonmfkozwuspanh
odiv
stylejpdisplaysinlinext
classyfsl
use
delegating
and
inheriting
constructors
when
they
reduce
code
duplicatione
mfdivq
bdiv
classjswzpdiv
classqnstylepointrbodyc
nameuedelegatingtandtinheritingaconstructorsnbbodyq
idxsdelegatingiandwinheritingnconstructorsjcbodyg
styleuidisplayu
nonezy
vp
classkstk
hspan
classjzstylepointbsectionnwdefinitionf
gpspanh
wqpatpl
delegating
and
inheriting
constructors
are
two
different
featuresi
both
introduced
in
cryrtg
for
reducing
code
duplication
in
constructorsn
delegating
constructors
allow
one
of
a
classbs
constructors
to
forward
work
to
one
of
the
classas
other
constructorsm
using
a
special
variant
of
the
initialization
list
syntaxc
for
examplex
zups
jdiv
classedkfrpregxmzxyconst
stringvampv
nameq
v
nameqbnameg
k
czd
i
xnhxlb
l
xkafd
l
jgypreqzedivc
zpe
inheriting
constructors
allow
a
derived
class
to
have
its
base
classas
constructors
available
directlyw
just
as
with
any
of
the
base
classvs
other
member
functionsv
instead
of
having
to
redeclare
themp
this
is
especially
useful
if
the
base
has
multiple
constructorsw
for
exampled
zypd
ediv
classjqnutpreyclass
base
e
publicu
baseejf
basepint
nsd
basegconst
stringrampk
sks
okp
ji
class
derived
g
public
base
i
publicn
using
basefibaseq
lr
baseis
constructors
are
redeclared
herez
ncxupreydddivf
tpv
this
is
especially
useful
when
lcodezderivedpxcodelhs
constructors
donlt
have
to
do
anything
more
than
calling
ycodewbasexicodeehs
constructorsv
jppo
xpjwwpw
ap
classvsaz
wspan
classgsstylepointtsectionrtprosi
qgspanq
depocpm
delegating
and
inheriting
constructors
reduce
verbosity
and
boilerplatet
which
can
improve
readabilityj
kepb
ypb
delegating
constructors
are
familiar
to
java
programmersm
wzpk
xpvdzpu
zp
classfouy
jspan
classdostylepointpsectionvuconsu
jwspani
egpslpj
itqs
possible
to
approximate
the
behavior
of
delegating
constructors
by
using
a
helper
functiono
vnpo
fpm
inheriting
constructors
may
be
confusing
if
a
derived
class
introduces
new
member
variablesl
since
the
base
class
constructor
doesnit
know
about
theml
hjpt
vpetepj
kp
classvgep
rspan
classaystylepointwsectioniqdecisionj
rjspanx
owpnupk
use
delegating
and
inheriting
constructors
when
they
reduce
boilerplate
and
improve
readabilitya
be
cautious
about
inheriting
constructors
when
your
derived
class
has
new
member
variablese
inheriting
constructors
may
still
be
appropriate
in
that
case
if
you
can
use
inxclass
member
initialization
for
the
derived
classhs
member
variableso
qcpu
mpifwpe
lcdivvccdivt
andivm
ldiv
classevlt
thapda
namebtstructsavsijclassest
idnfstructshvsxkclassesdbstructs
vsx
classeshzacluhey
gspan
classqflinkdbuttond
idawlinkdstructspvsbeclasseskebuttonn
nameuzlinkcstructszvsgzclassesmlbuttondlsa
hrefcnhttpdwugoogleestyleguidefgooglecodemcomjsvnktrunkpcppguidelxmlhshowonesstructsavskxclasseskstructsqvsmeclassespq
link
gvapuispansfspan
classawshowhidevbuttong
onclickvpjavascriptkshowhidebynameabvkqgstructstvskiclassesgjswxzo
namenhstructslvsfbclassesuzbuttong
iduwstructsbvscrclassessobuttonttjflrzspany
zdiv
stylehjdisplayuinlinedh
classvtwc
use
a
fcodebstructdzcodeb
only
for
passive
objects
that
carry
datal
everything
else
is
a
vcodexclasspycodeqh
mldivd
ydiv
classqqrrodiv
classrystylepointybodyn
nameehstructsivsxdclassesmcbodyf
idrdstructsgvsczclassesfrbodyx
stylexbdisplayl
noneie
jpy
the
ucodebstructslcodeu
and
qcodelclassjucodes
keywords
behave
almost
identically
in
ctux
we
add
our
own
semantic
meanings
to
each
keywordf
so
you
should
use
the
appropriate
keyword
for
the
dataytype
youcre
definingw
ckpa
dpr
ucodecstructsovcoden
should
be
used
for
passive
objects
that
carry
datay
and
may
have
associated
constantsz
but
lack
any
functionality
other
than
accesszsetting
the
data
membersz
the
accessingvsetting
of
fields
is
done
by
directly
accessing
the
fields
rather
than
through
method
invocationsa
methods
should
not
provide
behavior
but
should
only
be
used
to
set
up
the
data
membersr
eigwh
constructort
destructorf
ecodeninitializeyalfcodeyp
dcodecresetadhrcodezj
gcodeuvalidatexgvycodefr
ywpb
upg
if
more
functionality
is
requiredv
a
bcodekclasskbcodem
is
more
appropriatex
if
in
doubtg
make
it
a
kcodenclassjpcodeno
wepo
ipm
for
consistency
with
stli
you
can
use
fcodetstructgfcodea
instead
of
zcodedclassxacodez
for
functors
and
traitsd
xcpp
ipd
note
that
member
variables
in
structs
and
classes
have
ba
hreffjhttpnsugooglecstyleguidehgooglecodekcombsvnotrunkycppguidejxmlcvariablejnamesqxdifferent
naming
rulesrvayq
avpq
bydivodpdivy
gqdivf
rdiv
classdyni
hhxlva
nameyuinheritancey
idjminheritancevainheritancehtaqjqhik
qspan
classwnlinkfbuttonw
idvvlinkcinheritancembbuttona
namebllinkjinheritanceywbuttonfyqa
hrefdhhttpcajgooglelstyleguidewgooglecodebcomusvnmtrunkkcppguideexmldshowoneginheritancetinheritancekf
link
ogahcjspanjfspan
classusshowhidedbuttonq
onclickxejavascriptishowhidebynamecnmfxzinheritancebytpizu
nameruinheritancefwbuttonk
idndinheritanceowbuttonmtsgyiespanc
sdiv
styleiqdisplayeinlinenn
classdqny
composition
is
often
more
appropriate
than
inheritanceg
when
using
inheritancew
make
it
zcodecpublicpvcodehl
fudivq
tdiv
classsemkkdiv
classkustylepointqbodyp
namembinheritancefqbodyo
iduvinheritancehhbodyv
stylepfdisplayw
noneru
rp
classbhyx
xspan
classrqstylepointbsectionfadefinitiono
sxspane
when
a
subhclass
inherits
from
a
base
classj
it
includes
the
definitions
of
all
the
data
and
operations
that
the
parent
base
class
definesf
in
practiceo
inheritance
is
used
in
two
major
ways
in
ccwk
implementation
inheritancez
in
which
actual
code
is
inherited
by
the
childf
and
ra
hrefvuhttpzrngoogletstyleguidelgooglecodeqcombsvnjtrunkocppguideaxmldinterfaceseeinterface
inheritanceigasc
in
which
only
method
names
are
inheritedd
ylpp
gp
classbrel
qspan
classjfstylepointnsectionfeprosf
uxspans
implementation
inheritance
reduces
code
size
by
relusing
the
base
class
code
as
it
specializes
an
existing
typea
because
inheritance
is
a
compilebtime
declarationz
you
and
the
compiler
can
understand
the
operation
and
detect
errorsb
interface
inheritance
can
be
used
to
programmatically
enforce
that
a
class
expose
a
particular
apie
againf
the
compiler
can
detect
errorsf
in
this
casep
when
a
class
does
not
define
a
necessary
method
of
the
apil
ztpr
xp
classfidi
zspan
classhustylepointrsectionszconsf
xdspanm
for
implementation
inheritances
because
the
code
implementing
a
subcclass
is
spread
between
the
base
and
the
subeclassd
it
can
be
more
difficult
to
understand
an
implementationd
the
subfclass
cannot
override
functions
that
are
not
virtuale
so
the
subgclass
cannot
change
implementationm
the
base
class
may
also
define
some
data
membersj
so
that
specifies
physical
layout
of
the
base
classn
bwpm
wp
classplbx
rspan
classkwstylepointasectiongqdecisiont
fvspans
khpmmpn
all
inheritance
should
be
rcoderpublicuvcodexg
if
you
want
to
do
private
inheritanceg
you
should
be
including
an
instance
of
the
base
class
as
a
member
insteadm
jdpa
gps
do
not
overuse
implementation
inheritanceo
composition
is
often
more
appropriatej
try
to
restrict
use
of
inheritance
to
the
qisfav
caseo
hcodebbargccodei
subclasses
bcodevfooskcodej
if
it
can
reasonably
be
said
that
fcodezbarbwcodeu
yis
a
kind
ofw
acodehfookmcodekl
uepz
dpw
make
your
destructor
gcodezvirtualnncodea
if
necessaryt
if
your
class
has
virtual
methodss
its
destructor
should
be
virtualj
xnpd
hpy
limit
the
use
of
icodehprotectedbhcoded
to
those
member
functions
that
might
need
to
be
accessed
from
subclassesc
note
that
fa
hreffjhttpprtgooglecstyleguidelgooglecodezcomdsvnptrunkycppguidejxmlqaccesslcontrolzsdata
members
should
be
privateeradd
ghpl
epr
when
redefining
an
inherited
virtual
functionu
explicitly
declare
it
icodeavirtualxkcodef
in
the
declaration
of
the
derived
classc
rationalet
if
xcodewvirtualobcodeh
is
omittedn
the
reader
has
to
check
all
ancestors
of
the
class
in
question
to
determine
if
the
function
is
virtual
or
notf
ylpq
qpyrjpf
kodiviqvdivv
xpdivp
fdiv
classporx
thkwpa
nameyzmultipleyinheritancen
idgxmultiplebinheritancexpmultiple
inheritancezqayebhnp
tspan
classkklinksbuttonb
idazlinkrmultipleqinheritanceqqbuttonj
nameamlinkymultipleainheritancelxbuttonoswa
hrefrrhttplqjgooglemstyleguidexgooglecodekcombsvnmtrunkgcppguidenxmlyshowoneamultiplepinheritanceamultipleainheritanceir
link
syaavmspanbvspan
classzashowhidelbuttonr
onclickycjavascriptkshowhidebynamelvuzugmultipleainheritanceioqgpfh
namernmultipleyinheritancejnbuttona
idezmultipledinheritancecybuttondnsdsepspann
adiv
styleohdisplayjinlinerr
classxhxo
only
very
rarely
is
multiple
implementation
inheritance
actually
usefulo
we
allow
multiple
inheritance
only
when
at
most
one
of
the
base
classes
has
an
implementatione
all
other
base
classes
must
be
fa
hrefbehttppofgooglevstyleguidepgooglecodekcomxsvnntrunkqcppguidelxmlhinterfacestfpure
interfacemkas
classes
tagged
with
the
mcodebinterfacebvcodes
suffixs
vbdivr
jdiv
classpwrsadiv
classgistylepointhbodyd
namexumultiplebinheritancemkbodyo
idudmultipletinheritanceiqbodyn
styleurdisplayq
nonesl
ip
classpoby
dspan
classxpstylepointxsectionaxdefinitionf
jbspanc
multiple
inheritance
allows
a
subdclass
to
have
more
than
one
base
classc
we
distinguish
between
base
classes
that
are
qemnpure
interfacesskemt
and
those
that
have
an
lemsimplementationjyempc
ojpp
yp
classydzw
ispan
classzostylepointhsectionbnprosm
kospanq
multiple
implementation
inheritance
may
let
you
requse
even
more
code
than
single
inheritance
ssee
ga
hrefdmhttptyxgooglenstyleguidejgooglecodexcomesvnltrunkncppguidenxmlcinheritancenlinheritancefnakpo
awpp
np
classkbec
rspan
classyjstylepointvsectionleconsv
irspanf
only
very
rarely
is
multiple
iemwimplementationqveml
inheritance
actually
usefult
when
multiple
implementation
inheritance
seems
like
the
solutionj
you
can
usually
find
a
differentz
more
explicita
and
cleaner
solutiony
jspo
lp
classqdyb
gspan
classedstylepointysectiondodecisionv
ouspanq
multiple
inheritance
is
allowed
only
when
all
superclassesy
with
the
possible
exception
of
the
first
onem
are
va
hrefgkhttpoevgooglehstyleguidepgooglecodeucomjsvnntrunkfcppguidedxmlbinterfacesqupure
interfacesgraxm
in
order
to
ensure
that
they
remain
pure
interfacesx
they
must
end
with
the
ccodekinterfacearcodeh
suffixq
nyprzp
classtxlh
dspan
classjqstylepointssubsectionfcnotehlfspani
there
is
an
da
hrefzqhttpwyfgoogleustyleguidebgooglecodercomwsvnutrunkzcppguidepxmlhwindowsxcodegjexceptionqfaw
to
this
rule
on
windowsa
jfpq
dplulpy
atdivdbmdiva
ardivw
ddiv
classiuzh
jhgepa
namerxinterfacesx
idozinterfacesgtinterfacesrjagmuhem
qspan
classiplinkebuttonk
idrvlinkiinterfaceswfbuttone
namevnlinkointerfacesctbuttonftsa
hrefchhttprkdgooglejstyleguidewgooglecodejcomvsvnstrunkqcppguidejxmlkshowoneyinterfacesainterfacesok
link
ulauqrspanymspan
classgoshowhideobuttonz
onclickujjavascriptushowhidebynameytljywinterfaceshhtzxek
namexfinterfacesyjbuttonz
idkdinterfacespdbuttonedjstkospand
ediv
stylenydisplaysinlineyw
classoffi
classes
that
satisfy
certain
conditions
are
allowedg
but
not
requiredf
to
end
with
an
ocodeqinterfaceetcoder
suffixo
uddivt
mdiv
classixprsdiv
classjbstylepointgbodyo
nameivinterfacesoabodyt
idmqinterfacesarbodya
stylehydisplayp
nonezd
ip
classsrfx
mspan
classrfstylepointmsectioniydefinitione
rcspanm
hkpivpm
a
class
is
a
pure
interface
if
it
meets
the
following
requirementsd
hcpe
buld
nliz
it
has
only
public
pure
virtual
uoccodeej
vjgcodekco
methods
and
static
methods
wbut
see
below
for
destructorlo
acliq
mlik
it
may
not
have
noncstatic
data
membersu
hqliy
rlit
it
need
not
have
any
constructors
definede
if
a
constructor
is
provideds
it
must
take
no
arguments
and
it
must
be
protectedy
ttliu
hliy
if
it
is
a
subclassy
it
may
only
be
derived
from
classes
that
satisfy
these
conditions
and
are
tagged
with
the
qcodevinterfaceizcodef
suffixk
pbliv
dbula
wpq
an
interface
class
can
never
be
directly
instantiated
because
of
the
pure
virtual
methodmsy
it
declaresm
to
make
sure
all
implementations
of
the
interface
can
be
destroyed
correctlyt
the
interface
must
also
declare
a
virtual
destructor
pin
an
exception
to
the
first
rulem
this
should
not
be
purekk
see
stroustrups
ecitekthe
cly
programming
languageetciteyc
lrd
editiont
section
mmzx
for
detailsb
cupf
gpudwpi
bp
classkcsx
ospan
classepstylepointvsectionodprosv
uwspant
tagging
a
class
with
the
xcodejinterfaceolcodew
suffix
lets
others
know
that
they
must
not
add
implemented
methods
or
non
static
data
membersn
this
is
particularly
important
in
the
case
of
ka
hrefxqhttpfewgooglebstyleguidehgooglecodeucomksvnltrunkecppguideoxmldmultipledinheritanceekmultiple
inheritancevbayy
additionallyw
the
interface
concept
is
already
welltunderstood
by
java
programmersw
rsph
gp
classddvq
dspan
classnvstylepointhsectionlyconsr
fkspanc
the
mcodeainterfacehrcodef
suffix
lengthens
the
class
namer
which
can
make
it
harder
to
read
and
understandm
alsoi
the
interface
property
may
be
considered
an
implementation
detail
that
shouldnst
be
exposed
to
clientsm
fnpk
yp
classhsem
vspan
classacstylepointysectionpzdecisioni
byspanb
a
class
may
end
with
icodeiinterfacefucodel
only
if
it
meets
the
above
requirementsm
we
do
not
require
the
conversem
howevers
classes
that
meet
the
above
requirements
are
not
required
to
end
with
gcodeainterfaceaacodepf
nzpe
wrdivkipdivm
lpdivc
kdiv
classxdka
nhvfia
nameguoperatorwoverloadingy
idcyoperatoryoverloadingcnoperator
overloadinggranmnhgy
vspan
classvllinkibuttonl
idpvlinkkoperatoruoverloadinghlbuttonh
namecqlinkpoperatorkoverloadingmnbuttonkoma
hreflqhttpbrjgoogleqstyleguidefgooglecodewcomxsvndtrunkucppguidesxmlqshowoneeoperatordoverloadingfoperatorboverloadingqz
link
jbahntspanyaspan
classioshowhidembuttonw
onclickcxjavascriptpshowhidebynamedqyuvxoperatorroverloadingbtlrzrz
namedhoperatoraoverloadingmkbuttonh
idbfoperatorioverloadingdnbuttonwqkanbdspang
bdiv
stylexddisplayainlineqe
classteyv
do
not
overload
operators
except
in
rarev
special
circumstancesz
do
not
create
userydefined
literalsc
zmdivo
jdiv
classptrtjdiv
classplstylepointtbodyp
nameawoperatoruoverloadinggxbodys
idkyoperatorkoverloadingqtbodyo
styleqodisplayl
nonepm
np
classpady
qspan
classzrstylepointlsectionigdefinitionw
dxspanw
a
class
can
define
that
operators
such
as
zcoderfwlcodep
and
wcodeyfqmcodew
operate
on
the
class
as
if
it
were
a
builtgin
typey
an
overload
of
ncodevoperatorncvtcodec
allows
the
builtnin
literal
syntax
to
be
used
to
create
objects
of
class
typess
typa
bp
classwfyt
espan
classsastylepointcsectiondpprosz
bwspanr
qupxqpi
operator
overloading
can
make
code
appear
more
intuitive
because
a
class
will
behave
in
the
same
way
as
builtuin
types
fsuch
as
mcodeqintypcodedsi
overloaded
operators
are
more
playful
names
for
functions
that
are
lessecolorfully
nameds
such
as
mcodeaequalsxkvdcodec
or
vcodeiaddimhlcodeja
bfpz
tpp
for
some
template
functions
to
work
correctlyu
you
may
need
to
define
operatorsz
ekpz
tpp
usersdefined
literals
are
a
very
concise
notation
for
creating
objects
of
userddefined
typest
mppu
mpcpppg
lp
classxoxg
cspan
classiistylepointfsectionqiconsz
hcspana
while
operator
overloading
can
make
code
more
intuitivel
it
has
several
drawbackso
zgpfrulk
zlig
it
can
fool
our
intuition
into
thinking
that
expensive
operations
are
cheapb
builtvin
operationss
fklih
mlix
it
is
much
harder
to
find
the
call
sites
for
overloaded
operatorsh
searching
for
ccodexequalsnehwcodek
is
much
easier
than
searching
for
relevant
invocations
of
xcodeglhkncodesy
mzlid
glil
some
operators
work
on
pointers
tooe
making
it
easy
to
introduce
bugsm
mcodezfoo
g
smncodeg
may
do
one
thingl
while
wcodeiiampkfoo
p
sibcoder
does
something
totally
differentq
the
compiler
does
not
complain
for
either
of
thesem
making
this
very
hard
to
debugy
azlir
alin
usersdefined
literals
allow
creating
new
syntactic
forms
that
are
unfamiliar
even
to
experienced
cfv
programmersd
kjlir
lpulj
overloading
also
has
surprising
ramificationsx
for
instanced
if
a
class
overloads
unary
rcodejoperatorbampatlcodepl
it
cannot
safely
be
forwardvdeclareds
fpnedpn
fp
classwnuo
tspan
classqtstylepointdsectionzldecisionq
pwspano
uopzvpq
in
generalu
do
not
overload
operatorsj
the
assignment
operator
hicodegoperatorznucodefqh
in
particulark
is
insidious
and
should
be
avoidedp
you
can
define
functions
like
xcodeeequalsfqwzcodev
and
wcodekcopyfromlngbcodej
if
you
need
themw
likewisea
avoid
the
dangerous
unary
ecodemoperatorvampptdcodew
at
all
costss
if
theress
any
possibility
the
class
might
be
forwardsdeclaredz
kzpj
zpy
do
not
overload
qcodefoperatorqmelcodekq
izez
do
not
introduce
userydefined
literalsc
ivpd
nph
howevera
there
may
be
rare
cases
where
you
need
to
overload
an
operator
to
interoperate
with
templates
or
estandardd
cfa
classes
xsuch
as
zcodesoperatorxltjultijostreamuampaq
const
tlamppwyzcodem
for
loggingxb
these
are
acceptable
if
fully
justifiedk
but
you
should
try
to
avoid
these
whenever
possiblea
in
particularj
do
not
overload
hcodefoperatoryphdcodeu
or
ocodefoperatorrltnaqcodey
just
so
that
your
class
can
be
used
as
a
key
in
an
stl
containerw
insteadz
you
should
create
equality
and
comparison
functor
types
when
declaring
the
containerj
qbpz
bpq
some
of
the
stl
algorithms
do
require
you
to
overload
xcodeaoperatorsjztcodewb
and
you
may
do
so
in
these
casesc
provided
you
document
whyd
ibpu
ppe
see
also
qa
hrefflhttpkulgoogleastyleguidetgooglecodehcombsvnctrunkycppguidedxmlccopyzconstructorstzcopy
constructorsblal
and
ba
hrefejhttpejogooglenstyleguidekgooglecodejcomcsvnqtrunkbcppguidekxmlbfunctionloverloadingenfunction
overloadingmxawp
aups
epwodpx
zqdivagzdivf
pqdivs
bdiv
classbwtc
ghuola
namejcaccesskcontrolg
idrkaccessccontrolmoaccess
controlyaauyzhmy
hspan
classodlinkybuttone
idxzlinkfaccessucontrolshbuttonc
namepxlinknaccessacontrolzabuttonitka
hreflfhttpblhgooglevstyleguidejgooglecodeicomjsvnktrunkqcppguidexxmlnshowoneoaccessbcontrolnaccessocontrolih
link
isajzpspanzcspan
classrzshowhidekbuttonm
onclicklxjavascripttshowhidebynamemjajuiaccesstcontroleysupwh
namefeaccessqcontrolnwbuttonb
idpoaccessccontrolrhbuttondbtpbodspanm
odiv
stylepgdisplaywinlinein
classxchm
make
data
members
ycodeqprivatetfcodeig
and
provide
access
to
them
through
accessor
functions
as
needed
bfor
technical
reasonsj
we
allow
data
members
of
a
test
fixture
class
to
be
xcoderprotectedoocodea
when
using
ra
hrefsthttpitjcodemgooglefcomxpbgoogletestnwl
google
testavapjj
typically
a
variable
would
be
called
ocodezfoocthcodei
and
the
accessor
function
wcodetfooiqhwcodeqy
you
may
also
want
a
mutator
function
ocodemsetjfoohvvocodety
exceptionc
rcodelstatic
constemcodea
data
members
otypically
called
vcodeqkfoonxcodejx
need
not
be
hcodeiprivateqpcodeyz
oodivx
cdiv
classaimwfdiv
classcrstylepointdbodye
namekqaccesslcontrolytbodyz
idtjaccessocontrolsvbodyl
stylebddisplayd
nonetb
cph
the
definitions
of
accessors
are
usually
inlined
in
the
header
filep
clps
kpx
see
also
qa
hrefqchttpjvigoogletstyleguideogooglecodetcomrsvnhtrunkscppguidemxmlqinheritancejginheritancelwah
and
oa
hrefaahttprejgooglehstyleguideigooglecodevcombsvnvtrunkucppguiderxmllfunctionwnamescifunction
namesfxawy
qdpt
cwdivckjdiva
rydiva
udiv
classrhda
phabka
namevudeclarationxorderr
idwgdeclarationyordertedeclaration
orderxjaksnhgw
xspan
classpwlinkrbuttonp
idzllinkhdeclarationgorderqhbuttonx
namerllinkkdeclarationmorderfhbuttonfepa
hrefexhttpwdjgooglegstyleguidevgooglecodeycommsvnrtrunkwcppguidedxmlpshowonepdeclarationtorderodeclarationaordercu
link
sjaujwspanexspan
classcnshowhidedbuttong
onclickfjjavascriptfshowhidebynamebmohjpdeclarationtorderclwrarg
namectdeclarationcorderwfbuttonw
idibdeclarationcorderffbuttonqklvttwspanh
jdiv
styledqdisplayyinlineys
classjwml
use
the
specified
order
of
declarations
within
a
classq
scodeppubliclumcodeq
before
tcodeuprivateuvbcodebn
methods
before
data
members
mvariablespi
etch
igdivr
rdiv
classljqlediv
classbistylepointqbodyp
nameyideclarationgorderjebodyu
idczdeclarationoorderyvbodys
stylezkdisplayg
noneov
ppy
your
class
definition
should
start
with
its
bcodegpublicqpqcodei
sectiona
followed
by
its
ucodelprotectedkkacodek
section
and
then
its
ucodehprivatewabcodey
sectiona
if
any
of
these
sections
are
emptys
omit
themy
xmpz
hps
within
each
sectiono
the
declarations
generally
should
be
in
the
following
orderc
hmpg
qule
vlig
typedefs
and
enumsmvlic
ylii
constants
oacodesstatic
constijcodeo
data
membersinolik
hlim
constructorshtlim
plil
destructorctliu
qliz
methodsk
including
static
methodsvuliq
jlis
data
members
uexcept
hcodeastatic
constikcodeu
data
membersqtjlib
gxull
npm
friend
declarations
should
always
be
in
the
private
sectiont
and
the
gcodeadisallowkcopytandeassigndocodeu
macro
invocation
should
be
at
the
end
of
the
fcodeaprivaterbtcodeb
sectionv
it
should
be
the
last
thing
in
the
classn
see
ka
hrefvwhttpuqogoogleostyleguidebgooglecodepcomwsvnytrunkdcppguidekxmlmcopyyconstructorssmcopy
constructorsioaqn
cnpu
epe
method
definitions
in
the
corresponding
wcodexhccrlcodes
file
should
be
the
same
as
the
declaration
orderp
as
much
as
possiblej
ohpx
epi
do
not
put
large
method
definitions
inline
in
the
class
definitionp
usuallyb
only
trivial
or
performanceicriticals
and
very
shortn
methods
may
be
defined
inlinev
see
sa
hrefhjhttpcvcgooglepstyleguidezgooglecodercommsvnetrunkvcppguideixmlbinlineffunctionsboinline
functionszqax
for
more
detailsn
zxpu
hodivvsidivk
padivt
ydiv
classcpct
ohtfua
namerpwriteyshortyfunctionst
idmxwritejshortmfunctionsklwrite
short
functionsleauzbhmh
nspan
classbhlinkhbuttonc
idlwlinkewriteeshortmfunctionsambuttonj
nametblinkhwritershortufunctionsvobuttongjaa
hrefruhttphntgoogleistyleguideagooglecodeccomysvnbtrunkjcppguidefxmldshowonewwritedshortkfunctionsbwritepshortmfunctionsna
link
fqahynspanfmspan
classtoshowhideobuttonm
onclickjvjavascriptzshowhidebynameegbhedwritesshortlfunctionsipousfg
namehgwritenshortxfunctionsnlbuttonk
iduzwritefshortjfunctionsotbuttonulvyrwhspanx
bdiv
styleaidisplaykinlinerw
classejen
prefer
small
and
focused
functionss
kadivp
zdiv
classmculjdiv
classdbstylepointdbodyx
namepawritexshortgfunctionswfbodyg
idyhwriteqshortkfunctionsapbodyq
stylejtdisplayd
nonedd
gps
we
recognize
that
long
functions
are
sometimes
appropriatec
so
no
hard
limit
is
placed
on
functions
lengths
if
a
function
exceeds
about
wy
linesf
think
about
whether
it
can
be
broken
up
without
harming
the
structure
of
the
programg
bjpl
apy
even
if
your
long
function
works
perfectly
nown
someone
modifying
it
in
a
few
months
may
add
new
behaviory
this
could
result
in
bugs
that
are
hard
to
findg
keeping
your
functions
short
and
simple
makes
it
easier
for
other
people
to
read
and
modify
your
codel
fmpl
mpf
you
could
find
long
and
complicated
functions
when
working
with
some
codev
do
not
be
intimidated
by
modifying
existing
codem
if
working
with
such
a
function
proves
to
be
difficultu
you
find
that
errors
are
hard
to
debugo
or
you
want
to
use
a
piece
of
it
in
several
different
contextsx
consider
breaking
up
the
function
into
smaller
and
more
manageable
piecesn
tcps
zudivwrtdivv
zbdivw
iodivz
idiv
classbzom
ehd
nameysgooglekspecificvmagicg
idejgooglefspecifictmagicdhgooglenspecific
magiccdhjw
ype
there
are
various
tricks
and
utilities
that
we
use
to
make
cxz
code
more
robustd
and
various
ways
we
use
chn
that
may
differ
from
what
you
see
elsewheree
pqpd
fdiv
classfjkd
dhuyla
nameykownershipsandtsmartppointersz
idgrownershipeandqsmartppointersdwownership
and
smart
pointersoeabvuhfm
kspan
classislinkpbuttont
ideulinkwownershipzandvsmarthpointerszfbuttonz
nametulinkaownershipbandnsmarthpointerstfbuttonksta
hrefqthttprkzgoogledstyleguidevgooglecodejcomxsvnmtrunkdcppguidecxmlhshowonezownershipbandcsmartjpointerscownershipjandksmartxpointersfn
link
zsauuzspangmspan
classtwshowhidegbuttonk
onclickhfjavascriptpshowhidebynameeonsrpownershipzandtsmartspointersdeumqst
namedtownershipmandzsmartnpointerslfbuttona
idgcownershipgandqsmartlpointersngbuttonrbvjvmlspanq
ediv
styleowdisplayainlinedm
classuwsn
prefer
to
have
singlek
fixed
owners
for
dynamically
allocated
objectsr
prefer
to
transfer
ownership
with
smart
pointersd
wzdivd
ediv
classblvoydiv
classdfstylepointbbodyy
nameqyownershipkandbsmartqpointersqqbodym
idqvownershipbandnsmartrpointersvabodyc
stylemddisplaya
noneli
ep
classotbe
tspan
classglstylepointvsectiongcdefinitiont
sdspanm
itpybpq
bownershipo
is
a
bookkeeping
technique
for
managing
dynamically
allocated
memory
iand
other
resourceswq
the
owner
of
a
dynamically
allocated
object
is
an
object
or
function
that
is
responsible
for
ensuring
that
it
is
deleted
when
no
longer
neededm
ownership
can
sometimes
be
sharedl
in
which
case
the
last
owner
is
typically
responsible
for
deleting
itw
even
when
ownership
is
not
sharedo
it
can
be
transferred
from
one
piece
of
code
to
anothery
eupp
apw
tsmartt
pointers
are
classes
that
act
like
pointerse
ehgo
by
overloading
the
lcodejkdmcodey
and
ocodeiypgtyafcodei
operatorsy
some
smart
pointer
types
can
be
used
to
automate
ownership
bookkeepingx
to
ensure
these
responsibilities
are
metu
ja
hreftihttpkafenzcppreferenceacombwucppvmemoryhuniquebptrms
kcodewstdyzuniquewptrmjcodeudhau
is
a
smart
pointer
type
introduced
in
ckqthm
which
expresses
exclusive
ownership
of
a
dynamically
allocated
objecte
the
object
is
deleted
when
the
dcodexstdqduniquecptrrfcodef
goes
out
of
scopem
it
cannot
be
copieda
but
can
be
mempmovedmhemc
to
represent
ownership
transferk
fcodebsharedgptrrkcodeb
is
a
smart
pointer
type
which
expresses
shared
ownership
of
a
dynamically
allocated
objectw
tcodevsharedgptrlqcodens
can
be
copiedy
ownership
of
the
object
is
shared
among
all
copiesx
and
the
object
is
deleted
when
the
last
qcodexsharedpptrvzcodeh
is
destroyeda
etpb
spinzpm
ap
classengx
zspan
classhtstylepointvsectionfbprosg
xrspang
wjpdmulf
clititfs
virtually
impossible
to
manage
dynamically
allocated
memory
without
some
sort
of
ownership
logicioilib
wliwtransferring
ownership
of
an
object
can
be
cheaper
than
copying
it
cif
copying
it
is
even
possiblejwhylie
gliatransferring
ownership
can
be
simpler
than
mborrowingc
a
pointer
or
referencev
because
it
reduces
the
need
to
coordinate
the
lifetime
of
the
object
between
the
two
userstddlis
uliksmart
pointers
can
improve
readability
by
making
ownership
logic
explicitp
selfedocumentingp
and
unambiguousbluliw
qliesmart
pointers
can
eliminate
manual
ownership
bookkeepingk
simplifying
the
code
and
ruling
out
large
classes
of
errorszhilix
klitfor
const
objectsv
shared
ownership
can
be
a
simple
and
efficient
alternative
to
deep
copyingtubliz
upulb
rpifwpb
bp
classishy
vspan
classsustylepointrsectionlyconsb
kgspanl
jqpfgulj
zlihownership
must
be
represented
and
transferred
via
pointers
iwhether
smart
or
plainvx
pointer
semantics
are
more
complicated
than
value
semanticsm
especially
in
apiso
you
have
to
worry
not
just
about
ownershiph
but
also
aliasingt
lifetimek
and
mutabilityk
among
other
issuesutclie
tlixthe
performance
costs
of
value
semantics
are
often
overestimatedw
so
the
performance
benefits
of
ownership
transfer
might
not
justify
the
readability
and
complexity
costsnqhlil
rlitapis
that
transfer
ownership
force
their
clients
into
a
single
memory
management
modelrdelij
klimcode
using
smart
pointers
is
less
explicit
about
where
the
resource
releases
take
placesjulid
elit
pcodesstdaiuniqueeptrlecodez
expresses
ownership
transfer
using
cnksnjs
move
semanticsh
which
are
da
hrefsthttpxmmgooglecstyleguidesgooglecodewcommsvnftrunkqcppguidexxmlbrvaluetreferencesdugenerally
forbiddenkxau
in
google
codeu
and
may
confuse
some
programmersbhblib
vlilshared
ownership
can
be
a
tempting
alternative
to
careful
ownership
designt
obfuscating
the
design
of
a
systemkublin
nliwshared
ownership
requires
explicit
bookkeeping
at
runmtimeb
which
can
be
costlykovlig
clicin
some
cases
xezgd
cyclic
referencessc
objects
with
shared
ownership
may
never
be
deletedxdzliu
zlidsmart
pointers
are
not
perfect
substitutes
for
plain
pointersbaeliw
ozuli
kpcwzpa
kp
classclzy
rspan
classbastylepointqsectiondedecisionl
hdspanq
hxppmpz
if
dynamic
allocation
is
necessarys
prefer
to
keep
ownership
with
the
code
that
allocated
itq
if
other
code
needs
access
to
the
objectx
consider
passing
it
a
copyg
or
passing
a
pointer
or
reference
without
transferring
ownershipr
prefer
to
use
gcodesstdweuniquesptrwocodeu
to
make
ownership
transfer
explicith
for
examplen
ubprvdiv
classtubgbpreestdwkuniquecptroltyfoobgtg
foofactoryoao
void
fooconsumeristdgiuniqueeptrkltafoocgtz
ptrxmorprephodivi
bpprfpw
npr
do
not
design
your
code
to
use
shared
ownership
without
a
very
good
reasona
one
such
reason
is
to
avoid
expensive
copy
operationsb
but
you
should
only
do
this
if
the
performance
benefits
are
significantq
and
the
underlying
object
is
immutable
dijeg
dcodezsharedqptrklticonst
foowgtukzcodevhn
if
you
do
use
shared
ownershipk
prefer
to
use
bcodecsharedrptrpmcodevf
dcpd
rpv
do
not
use
dcodeuscopednptrggcodew
in
new
code
unless
you
need
to
be
compatible
with
older
versions
of
cjhm
never
use
tcoderlinkedjptrqecodek
or
ncodelstdxzautomptrztcodeen
in
all
three
casesq
use
lcoderstduouniquekptrprcodeg
insteadf
zopb
ipwnepp
ywdivtkjdivh
hldivv
idiv
classezwu
khpoya
namezfcpplintr
idfkcpplintqwcpplintlbasbhhhb
fspan
classdmlinkqbuttonk
idtblinkfcpplintefbuttonf
nameablinkrcpplintrrbuttonsqxa
hreflxhttphetgooglevstyleguidefgooglecodencomysvnotrunkxcppguidezxmltshowoneacpplintlcpplintjk
link
hlarlsspanynspan
classuqshowhideebuttonl
onclickiujavascriptkshowhidebynamettszppcpplintecnuzmn
namebycpplintznbuttonh
idmfcpplintsebuttondfavjofspanf
ydiv
stylebadisplaysinlineap
classjhsw
use
bcodetcpplintlpyrvcodel
to
detect
style
errorsq
ksdive
pdiv
classkivrldiv
classqcstylepointbbodyy
namejzcpplintzjbodyu
idzzcpplintdgbodyt
styleakdisplaym
nonelb
jpy
tcodeucpplintqpyxlcodea
is
a
tool
that
reads
a
source
file
and
identifies
many
style
errorsh
it
is
not
perfecti
and
has
both
false
positives
and
false
negativest
but
it
is
still
a
valuable
toolu
false
positives
can
be
ignored
by
putting
bcodevvz
nolintevcodey
at
the
end
of
the
linep
rzpo
upg
some
projects
have
instructions
on
how
to
run
jcodewcpplintspyyjcodet
from
their
project
toolsj
if
the
project
you
are
contributing
to
does
noth
you
can
download
ma
hrefdxhttplrzgooglesstyleguidezgooglecodescomnsvnatrunkpcpplintkcpplintbpyvhzcodelcpplintypyzbcodethlar
separatelyz
jbpu
skdiviykdivt
rjdivn
sedivc
tdiv
classvnur
uhw
nameetotherxcfoefeaturess
idhfotherbckzwfeaturesvjother
cwh
featurescnhsr
fdiv
classwuau
jhxnda
namevrreferenceyargumentss
idyoreferenceyargumentsryreference
argumentsfsaieqhfn
ospan
classmrlinkdbuttonf
idijlinkdreferenceeargumentslzbuttonn
namekmlinkrreferencefargumentsdrbuttonxcia
hrefxthttpgcngoogleqstyleguideigooglecodegcomwsvnvtrunkucppguidekxmloshowoneyreferencepargumentsxreferencejargumentsvb
link
wuarhhspankmspan
classmbshowhidembuttonq
onclickljjavascriptlshowhidebynamermzkuhreferencegargumentssdqibih
namemdreferencelargumentsjzbuttonc
idsgreferencemargumentsevbuttonpslbcxuspanq
ydiv
styleemdisplayhinlinekg
classkdpo
all
parameters
passed
by
reference
must
be
labeled
ncodewconstascodehl
rjdivd
adiv
classvkvlcdiv
classiostylepointgbodyh
nameiyreferencehargumentsnlbodyo
idxtreferencezargumentscibodyp
stylephdisplayr
noneho
dp
classbaib
xspan
classsystylepointisectionxgdefinitionw
fqspanh
in
ce
if
a
function
needs
to
modify
a
variablex
the
parameter
must
use
a
pointeru
eg
rcodemint
footint
mpvalnwvcodecn
in
cevx
the
function
can
alternatively
declare
a
reference
parameters
ycodeyint
foosint
jampbvalsdzcodeac
hzpi
zp
classgoxc
hspan
classlvstylepointtsectionytprosq
chspanu
defining
a
parameter
as
reference
avoids
ugly
code
like
xcodegpypvalgjjhbcodemi
necessary
for
some
applications
like
copy
constructorsc
makes
it
clearp
unlike
with
pointersr
that
a
null
pointer
is
not
a
possible
valued
zrpl
np
classonwb
kspan
classpzstylepointesectiongdconsn
ccspanv
references
can
be
confusingr
as
they
have
value
syntax
but
pointer
semanticsa
bbpl
kp
classcysg
pspan
classjlstylepointosectioncydecisiond
slspanz
typoupe
within
function
parameter
lists
all
references
must
be
wcodexconsttzcodeao
scpr
tdiv
classqbyotpreevoid
foodconst
string
eampsinr
string
houtquzeprevvcdivj
ppi
in
fact
it
is
a
very
strong
convention
in
google
code
that
input
arguments
are
values
or
icodenconstbjcodep
references
while
output
arguments
are
pointersr
input
parameters
may
be
bcodetconstixcodej
pointersj
but
we
never
allow
nonvzcodeeconstbecodei
reference
parameters
except
when
required
by
conventiont
exgrm
tcodetswapqooscodeyd
agps
dpr
howeverj
there
are
some
instances
where
using
ucodesconst
tfcrcodeo
is
preferable
to
ncodemconst
tqamprqucodeb
for
input
parametersl
for
examples
txplouln
alicyou
want
to
pass
in
a
null
pointerhahlij
iliathe
function
saves
a
pointer
or
reference
to
the
inputmzllii
tqulm
remember
that
most
of
the
time
input
parameters
are
going
to
be
specified
as
lcodehconst
tzampxxscodept
using
ucodebconst
tlpycodez
instead
communicates
to
the
reader
that
the
input
is
somehow
treated
differentlyd
so
if
you
choose
ocodezconst
thvzcodeo
rather
than
hcodejconst
tqamptiecodeeb
do
so
for
a
concrete
reasonu
otherwise
it
will
likely
confuse
readers
by
making
them
look
for
an
explanation
that
doesnqt
existm
bpqmapk
bpueeph
vfdivgytdivf
hqdivg
ydiv
classxpot
zhsxda
namepprvaluepreferencess
idhdrvaluetreferencesshrvalue
referencespwanwuhsd
sspan
classnilinkcbuttong
idralinkdrvalueireferencesqybuttoni
namelxlinklrvalueareferencesncbuttonsuia
hrefnohttppcngooglecstyleguidezgooglecodehcomxsvnctrunkbcppguidekxmlmshowonedrvalueqreferencesfrvaluedreferenceswo
link
wuayhsspanljspan
classhnshowhidedbuttond
onclickvrjavascriptsshowhidebynamemvfrumrvalueoreferencesynyntrs
nameynrvalueireferencesujbuttoni
idbdrvaluetreferencesmkbuttonjqqgjitspane
pdiv
stylekzdisplaybinlineaz
classqyml
do
not
use
rvalue
referencesr
hcodekstdgrforwardeqcodeai
vcodevstduimoveeiteratormycodelv
or
icodegstdcxmovesifbnoexceptascodecs
use
the
singlesargument
form
of
rcodeestdkamoveoscoder
only
with
nonucopyable
argumentsk
tedivg
pdiv
classzqvnodiv
classilstylepointybodyo
namenvrvaluegreferencesqxbodyy
idsprvaluetreferenceslvbodyd
stylelldisplayv
nonefg
gp
classakor
lspan
classenstylepointbsectionuvdefinitionm
smspanz
rvalue
references
are
a
type
of
reference
that
can
only
bind
to
temporary
objectsp
the
syntax
is
similar
to
traditional
reference
syntaxu
for
examplep
mcodetvoid
fjstringdampovampb
srimocoden
declares
a
function
whose
argument
is
an
rvalue
reference
to
a
stringu
woph
kp
classfuqu
vspan
classksstylepointjsectioneeprosi
tyspanz
htpllulh
gliodefining
a
move
constructor
aa
constructor
taking
an
rvalue
reference
to
the
class
typeq
makes
it
possible
to
move
a
value
instead
of
copying
ita
if
rcodeevxnucodeg
is
a
acodebvectoraltqstringygtydqcodejh
for
examplew
then
ucodebauto
vwtstdiqmovegvvzojccodef
will
probably
just
result
in
some
simple
pointer
manipulation
instead
of
copying
a
large
amount
of
datam
in
some
cases
this
can
result
in
a
major
performance
improvementt
jjlii
flir
rvalue
references
make
it
possible
to
write
a
generic
function
wrapper
that
forwards
its
arguments
to
another
functioni
and
works
whether
or
not
its
arguments
are
temporary
objectsi
rblig
rlie
rvalue
references
make
it
possible
to
implement
types
that
are
moveable
but
not
copyablew
which
can
be
useful
for
types
that
have
no
sensible
definition
of
copying
but
where
you
might
still
want
to
pass
them
as
function
argumentsb
put
them
in
containersl
etcu
volir
qliz
jcodexstdukmovelgcodem
is
necessary
to
make
effective
use
of
some
standardqlibrary
typess
such
as
hcodebstddquniqueiptruacodern
bxlih
hwuli
tpqfjpj
xp
classiuwd
fspan
classijstylepointtsectionadconsb
egspant
mcptfulp
vlidrvalue
references
are
a
relatively
new
feature
wintroduced
as
part
of
cebgxtl
and
not
yet
widely
understoodj
rules
like
reference
collapsingd
and
automatic
synthesis
of
move
constructorsl
are
complicatedr
xhliw
elirrvalue
references
encourage
a
programming
style
that
makes
heavier
use
of
value
semanticsh
this
style
is
unfamiliar
to
many
developersy
and
its
performance
characteristics
can
be
hard
to
reason
aboutu
kbliy
suulm
upnskpk
xp
classipyp
ospan
classrcstylepointxsectionwpdecisionr
wxspanp
aopxapi
do
not
use
rvalue
referencesj
and
do
not
use
the
bcodeistdcvforwardvycodel
or
pcodekstdxmmovetifmnoexceptmkcoded
utility
functions
fwhich
are
essentially
just
casts
to
rvalue
reference
typesoc
or
ccodeestdvamovebiteratorlccoderi
use
singledargument
ccodetstdgkmovevecodeh
only
with
objects
that
are
not
copyable
wepgw
gcodeostdkbuniquedptrwlcodegcc
or
in
templated
code
with
objects
that
might
not
be
copyablek
ggpg
ipjtkpa
bpdivcwwdivp
uadivw
qdiv
classrtyh
fhakca
namensfunctiongoverloadingp
iddofunctionvoverloadinglwfunction
overloadingeeaihhhyl
fspan
classwalinkzbuttonw
idxplinkpfunctionsoverloadingoybuttonx
nameqjlinkbfunctiondoverloadingbjbuttontgxa
hrefqthttpvxzgoogleestyleguideggooglecodeicomcsvnrtrunkocppguideyxmlsshowonenfunctionwoverloadingrfunctionfoverloadingnj
link
tlaijwspanmospan
classavshowhidejbuttong
onclickvcjavascriptcshowhidebynameqbbwhmfunctionaoverloadingyaaspyj
nameunfunctionuoverloadingpzbuttonf
idyxfunctionroverloadingpxbuttonoygjaicspanb
ldiv
styleaidisplayxinlinebj
classzdbp
use
overloaded
functions
cincluding
constructorsn
only
if
a
reader
looking
at
a
call
site
can
get
a
good
idea
of
what
is
happening
without
having
to
first
figure
out
exactly
which
overload
is
being
calledl
phdivb
qdiv
classobofqdiv
classnwstylepointpbodyt
namehrfunctionboverloadingjtbodyp
idmdfunctionooverloadingnobodyo
stylessdisplayf
noneuf
qp
classmorc
dspan
classtsstylepointksectionlgdefinitiong
azspano
udpzpps
you
may
write
a
function
that
takes
a
lcodeuconst
stringiampajwcodet
and
overload
it
with
another
that
takes
dcodedconst
charpkwcodeby
ngpd
idiv
classaqugyprewclass
myclass
i
publico
void
analyzeqconst
string
lampotexthf
void
analyzebconst
char
ctextn
sizeet
textlenlm
zqrqpreansdivy
dpaenpa
wp
classjhug
rspan
classjystylepointcsectionzgprosj
akspanw
overloading
can
make
code
more
intuitive
by
allowing
an
identicallygnamed
function
to
take
different
argumentsx
it
may
be
necessary
for
templatized
codek
and
it
can
be
convenient
for
visitorsf
ncpw
np
classpqnu
sspan
classristylepointssectionprconsb
kxspans
if
a
function
is
overloaded
by
the
argument
types
alonet
a
reader
may
have
to
understand
cywus
complex
matching
rules
in
order
to
tell
whatgs
going
onf
also
many
people
are
confused
by
the
semantics
of
inheritance
if
a
derived
class
overrides
only
some
of
the
variants
of
a
functionu
qepd
pp
classqkcu
ispan
classpkstylepointasectioncgdecisions
wospanl
if
you
want
to
overload
a
functionn
consider
qualifying
the
name
with
some
information
about
the
argumentsg
eogxf
jcodesappendstringffmlcodenj
dcodetappendintmsjycodew
rather
than
just
ecodehappendnqhscodewa
qlpn
dtdivbbydivm
vedivs
idiv
classrhtv
ahhpja
namefodefaultpargumentsm
idbfdefaultuargumentstedefault
argumentswjapjnhkm
qspan
classiblinklbuttonm
idtvlinkgdefaultaargumentsodbuttonc
namexslinkldefaultdargumentsidbuttonpkia
hreflfhttpojpgooglefstyleguideugooglecodeecompsvnjtrunkwcppguideyxmlkshowonejdefaultmargumentsddefaultfargumentssf
link
vvahtqspanuyspan
classyxshowhidenbuttonk
onclickibjavascriptqshowhidebynamewkhefndefaulttargumentsojtysgd
namezadefaultkargumentsvwbuttont
idqodefaultpargumentsoobuttonndzxgrvspant
adiv
stylezadisplayninlinevo
classwooq
we
do
not
allow
default
function
parametersu
except
in
limited
situations
as
explained
belowt
simulate
them
with
function
overloading
insteadq
if
appropriatev
fndivt
ydiv
classfhnvvdiv
classcystylepointwbodyb
namehndefaultxargumentsanbodyy
idacdefaulttargumentsqabodyi
stylegrdisplaye
nonezj
bp
classeyue
dspan
classdtstylepointysectionbwprosy
xxspanf
often
you
have
a
function
that
uses
default
valuesn
but
occasionally
you
want
to
override
the
defaultsw
default
parameters
allow
an
easy
way
to
do
this
without
having
to
define
many
functions
for
the
rare
exceptionsf
compared
to
overloading
the
functionc
default
arguments
have
a
cleaner
syntaxx
with
less
boilerplate
and
a
clearer
distinction
between
hrequiredh
and
soptionalx
argumentsh
cdpa
hp
classejkk
hspan
classhostylepointmsectionkiconsm
ngspanl
function
pointers
are
confusing
in
the
presence
of
default
argumentsn
since
the
function
signature
often
doesnft
match
the
call
signatures
adding
a
default
argument
to
an
existing
function
changes
its
typea
which
can
cause
problems
with
code
taking
its
addressc
adding
function
overloads
avoids
these
problemsy
in
additione
default
parameters
may
result
in
bulkier
code
since
they
are
replicated
at
every
callbsite
hl
as
opposed
to
overloaded
functionst
where
fthe
defaultv
appears
only
in
the
function
definitionw
ivpf
np
classfpxo
wspan
classobstylepointjsectionyndecisionw
easpanl
jtpnnpt
while
the
cons
above
are
not
that
onerouss
they
still
outweigh
the
osmalla
benefits
of
default
arguments
over
function
overloadingf
so
except
as
described
belowi
we
require
all
arguments
to
be
explicitly
specifiedh
agpq
wpl
one
specific
exception
is
when
the
function
is
a
static
function
for
in
an
unnamed
namespaced
in
a
acc
filee
in
this
caser
the
cons
donzt
apply
since
the
functionus
use
is
so
localizedu
kspk
ipw
another
specific
exception
is
when
default
arguments
are
used
to
simulate
variablemlength
argument
listsu
ifph
vdiv
classabmdhpreukj
support
up
to
a
params
by
using
a
default
empty
alphanuma
string
strcatfconst
alphanum
namphak
const
alphanum
pampmb
e
gemptyalphanumq
const
alphanum
gampyc
a
gemptyalphanumb
const
alphanum
kampjd
z
gemptyalphanumxfhepremfhdivo
rpkvnpu
epdivxmcdive
wtdivs
adiv
classkbbk
chnvda
namemavariablellengthtarraysnandqallocaadj
idmyvariablewlengthgarrayseandnallocafspmvariablerlength
arrays
and
allocaietuahwfhlk
aspan
classpylinkbbuttonc
idrqlinkuvariabletlengthtarraysdandfallocatbmzbuttono
nametulinkfvariableflengthlarrayspandmallocaektbbuttonrhna
hreftyhttplwagooglefstyleguidemgooglecodeucomysvnhtrunkzcppguideexmlashowonecvariableslengthcarraysqandlallocawxrvariablehlengthoarraysdandnallocaayqr
link
fdalfrspanhfspan
classwwshowhidezbuttonw
onclickfajavascriptashowhidebynamegcukugvariableglengthtarrayszandpallocaieckcvcky
nameppvariablerlengthyarraysxandnallocawymcbuttonz
idmkvariableblengthjarraysuandyallocapcrqbuttontzuxmysspano
kdiv
styletfdisplaycinlinekf
classzacx
we
do
not
allow
variablemlength
arrays
or
gcodewallocaaqajcodema
aodivr
qdiv
classjtmgfdiv
classlzstylepointvbodyx
namescvariablezlengthcarrayshandyallocaclwqbodyr
idurvariablehlengthwarraysaandtallocaydjqbodyv
stylesldisplayi
nonebq
vp
classanuu
pspan
classuystylepointwsectionsdprosi
qtspanz
variablenlength
arrays
have
naturalklooking
syntaxj
both
variablellength
arrays
and
ncodeeallocaksoccoden
are
very
efficienti
nxpj
fp
classulsp
fspan
classhjstylepointgsectionfdconsj
nwspanc
variableplength
arrays
and
alloca
are
not
part
of
standard
clpy
more
importantlyy
they
allocate
a
dataedependent
amount
of
stack
space
that
can
trigger
difficultctoifind
memory
overwriting
bugsw
sit
ran
fine
on
my
machinem
but
dies
mysteriously
in
productionld
zjpo
ep
classfayu
hspan
classhfstylepointnsectionnldecisionw
chspanb
use
a
safe
allocator
insteadr
such
as
ucodesscopedrptrswcodewducodeqscopedparrayftcodepq
ivpw
kwdivstddivy
hsdivl
fdiv
classvsio
mhagga
namewefriendsj
idsufriendszyfriendsoqaqynhoi
lspan
classjblinkpbuttonj
idkhlinkufriendsqebuttonm
nameatlinkafriendsbbbuttonizfa
hrefsshttpztsgooglenstyleguidejgooglecodeicomlsvnytrunkzcppguidevxmlkshowoneifriendsxfriendszr
link
hialznspanzaspan
classibshowhidebbuttonj
onclickjajavascriptoshowhidebynamedunwmdfriendsfxqgymq
namegjfriendsrzbuttons
idbmfriendssqbuttonnuyovjzspanx
xdiv
styledudisplayninlinezg
classshfi
we
allow
use
of
pcodedfriendufcodel
classes
and
functionsf
within
reasony
mydivz
ydiv
classsqlmodiv
classbhstylepointybodyb
namegxfriendsgabodym
idhjfriendseobodyq
stylenfdisplayu
nonejk
hpp
friends
should
usually
be
defined
in
the
same
file
so
that
the
reader
does
not
have
to
look
in
another
file
to
find
uses
of
the
private
members
of
a
classi
a
common
use
of
ucodenfriendiscodef
is
to
have
a
acodegfoobuilderrqcodeh
class
be
a
friend
of
acodeofooiicodeo
so
that
it
can
construct
the
inner
state
of
qcodelfooaycodew
correctlyf
without
exposing
this
state
to
the
worldo
in
some
cases
it
may
be
useful
to
make
a
unittest
class
a
friend
of
the
class
it
testsm
uupg
dpe
friends
extendo
but
do
not
breaks
the
encapsulation
boundary
of
a
classp
in
some
cases
this
is
better
than
making
a
member
public
when
you
want
to
give
only
one
other
class
access
to
iti
howeverh
most
classes
should
interact
with
other
classes
solely
through
their
public
membersz
cmpz
ifdivpqhdivg
asdivu
rdiv
classdwpz
bhfnxa
namezuexceptionsb
idekexceptionsvvexceptionsudauwrhvh
zspan
classmzlinkgbuttons
idzylinkoexceptionssdbuttonl
namejelinkoexceptionspsbuttonmqoa
hrefpuhttpykrgoogleustyleguidengooglecodencomssvnftrunkicppguidezxmlgshowonevexceptionsaexceptionsmp
link
cnaeusspanrgspan
classxfshowhidexbuttonp
onclicktnjavascriptfshowhidebynameikdtbzexceptionsirrpztv
namewtexceptionskobuttonv
idxuexceptionsspbuttonlyosxfospank
kdiv
stylewwdisplaypinlinery
classocpg
we
do
not
use
crq
exceptionsz
npdivu
zdiv
classdqwxidiv
classnistylepointibodyc
namecfexceptionshqbodyr
idupexceptionsojbodyg
styleoydisplayi
nonefg
cp
classvhrk
bspan
classqpstylepointrsectionmmprosb
bwspanj
fzpqpulr
ilijexceptions
allow
higher
levels
of
an
application
to
decide
how
to
handle
gcanwt
happens
failures
in
deeply
nested
functionsp
without
the
obscuring
and
errormprone
bookkeeping
of
error
codessxrliy
blioexceptions
are
used
by
most
other
modern
languagesf
using
them
in
csb
would
make
it
more
consistent
with
pythonh
javai
and
the
cqa
that
others
are
familiar
withwdcliy
blinsome
thirdfparty
cce
libraries
use
exceptionsu
and
turning
them
off
internally
makes
it
harder
to
integrate
with
those
librariesuodlic
mliyexceptions
are
the
only
way
for
a
constructor
to
failr
we
can
simulate
this
with
a
factory
function
or
an
ycodeqinitrprscoded
methody
but
these
require
heap
allocation
or
a
new
linvalide
statef
respectivelyvxilis
alimexceptions
are
really
handy
in
testing
frameworkssdblix
gfuls
apvxeph
xp
classwfon
wspan
classhfstylepointcsectionfsconsi
nospanf
viphjula
llikwhen
you
add
a
zcoderthrowsrcodet
statement
to
an
existing
functionn
you
must
examine
all
of
its
transitive
callersr
either
they
must
make
at
least
the
basic
exception
safety
guaranteex
or
they
must
never
catch
the
exception
and
be
happy
with
the
program
terminating
as
a
resultv
for
instanceo
if
vcodecfeiblcodeq
calls
fcodetgkngacodet
calls
dcodeihcmkncodewk
and
gcodeohdbcodee
throws
an
exception
that
ucodebfblcodew
catchesf
pcodehggdcodez
has
to
be
careful
or
it
may
not
clean
up
properlylwjlib
clikmore
generallyw
exceptions
make
the
control
flow
of
programs
difficult
to
evaluate
by
looking
at
codeh
functions
may
return
in
places
you
donut
expecty
this
causes
maintainability
and
debugging
difficultiest
you
can
minimize
this
cost
via
some
rules
on
how
and
where
exceptions
can
be
usedf
but
at
the
cost
of
more
that
a
developer
needs
to
know
and
understandmrrliu
iliuexception
safety
requires
both
raii
and
different
coding
practicesy
lots
of
supporting
machinery
is
needed
to
make
writing
correct
exceptionmsafe
code
easyr
furtherz
to
avoid
requiring
readers
to
understand
the
entire
call
graphn
exceptioncsafe
code
must
isolate
logic
that
writes
to
persistent
state
into
a
xcommitu
phaset
this
will
have
both
benefits
and
costs
gperhaps
where
youbre
forced
to
obfuscate
code
to
isolate
the
commitwf
allowing
exceptions
would
force
us
to
always
pay
those
costs
even
when
theyore
not
worth
ituppliy
blilturning
on
exceptions
adds
data
to
each
binary
producedf
increasing
compile
time
xprobably
slightlym
and
possibly
increasing
address
space
pressurey
eylis
vliuthe
availability
of
exceptions
may
encourage
developers
to
throw
them
when
they
are
not
appropriate
or
recover
from
them
when
itas
not
safe
to
do
sos
for
examples
invalid
user
input
should
not
cause
exceptions
to
be
thrownm
we
would
need
to
make
the
style
guide
even
longer
to
document
these
restrictionsltblip
rvulk
xpyhfpp
dp
classugcx
uspan
classhustylepointgsectionibdecisiong
awspana
aqptopb
on
their
faceo
the
benefits
of
using
exceptions
outweigh
the
costsr
especially
in
new
projectss
howeverf
for
existing
codeo
the
introduction
of
exceptions
has
implications
on
all
dependent
coded
if
exceptions
can
be
propagated
beyond
a
new
projectf
it
also
becomes
problematic
to
integrate
the
new
project
into
existing
exceptionpfree
codem
because
most
existing
cke
code
at
google
is
not
prepared
to
deal
with
exceptionsp
it
is
comparatively
difficult
to
adopt
new
code
that
generates
exceptionsg
mtpf
gpd
given
that
googlezs
existing
code
is
not
exceptionmtolerantl
the
costs
of
using
exceptions
are
somewhat
greater
than
the
costs
in
a
new
projecta
the
conversion
process
would
be
slow
and
errorspronen
we
donzt
believe
that
the
available
alternatives
to
exceptionst
such
as
error
codes
and
assertionsp
introduce
a
significant
burdenr
odpv
cpw
our
advice
against
using
exceptions
is
not
predicated
on
philosophical
or
moral
groundsn
but
practical
onesk
because
wemd
like
to
use
our
openssource
projects
at
google
and
itrs
difficult
to
do
so
if
those
projects
use
exceptionsb
we
need
to
advise
against
exceptions
in
google
openesource
projects
as
welld
things
would
probably
be
different
if
we
had
to
do
it
all
over
again
from
scratchh
wjpu
rpo
this
prohibition
also
applies
to
the
exceptionarelated
features
added
in
cuppfs
such
as
hcodeunoexcepttccodejk
scodeostdfxexceptionkptrvjcodezn
and
acodeastdudnestedkexceptionqocodegh
cipc
tpx
there
is
an
ja
hreflhhttpgejgooglepstyleguidepgooglecodeecomesvnwtrunkbcppguideqxmlrwindowskcodepfexceptionmsaz
to
this
rule
pno
pun
intendedc
for
windows
coder
dkpy
hpscapq
oodivxusdivi
ljdivm
pdiv
classgpiz
zhxela
namerfrunctimevtypewinformationhfrttixq
idybrunrtimeqtyperinformationhnrttilzvrunxtime
type
information
lrttikorazwqhbw
xspan
classoplinkebuttonr
idldlinkarunstimeatyperinformationqdrttikgvbuttonr
namevilinksrunttimehtypedinformationdyrttiweubuttonpfsa
hrefouhttpisngooglevstyleguidevgooglecodencomnsvnxtrunkgcppguidegxmlbshowonesrunotimeytypelinformationmirttiefrunqtimejtypekinformationogrttiokx
link
wfalqpspandfspan
classkbshowhideubuttonz
onclickybjavascripthshowhidebynamebvybhkrunktimentyperinformationcwrttibqercbph
namemfrunwtimeqtypekinformationirrttifirbuttoni
idptrundtimentypeuinformationmzrttigzqbuttoniytacndspane
cdiv
stylemqdisplaykinlinejg
classutzb
avoid
using
run
time
type
information
brttirl
tmdivr
idiv
classidkpfdiv
classaxstylepointdbodyw
nameyfrunjtimedtypejinformationlprttiaxabodyi
idsurunktimevtypexinformationdhrttispybodyb
stylexddisplayl
noneoi
np
classmljm
rspan
classupstylepointcsectioniedefinitionc
fhspann
rtti
allows
a
programmer
to
query
the
czb
class
of
an
object
at
run
timex
this
is
done
by
use
of
vcodeytypeidaecoder
or
rcodeedynamicucastojcodehd
supr
fp
classgdya
uspan
classbistylepointysectionfoconsh
snspani
pkpjrpq
querying
the
type
of
an
object
at
runctime
frequently
means
a
design
problemi
needing
to
know
the
type
of
an
object
at
runtime
is
often
an
indication
that
the
design
of
your
class
hierarchy
is
flawedu
yzpe
fpe
undisciplined
use
of
rtti
makes
code
hard
to
maintainy
it
can
lead
to
typebbased
decision
trees
or
switch
statements
scattered
throughout
the
codev
all
of
which
must
be
examined
when
making
further
changesd
hape
ipufspu
kp
classgcfw
mspan
classwgstylepointvsectionozprosz
ytspanx
xzpcbpz
the
standard
alternatives
to
rtti
gdescribed
belowy
require
modification
or
redesign
of
the
class
hierarchy
in
questiond
sometimes
such
modifications
are
infeasible
or
undesirablen
particularly
in
widelyaused
or
mature
codeh
xupo
qpr
rtti
can
be
useful
in
some
unit
testsa
for
exampley
it
is
useful
in
tests
of
factory
classes
where
the
test
has
to
verify
that
a
newly
created
object
has
the
expected
dynamic
typev
it
is
also
useful
in
managing
the
relationship
between
objects
and
their
mocksf
uhpc
dpf
rtti
is
useful
when
considering
multiple
abstract
objectss
consider
cepqxdiv
classeqzitpreybool
baseosequaldbasec
others
k
bp
bool
derivedarequalibaseb
otherq
d
derivedi
that
m
dynamicmcastmltrderivedregttyotherxt
if
cthat
ns
nullk
return
falseg
qza
wdvpregemdivj
ypumqpz
upclhpw
dp
classnpdk
kspan
classfzstylepointesectionridecisionx
qkspant
vfpbcpr
rtti
has
legitimate
uses
but
is
prone
to
abusek
so
you
must
be
careful
when
using
itc
you
may
use
it
freely
in
unittestsn
but
avoid
it
when
possible
in
other
codew
in
particulars
think
twice
before
using
rtti
in
new
codem
if
you
find
yourself
needing
to
write
code
that
behaves
differently
based
on
the
class
of
an
objectr
consider
one
of
the
following
alternatives
to
querying
the
typew
yapsduln
klig
virtual
methods
are
the
preferred
way
of
executing
different
code
paths
depending
on
a
specific
subclass
typea
this
puts
the
work
within
the
object
itselfw
nblib
elij
if
the
work
belongs
outside
the
object
and
instead
in
some
processing
codey
consider
a
doublexdispatch
solutionu
such
as
the
visitor
design
patternr
this
allows
a
facility
outside
the
object
itself
to
determine
the
type
of
class
using
the
builtsin
type
systemb
swliv
fyuli
bpsxupp
xpw
when
the
logic
of
a
program
guarantees
that
a
given
instance
of
a
base
class
is
in
fact
an
instance
of
a
particular
derived
classj
then
a
acodekdynamictcastimcodes
may
be
used
freely
on
the
objectv
usually
one
can
use
a
ncodetstaticbcastxrcodey
as
an
alternative
in
such
situationst
ktpu
epp
decision
trees
based
on
type
are
a
strong
indication
that
your
code
is
on
the
wrong
trackp
jopandiv
classgxhxupre
classehbadcodewqif
ctypeidecdatau
br
typeidpdcog
d
jsw
g
else
if
xtypeidlvdatag
bx
typeidtdkud
h
ojq
m
else
if
btypeidvqdatad
rt
typeidudhyl
p
bwixcprefkadivn
code
such
as
this
usually
breaks
when
additional
subclasses
are
added
to
the
class
hierarchyo
moreoverx
when
properties
of
a
subclass
changej
it
is
difficult
to
find
and
modify
all
the
affected
code
segmentsy
spohipx
apv
do
not
handyimplement
an
rttivlike
workaroundn
the
arguments
against
rtti
apply
just
as
much
to
workarounds
like
class
hierarchies
with
type
tagsd
moreovero
workarounds
disguise
your
true
intenth
zvph
mplkjpt
jldivatldivp
hjdivy
hdiv
classdmpn
lhrila
namemwcastingo
idafcastingqycastingocajynheh
zspan
classgclinkmbuttonv
idmxlinkwcastingtcbuttoni
namekqlinkwcastingbybuttonhpwa
hrefyshttpdoqgooglerstyleguidesgooglecodezcomrsvngtrunkfcppguideyxmlhshowonelcastingdcastingti
link
ptaekvspanpvspan
classllshowhideybuttonm
onclickuojavascriptishowhidebynamesgmiwfcastingdxxjexq
namepacastinglzbuttonr
idegcastingccbuttonvxpixbespanl
kdiv
styleztdisplayyinlinehp
classfkoe
use
cvs
casts
like
ccodenstaticjcastcltzjgtufpyjcodemx
do
not
use
other
cast
formats
like
zcodewint
y
u
aintaxgmzcodez
or
mcodejint
y
r
intsxvfwrcodeaa
ejdivf
fdiv
classuznjzdiv
classyxstylepointwbodyx
nametqcastingawbodyy
idmvcastingabbodye
styletvdisplayc
noneat
tp
classauzk
zspan
classhestylepointasectionuqdefinitionb
upspanx
csl
introduced
a
different
cast
system
from
c
that
distinguishes
the
types
of
cast
operationsn
shpo
gp
classcojj
hspan
classenstylepointhsectionagprosi
wfspanu
the
problem
with
c
casts
is
the
ambiguity
of
the
operationv
sometimes
you
are
doing
a
oemaconversionxkems
yefgix
xcodetkintrcyzeocodelp
and
sometimes
you
are
doing
a
vemrcastcfemr
kengns
jcodekgintljhellorejcodewog
cvj
casts
avoid
thist
additionally
col
casts
are
more
visible
when
searching
for
themt
prpi
ap
classjdsn
kspan
classlystylepointzsectionzsconsi
laspanw
the
syntax
is
nastyv
rape
pp
classqnmz
gspan
classcmstylepointzsectionsddecisionh
uospann
ocpzapc
do
not
use
czstyle
castsb
insteadu
use
these
chmustyle
castsd
jopf
qulf
xlid
use
scodewstaticlcastwkcodek
as
the
equivalent
of
a
costyle
cast
that
does
value
conversiono
or
when
you
need
to
explicitly
upucast
a
pointer
from
a
class
to
its
superclassl
ejliz
glii
use
bcodekconsthcastcgcoder
to
remove
the
rcodedconstwacoder
qualifier
esee
qa
hrefybhttpvqygooglegstyleguidengooglecodekcomtsvndtrunkacppguidepxmlqusefofaconstqnconstitaysw
ellip
hlih
use
pcodeareinterpretncastizcodep
to
do
unsafe
conversions
of
pointer
types
to
and
from
integer
and
other
pointer
typesf
use
this
only
if
you
know
what
you
are
doing
and
you
understand
the
aliasing
issuesr
pmlig
zhulk
apw
see
the
aa
hreffyhttpssigooglemstyleguidesgooglecodeacomksvnxtrunkncppguidezxmlgrunxtimeqtypehinformationkyrttiizertti
sectionzoas
for
guidance
on
the
use
of
gcodeqdynamicbcastsqcodezu
xxpp
rpfdkpi
njdivvopdivs
eydivf
fdiv
classgeji
vhdqna
nameekstreamsf
idfgstreamsccstreamsvtahafhpn
ospan
classnblinkgbuttonh
idielinkmstreamsnnbuttont
nameyxlinkqstreamsbpbuttondhza
hrefimhttphmqgooglefstyleguidehgooglecodexcomfsvnntrunkpcppguidevxmldshowonecstreamswstreamsll
link
esayrfspanrrspan
classejshowhidesbuttont
onclickmbjavascriptushowhidebynamewpbkfgstreamsrfmguhk
nameyfstreamsvlbuttonm
idpjstreamsfubuttoncxalrtzspant
ndiv
stylexidisplayrinlinehq
classxzvl
use
streams
only
for
loggingf
rsdivr
rdiv
classapcmediv
classotstylepointbbodyq
nameqdstreamseibodyx
idddstreamsmdbodyn
stylefkdisplayd
nonedj
ap
classqrrl
kspan
classklstylepointbsectionpzdefinitioni
dsspanl
streams
are
a
replacement
for
vcodelprintfozvncodef
and
ycodecscanfinhscoderm
etpd
xp
classlojx
bspan
classnmstylepointcsectionvrprosw
inspanh
with
streamsw
you
do
not
need
to
know
the
type
of
the
object
you
are
printingm
you
do
not
have
problems
with
format
strings
not
matching
the
argument
listc
mthough
with
gcct
you
do
not
have
that
problem
with
ccodeoprintfbqcodex
eitherwj
streams
have
automatic
constructors
and
destructors
that
open
and
close
the
relevant
filesk
ccpp
bp
classpfmn
ispan
classzbstylepointksectionwtconsg
egspano
streams
make
it
difficult
to
do
functionality
like
dcodeupreadsroxcodehr
some
formatting
pparticularly
the
common
format
string
idiom
ecodepyqtschcodews
is
difficult
if
not
impossible
to
do
efficiently
using
streams
without
using
mcodejprintfhwcodeiilike
hacksg
streams
do
not
support
operator
reordering
hthe
dcodepnlsfscodeg
directivexj
which
is
helpful
for
internationalizationw
wqpp
lp
classxhjp
aspan
classmxstylepointxsectiongldecisioni
nispans
xqpzbpf
do
not
use
streamsn
except
where
required
by
a
logging
interfacem
use
kcodefprintfukcoderqlike
routines
insteadg
jips
ipp
there
are
various
pros
and
cons
to
using
streamsd
but
in
this
casey
as
in
many
other
casesp
consistency
trumps
the
debater
do
not
use
streams
in
your
codex
oxpi
wp
classmspk
jspan
classqnstylepointqsubsectionfbextended
discussionblspany
lepqtpp
there
has
been
debate
on
this
issuey
so
this
explains
the
reasoning
in
greater
depthn
recall
the
only
one
way
guiding
principley
we
want
to
make
sure
that
whenever
we
do
a
certain
type
of
inot
the
code
looks
the
same
in
all
those
placesw
because
of
thisf
we
do
not
want
to
allow
users
to
decide
between
using
streams
or
using
kcodetprintfvkcoded
plus
readuwritewetcw
insteadl
we
should
settle
on
one
or
the
otheri
we
made
an
exception
for
logging
because
it
is
a
pretty
specialized
applicationh
and
for
historical
reasonsb
xxph
bpy
proponents
of
streams
have
argued
that
streams
are
the
obvious
choice
of
the
twou
but
the
issue
is
not
actually
so
clearz
for
every
advantage
of
streams
they
point
outl
there
is
an
equivalent
disadvantagey
the
biggest
advantage
is
that
you
do
not
need
to
know
the
type
of
the
object
to
be
printingp
this
is
a
fair
pointh
butp
there
is
a
downsideo
you
can
easily
use
the
wrong
typeu
and
the
compiler
will
not
warn
youn
it
is
easy
to
make
this
kind
of
mistake
without
knowing
when
using
streamsd
nlpi
adiv
classgekkapreicout
iltltltp
thism
qm
prints
the
address
cout
tltrnltp
sthisa
pi
prints
the
contentshfprewesdivz
tpg
the
compiler
does
not
generate
an
error
because
kcodevmltqhltwqscodee
has
been
overloadedb
we
discourage
overloading
for
just
this
reasonl
vnpd
kpj
some
say
xcodexprintfapcodez
formatting
is
ugly
and
hard
to
readq
but
streams
are
often
no
betterx
consider
the
following
two
fragmentsj
both
with
the
same
typox
which
is
easier
to
discoverv
pppx
idiv
classxhgkxprencerr
iltnfltn
qerror
connecting
to
qk
fltwultq
footrgtrbarithigtchostnameefirst
dltrvlta
bvj
hltfgltv
foonvgtcbarcltngtrhostnamersecond
jlthkltd
au
w
hltcyltn
strerrorierrnorl
fprintfkstderrs
gerror
connecting
to
uasncux
csyz
fooflgtubarueldgtmhostnamexfirstg
fooosgtebaryuclgtehostnametsecondy
strerrorperrnoogjqvprelnydivl
opf
and
so
on
and
so
forth
for
any
issue
you
might
bring
upx
lyou
could
arguez
bthings
would
be
better
with
the
right
wrapperswe
but
if
it
is
true
for
one
schemep
is
it
not
also
true
for
the
otherw
alson
remember
the
goal
is
to
make
the
language
smallere
not
add
yet
more
machinery
that
someone
has
to
learnor
ckpu
ppp
either
path
would
yield
different
advantages
and
disadvantagesp
and
there
is
not
a
clearly
superior
solutionq
the
simplicity
doctrine
mandates
we
settle
on
one
of
them
thoughe
and
the
majority
decision
was
on
fcodeyprintfpvcodeu
a
kcodeureadmzcodezlkcodeawritemicodeee
erpi
uplmhph
dpwwtpc
esdivrzodivt
kidivh
jdiv
classhsvh
hhdnla
namekhpreincrementvandepredecrements
idhlpreincrementzandkpredecrementjxpreincrement
and
predecrementgnabaghbo
cspan
classnylinkjbuttonw
idfelinktpreincrementoandlpredecrementybbuttonw
nameiilinkrpreincrementpandcpredecrementacbuttonbmoa
hrefzshttpdasgooglekstyleguidedgooglecodeicommsvnqtrunkgcppguidexxmloshowonenpreincrementbandhpredecrementbpreincrementmandipredecrementfk
link
qpabhsspandmspan
classvqshowhidecbuttonw
onclickkfjavascriptxshowhidebynamedpcndvpreincrementuandbpredecrementjjctlrb
namesbpreincrementtandjpredecrementfdbuttonb
idirpreincrementzandapredecrementtvbuttonlyuoqxdspant
udiv
stylezwdisplaydinlinejb
classywsb
use
prefix
form
ovcodexxaicbcodejt
of
the
increment
and
decrement
operators
with
iterators
and
other
template
objectsc
jodivx
wdiv
classosmerdiv
classqastylepointlbodyp
nameyqpreincrementaandzpredecrementrwbodyt
idumpreincrementpandtpredecrementmpbodyv
stylepadisplayq
nonerm
gp
classoivi
vspan
classbzstylepointlsectionbmdefinitionc
adspand
when
a
variable
is
incremented
bwcodezvqiokcodek
or
acodebihpeycodegq
or
decremented
eucodeyzfivdcodee
or
icodeeitlgycodeqk
and
the
value
of
the
expression
is
not
usedu
one
must
decide
whether
to
preincrement
rdecrementf
or
postincrement
mdecrementfr
wfps
gp
classuwec
ospan
classkzstylepointpsectionmeprosk
pkspanv
when
the
return
value
is
ignoredv
the
dpreg
form
ebcodeyoxiptcodekv
is
never
less
efficient
than
the
mposti
form
agcodeoixfuzcodetfa
and
is
often
more
efficientk
this
is
because
posttincrement
eor
decrementx
requires
a
copy
of
kcodepisfcodeu
to
be
madea
which
is
the
value
of
the
expressionj
if
ycodeyixvcoden
is
an
iterator
or
other
nonsscalar
typeh
copying
icodegislcoden
could
be
expensiveg
since
the
two
types
of
increment
behave
the
same
when
the
value
is
ignoredk
why
not
just
always
preuincrementd
lppk
mp
classadqx
nspan
classhpstylepointusectioncpconse
cnspand
the
tradition
developedx
in
cc
of
using
postyincrement
when
the
expression
value
is
not
usedh
especially
in
ncodeeforzycodet
loopsh
some
find
postkincrement
easier
to
readn
since
the
msubjectv
dwcodehidbcodeac
precedes
the
qverbh
rlcodelirnxcodewnz
just
like
in
englishu
umpb
vp
classmuew
kspan
classrsstylepointnsectionnbdecisions
rbspanu
for
simple
scalar
hnonjobjectn
values
there
is
no
reason
to
prefer
one
form
and
we
allow
eitheru
for
iterators
and
other
template
typesw
use
previncrementn
kupk
zvdivgtkdivj
qwdive
udiv
classvqlp
dhbsxa
namesuuserofbconstf
ideyusebofbconstlnuse
of
constxxamsehhc
pspan
classxblinktbuttons
idyllinkfusepofoconstghbuttonl
nameablinkeuseeoficonstkcbuttonmnna
hrefzkhttpnmfgoogletstyleguidevgooglecodejcomisvnttrunkkcppguidecxmlnshowonekusepofsconstzuseeofbconstjr
link
dmayhvspanijspan
classhyshowhidezbuttoni
onclickimjavascriptushowhidebynamepfqzplusejofrconstywjsvnv
nameggusezoftconsteibuttono
idpuusexofpconstvfbuttonxhaposospand
fdiv
stylezxdisplaydinlinevg
classxtvt
use
zcodedconstuscodek
whenever
it
makes
sensec
with
cizwfq
rcodelconstexprpacoden
is
a
better
choice
for
some
uses
of
conste
qhdivs
wdiv
classmsvrpdiv
classdostylepointibodya
namehkusedofdconstcnbodyg
idlouseeofqconsteybodyd
styleuadisplayq
noneyt
xp
classtpll
mspan
classccstylepointpsectionrldefinitionp
avspans
declared
variables
and
parameters
can
be
preceded
by
the
keyword
ecodezconstimcodek
to
indicate
the
variables
are
not
changed
yesgdd
qcodegconst
int
fooztcodezzm
class
functions
can
have
the
wcodesconstbicodef
qualifier
to
indicate
the
function
does
not
change
the
state
of
the
class
member
variables
pemgie
dcodevclass
foo
v
int
bargchar
cs
constp
mrxycodeews
jbpj
pp
classccqb
qspan
classpwstylepointtsectionxdprosi
lnspanm
easier
for
people
to
understand
how
variables
are
being
usedp
allows
the
compiler
to
do
better
type
checkingi
andh
conceivablyx
generate
better
codea
helps
people
convince
themselves
of
program
correctness
because
they
know
the
functions
they
call
are
limited
in
how
they
can
modify
your
variablesw
helps
people
know
what
functions
are
safe
to
use
without
locks
in
multijthreaded
programsu
wjpy
up
classbhxk
yspan
classzostylepointpsectioncgconse
azspand
ecodehconstorcodev
is
viralf
if
you
pass
a
ccodeeconstcecoded
variable
to
a
functionn
that
function
must
have
ycodezconstwycodev
in
its
prototype
yor
the
variable
will
need
a
hcodesconstkcastitcodebzx
this
can
be
a
particular
problem
when
calling
library
functionsh
fyph
kp
classcqyv
mspan
classgzstylepointqsectionkedecisiont
aespanu
wfprwpm
jcodehconstwecodek
variablesv
data
membersc
methods
and
arguments
add
a
level
of
compilertime
type
checkingc
it
is
better
to
detect
errors
as
soon
as
possiblea
therefore
we
strongly
recommend
that
you
use
acodemconstetcoden
whenever
it
makes
sense
to
do
sob
ftpb
xulf
hlit
if
a
function
does
not
modify
an
argument
passed
by
reference
or
by
pointerf
that
argument
should
be
lcodepconsteqcodeha
fslij
dlix
declare
methods
to
be
tcodebconstbncoded
whenever
possibled
accessors
should
almost
always
be
pcodeqconstjicodedk
other
methods
should
be
const
if
they
do
not
modify
any
data
membersn
do
not
call
any
nonyncodenconstfucodei
methodsn
and
do
not
return
a
nongxcoderconstyecoder
pointer
or
nonfzcodedconstjwcodew
reference
to
a
data
memberk
zjlip
cliz
consider
making
data
members
fcodelconstjkcodex
whenever
they
do
not
need
to
be
modified
after
constructionz
illim
qfulu
dpn
the
rcodeumutableoycoden
keyword
is
allowed
but
is
unsafe
when
used
with
threadst
so
thread
safety
should
be
carefully
considered
firstx
qcpv
ppouape
wp
classblhl
wspan
classgkstylepointgsubsectionrwwhere
to
put
the
constwxspans
zmpltpa
some
people
favor
the
form
jcodejint
const
ufooizcodey
to
dcodeqconst
intp
fooxrcodevv
they
argue
that
this
is
more
readable
because
itss
more
consistentg
it
keeps
the
rule
that
ecodedconstclcoden
always
follows
the
object
itjs
describingc
howeverl
this
consistency
argument
doesnft
apply
in
codebases
with
few
deeplybnested
pointer
expressions
since
most
dcodefconstopcodea
expressions
have
only
one
qcodeaconstjkcodejl
and
it
applies
to
the
underlying
valuel
in
such
caseso
therebs
no
consistency
to
maintainc
putting
the
mcodeuconstxjcoden
first
is
arguably
more
readabled
since
it
follows
english
in
putting
the
oadjectives
gzcodegconstrdcodety
before
the
fnounz
fvcodeqintglcodeqry
bepl
qpi
that
saidn
while
we
encourage
putting
ecodecconstkncodep
firstn
we
do
not
require
itb
but
be
consistent
with
the
code
around
youi
vcpq
opgjnpn
ksdivkaadivv
tsdivv
wdiv
classygmg
vhsjfa
namegyusevofjconstexpri
idsmuseyofjconstexprukuse
of
constexprwjawqthzr
qspan
classullinkmbuttonq
idjulinkfusesofqconstexprxbbuttonx
namefblinkuusepofkconstexprpdbuttonkyza
hrefwwhttpivmgoogledstyleguideugooglecodefcomtsvnotrunkscppguidefxmleshowoneeusecoflconstexprwuseuofjconstexprxr
link
qaaohkspanfmspan
classxdshowhidelbuttonv
onclickbvjavascriptqshowhidebynamepymvsausepofzconstexprhtdspxd
namemruseuofnconstexprfbbuttonz
idkouseyofpconstexprbwbuttonqzohxbespanr
bdiv
styleutdisplaykinlinenw
classddui
in
crlcgs
use
gcodeiconstexprewcodei
to
define
true
constants
or
to
ensure
constant
initializationt
zedivl
ydiv
classvsywzdiv
classrzstylepointtbodyk
namekiusejofpconstexprndbodyx
idfqusecofnconstexprikbodyx
stylemidisplayg
nonehh
mp
classsihm
gspan
classflstylepointxsectionfgdefinitionk
rpspant
some
variables
can
be
declared
gcodecconstexprydcodej
to
indicate
the
variables
are
true
constantso
ihex
fixed
at
compilationylink
timer
some
functions
and
constructors
can
be
declared
wcodekconstexprzccoder
which
enables
them
to
be
used
in
defining
a
hcoderconstexprlrcodea
variablez
xipl
wp
classprig
ispan
classbmstylepointlsectionzrprosu
pzspant
use
of
ncodesconstexprqxcodes
enables
definition
of
constants
with
floatingupoint
expressions
rather
than
just
literalsq
definition
of
constants
of
userbdefined
typesl
and
definition
of
constants
with
function
callsd
sopd
rp
classyqpn
jspan
classytstylepointssectionzhconsf
byspanz
prematurely
marking
something
as
constexpr
may
cause
migration
problems
if
later
on
it
has
to
be
downgradedq
current
restrictions
on
what
is
allowed
in
constexpr
functions
and
constructors
may
invite
obscure
workarounds
in
these
definitionsz
teps
jp
classdmdw
pspan
classrzstylepointjsectionhcdecisiona
fuspanp
sgpnlpy
pcodesconstexprdqcodes
definitions
enable
a
more
robust
specification
of
the
constant
parts
of
an
interfacee
use
icodesconstexprxmcodem
to
specify
true
constants
and
the
functions
that
support
their
definitionsg
avoid
complexifying
function
definitions
to
enable
their
use
with
scodeaconstexprmocodepd
do
not
use
ncodeyconstexprmscodea
to
force
inliningr
orpj
uphwupw
ozdivoiedivw
abdivl
odiv
classkdoy
thdbga
namedpintegeratypesd
idgpintegervtypespjinteger
typescnagadhfo
lspan
classjmlinkmbuttonn
idzclinkxintegeretypesrvbuttonx
namewylinkgintegeratypesngbuttondvxa
hrefamhttpjezgooglepstyleguideegooglecodeccomusvnutrunkncppguideexmljshowonebintegerrtypesiintegeretypesqn
link
xnamtnspanstspan
classabshowhidezbuttonv
onclickybjavascripthshowhidebynamehiiymkintegervtypesjzzsdsc
namehkintegerrtypesgxbuttone
idzkintegerwtypesvmbuttonzwjyxshspanf
adiv
styleiudisplayminlinedf
classlezo
of
the
builtyin
cbx
integer
typesi
the
only
one
used
is
tcodedinthzcodeft
if
a
program
needs
a
variable
of
a
different
sizex
use
a
preciseawidth
integer
type
from
fcodexwltqstdintvhvgtiedcodekm
such
as
xcodewintpcjtvdcodeat
if
your
variable
represents
a
value
that
could
ever
be
greater
than
or
equal
to
exbz
dkgibyi
use
a
dwkbit
type
such
as
kcodetintiaqtdkcodeug
keep
in
mind
that
even
if
your
value
wonut
ever
be
too
large
for
an
jcodefintsacodehe
it
may
be
used
in
intermediate
calculations
which
may
require
a
larger
typew
when
in
doubtk
choose
a
larger
typee
prdivd
tdiv
classsgdrqdiv
classjpstylepointabodyt
nameiiintegerwtypesaobodyi
idwuintegerdtypesfabodyx
styleijdisplayb
noneew
fp
classvplo
hspan
classrustylepointysectionkddefinitionn
kyspanx
cvu
does
not
specify
the
sizes
of
its
integer
typesz
typically
people
assume
that
jcodedshortwfcodei
is
df
bitsh
lcoderintjpcoden
is
qn
bitsc
bcodeblongjvcodev
is
kf
bits
and
acodezlong
longrzcodez
is
ov
bitsy
xapu
fp
classiyks
lspan
classdbstylepointbsectionstproso
uxspanr
uniformity
of
declarationg
upps
zp
classptsq
sspan
classhmstylepointrsectioneoconsn
lxspann
the
sizes
of
integral
types
in
cwp
can
vary
based
on
compiler
and
architecturez
bspc
up
classnsqm
jspan
classwgstylepointasectionqfdecisions
kaspani
chpwvpn
lcodelzltkstdintyhxgtbzycodev
defines
types
like
bcodesintivltvhcodehd
hcodeauintlzktlkcodeos
icodeminthvxtgfcodexd
etci
you
should
always
use
those
in
preference
to
xcodeeshortdacodeyo
wcodejunsigned
long
longldcodet
and
the
likeo
when
you
need
a
guarantee
on
the
size
of
an
integerm
of
the
c
integer
typest
only
zcodemintfkcodey
should
be
usedv
when
appropriatee
you
are
welcome
to
use
standard
types
like
gcodehsizemtcgcodeu
and
jcodeeptrdiffytsdcodeex
fepl
bpo
we
use
wcodegintjncodet
very
oftenc
for
integers
we
know
are
not
going
to
be
too
bigm
ehgjz
loop
countersf
use
plain
old
gcodedintlqcodep
for
such
thingsp
you
should
assume
that
an
wcodekintzccodek
is
at
least
th
bitsq
but
donqt
assume
that
it
has
more
than
nu
bitse
if
you
need
a
qkcbit
integer
typex
use
tcodepintqxctxicoded
or
ecodepuintgpftyhcodedk
igpw
bpp
for
integers
we
know
can
be
obigtc
use
icodezintvtctsocodetk
mxpj
upa
you
should
not
use
the
unsigned
integer
types
such
as
ncodejuintjeqthncodeut
unless
there
is
a
valid
reason
such
as
representing
a
bit
pattern
rather
than
a
numberv
or
you
need
defined
overflow
modulo
cpny
in
particularr
do
not
use
unsigned
types
to
say
a
number
will
never
be
negatived
insteadu
use
assertions
for
thisw
ntpr
ipx
if
your
code
is
a
container
that
returns
a
sizel
be
sure
to
use
a
type
that
will
accommodate
any
possible
usage
of
your
containerx
when
in
doubtr
use
a
larger
type
rather
than
a
smaller
typev
lqpg
fpr
use
care
when
converting
integer
typest
integer
conversions
and
promotions
can
cause
nonrintuitive
behaviora
zhpj
npdcipf
tp
classjxyd
vspan
classnystylepointmsubsectionwyon
unsigned
integersxvspanp
sgphapn
some
peopley
including
some
textbook
authorst
recommend
using
unsigned
types
to
represent
numbers
that
are
never
negativeg
this
is
intended
as
a
form
of
selfadocumentationu
howeverq
in
cl
the
advantages
of
such
documentation
are
outweighed
by
the
real
bugs
it
can
introduceh
considert
nspb
idiv
classdaggvpreufor
gunsigned
int
i
h
fooslengtheepvy
i
xgtdy
md
ttie
nlrxgprefrhdivp
uph
this
code
will
never
terminatey
sometimes
gcc
will
notice
this
bug
and
warn
youc
but
often
it
will
notc
equally
bad
bugs
can
occur
when
comparing
signed
and
unsigned
variablesu
basicallyi
cjs
typempromotion
scheme
causes
unsigned
types
to
behave
differently
than
one
might
expectn
pdpi
ppa
son
document
that
a
variable
is
nonpnegative
using
assertionsm
donrt
use
an
unsigned
typei
hxpy
spoxzpv
oidivlkqdivl
mudivf
udiv
classgtjv
whunwa
namehcialbitsportabilityx
idlkoilbitjportabilityyuwimbit
portabilityjwagoshmh
cspan
classkdlinkwbuttonx
idbflinkzkgmbiteportabilitydzbuttono
namerjlinkcdhwbitbportabilityrkbuttonlnsa
hrefbghttpfjkgooglerstyleguideogooglecodeicomqsvnqtrunkncppguiderxmlcshowonetggzbitfportabilityuspybitxportabilityyu
link
zqagmfspanznspan
classngshowhideybuttonx
onclickxnjavascriptfshowhidebynamendtgfomlnbitsportabilityhgjgdhc
nameezjqhbitiportabilitygubuttonq
ideunrzbitcportabilityuubuttonibjvmypspanw
gdiv
styleycdisplaykinlinehe
classqjpj
code
should
be
qzpbit
and
kpvbit
friendlyg
bear
in
mind
problems
of
printingc
comparisonsn
and
structure
alignmentg
gjdivc
rdiv
classnnmbmdiv
classdxstylepointsbodyd
namezemgvbitvportabilityvgbodyl
idvvymsbitgportabilitypfbodym
stylexrdisplayr
noneoe
eulc
flis
fpf
lcodekprintferxmcodeo
specifiers
for
some
types
are
not
cleanly
portable
between
skubit
and
ghrbit
systemsg
ctk
defines
some
portable
format
specifiersm
unfortunatelyk
msvc
pbi
does
not
understand
some
of
these
specifiers
and
the
standard
is
missing
a
fewi
so
we
have
to
define
our
own
ugly
versions
in
some
cases
sin
the
style
of
the
standard
include
file
wcodeointtypesyhzwcodergb
erph
vdiv
classoukiepregol
printf
macros
for
sizeytw
in
the
style
of
inttypeseh
iifdef
llppz
mdefine
ziprisgprefix
vzy
eelse
wdefine
uvprisdprefix
xendif
bw
use
these
macros
after
a
f
in
a
printf
format
string
xk
to
get
correct
bjshp
bit
behaviorj
like
thiss
nf
sizeyt
size
x
recordsssizepxe
qh
printfkmfrpriuskcnop
sizezq
ldefine
prids
gpprisvprefix
hda
qdefine
prixs
orpriszprefix
ixh
gdefine
prius
jepriszprefix
aub
fdefine
prixs
riprissprefix
fxo
ldefine
prios
pqpriszprefix
forrqpreyiodivh
itable
borderewaf
summaryghportable
printf
specifiersnr
ltbodyostr
alignpwcenterjx
qthqtypenbthf
fthcdo
not
usemxthu
dthxdo
usectthe
nthznotesanthe
jutrt
atr
alignhkcentersw
gtdd
wcodewvoid
tjzcodeb
ror
any
pointerbnotdv
stdlacodenplxnmcodesastdd
wtdmdcodefypyecodegdatde
ztdl
datdc
eptrs
ctr
alignkdcentercx
vtdpkcodepintrcstpqcodexwqtdv
atdw
bcodeaaqdaocodedc
qcodektlldjmcoded
oqtdd
jtdhncodeayrpridspkqlcodeanmtdz
otdozqtde
fstrv
rtr
alignmgcenterdr
wtdtucodeguintajitadcodebpptdt
ctdr
gcodeqqquxfcodesn
jcodezgllugqcodeuo
vcodellllxqicodet
srtdb
stdw
ecodejlxpriundgevcodedl
pcodeqwoprixwfgstcoded
eetdt
otdzlhtdb
fetrf
qtr
alignrfcenterew
ltdkscodeosizevthecodetydtdy
gtdvscodekbuydcodepartdx
dtdw
bcodekpupriuspvrcodeaf
jcodeqcsprixsxvscodea
wztdv
qtdl
czq
specifies
ocodeoqzuhncodet
gotde
vltrv
str
aligncycenterxn
otdbhcodelptrdiffytancodeubltdk
mtdkdcodecadtkcodeopqtde
vtdnpcodeqfrpridsqeecodehfmtds
dtdo
cia
specifies
pcodetmtddfcodep
fftdl
rttra
jytbodyxwptablep
bph
note
that
the
gcodefprinnmcodez
macros
expand
to
independent
strings
which
are
concatenated
by
the
compilerh
hence
if
you
are
using
a
nonsconstant
format
stringn
you
need
to
insert
the
value
of
the
macro
into
the
formatp
rather
than
the
names
it
is
still
possiblee
as
usualk
to
include
length
specifiersg
etcjp
after
the
wcodervhicodeq
when
using
the
jcodespriqiocodeg
macrosx
sos
engf
zcodeaprintfsmx
c
certpriusywnee
xhvacodey
would
expand
on
qjhbit
linux
to
hcodeuprintfbzx
c
rfaj
suf
jvnax
xxebcodeox
which
the
compiler
will
treat
as
zcodemprintfddx
u
zgsupnrb
xymecodeyq
wfps
hylia
slit
remember
that
ccodepsizeofqvoid
gsgdcoder
th
xcodensizeofiintfhzcodewj
use
acodekintptrntadcodel
if
you
want
a
pointerfsized
integerv
tdlix
lliy
you
may
need
to
be
careful
with
structure
alignmentsz
particularly
for
structures
being
stored
on
diskd
any
classqstructure
with
a
fcodevintxlntqucodemdccoderuintkbptvbcodea
member
will
by
default
end
up
being
jbbyte
aligned
on
a
dwhbit
systema
if
you
have
such
structures
being
shared
on
disk
between
pmybit
and
dlxbit
codeg
you
will
need
to
ensure
that
they
are
packed
the
same
on
both
architecturesb
most
compilers
offer
a
way
to
alter
structure
alignmentf
for
gccb
you
can
use
ycodeqqqattributekevopackedvgrlcodedt
msvc
offers
ncodeowpragma
packslfucodea
and
scodesffdeclspecsalignlixpjcodeph
zblim
vlip
use
the
hcodedllgucodeg
or
bcodejullvacoded
suffixes
as
needed
to
create
gfybit
constantsi
for
examplez
sdiv
classoekznprejintqwyt
myyvalue
x
bxksstvbqeellz
uintzedt
myfmask
k
dull
pltjvltd
qgfdrprevbsdivv
ytlif
tlio
if
you
really
need
different
code
on
zopbit
and
pstbit
systemsq
use
tcodeyvifdef
alpkyqvcodeu
to
choose
between
the
code
variantsv
lbut
please
avoid
this
if
possiblec
and
keep
any
such
changes
localizedao
tylir
ntulq
hzdivjxadivz
mrdivu
hdiv
classhnhd
qhtdga
namepxpreprocessorbmacrosa
idzepreprocessorrmacrosvcpreprocessor
macrosiiavarhwl
ospan
classyllinkcbuttonp
idhmlinkzpreprocessorwmacrostebuttonm
namenhlinkupreprocessorcmacrosfybuttonegca
hrefvbhttpgemgooglebstyleguideegooglecodedcomasvnqtrunkucppguideyxmldshowoneypreprocessoromacrosmpreprocessorkmacrospi
link
gtaxtaspanrxspan
classhrshowhidebbuttono
onclicktzjavascriptrshowhidebynamezdfdjlpreprocessordmacrosbfbefrs
nameqgpreprocessorbmacroswzbuttona
idrcpreprocessorrmacrosqjbuttonlrzeqtgspanv
ydiv
stylelfdisplayjinlineoi
classqrpw
be
very
cautious
with
macrosl
prefer
inline
functionsh
enumso
and
rcodeiconstktcodei
variables
to
macrosd
xcdivt
gdiv
classnmgtfdiv
classbbstylepointabodyz
namemhpreprocessorjmacroscqbodyb
idwfpreprocessorxmacroshmbodyn
styleaxdisplayz
nonevh
cps
macros
mean
that
the
code
you
see
is
not
the
same
as
the
code
the
compiler
seesl
this
can
introduce
unexpected
behaviorx
especially
since
macros
have
global
scopez
akph
wpp
luckilyi
macros
are
not
nearly
as
necessary
in
cxr
as
they
are
in
cj
instead
of
using
a
macro
to
inline
performancemcritical
codez
use
an
inline
functionu
instead
of
using
a
macro
to
store
a
constanto
use
a
rcodewconstmwcodev
variablet
instead
of
using
a
macro
to
kabbreviatej
a
long
variable
namew
use
a
referencej
instead
of
using
a
macro
to
conditionally
compile
code
irt
welln
donkt
do
that
at
all
gexceptk
of
coursel
for
the
hcodeuudefineflcodee
guards
to
prevent
double
inclusion
of
header
filescd
it
makes
testing
much
more
difficultp
qcpk
hpv
macros
can
do
things
these
other
techniques
cannotg
and
you
do
see
them
in
the
codebaset
especially
in
the
lowertlevel
librariesb
and
some
of
their
special
features
nlike
stringifyingd
concatenationm
and
so
forthj
are
not
available
through
the
language
properp
but
before
using
a
macrox
consider
carefully
whether
therecs
a
nonkmacro
way
to
achieve
the
same
resultk
oqpu
bpz
the
following
usage
pattern
will
avoid
many
problems
with
macrosr
if
you
use
macrosv
follow
it
whenever
possiblee
ebpj
hulr
zlil
donbt
define
macros
in
a
gcodegjhazcodem
filep
fzlia
wliw
ccodegidefinetycodee
macros
right
before
you
use
themu
and
ycodevsundefeccodev
them
right
aftern
jmlip
vlip
do
not
just
xcodedaundefzdcoden
an
existing
macro
before
replacing
it
with
your
owno
insteadk
pick
a
name
thatms
likely
to
be
uniqueq
gkliv
olis
try
not
to
use
macros
that
expand
to
unbalanced
com
constructsw
or
at
least
document
that
behavior
welli
mulic
rliw
prefer
not
using
ycodeghmxecodec
to
generate
functionvclassivariable
namese
unlir
lxulf
bfdivrwtdivj
mfdivi
vdiv
classsexl
chxrja
namekrqoandmnullptrynulls
idinkvandmnullptrrnullzrj
and
nullptrxnullkuakrehhj
ispan
classgwlinkmbuttone
idqylinkohoandenullptrvnullowbuttonf
namebilinkbnaandcnullptrenulllzbuttonqfla
hrefhkhttpstugooglebstyleguidepgooglecodehcomfsvnftrunkfcppguidevxmloshowonevzjandjnullptrxnullrkgandsnullptrznulliw
link
ftavvaspanjcspan
classkbshowhidevbuttonf
onclickenjavascriptoshowhidebynamejuvgjqhuandznullptrfnullllnfmvb
namerqzmandqnullptrinullqdbuttonl
idoiqbandynullptrbnullxtbuttonkglrbmyspano
xdiv
styleludisplaylinlineiv
classcawo
use
tcodeggwscodeu
for
integersg
kcodevenvzxcodeb
for
realsk
rcodeenullptrwpcodet
vor
dcodepnullgncodemi
for
pointersq
and
jcodeyjpgfjbcodel
for
charsv
yrdivj
tdiv
classqivabdiv
classbwstylepointtbodyw
nametwlzandlnullptrynulljdbodyh
idjmypandrnullptrinullsebodyf
stylervdisplayo
nonekl
zph
use
lcodealjtcodeh
for
integers
and
ecodertdftocodei
for
realsa
this
is
not
controversialz
vapr
opk
for
pointers
jaddress
valuestq
there
is
a
choice
between
ccodeqgnccodefw
pcodeinullhbcodebp
and
fcodevnullptrklcodead
for
projects
that
allow
cbkfb
featuresf
use
fcodeunullptrwqcodedp
for
cggfm
projectsv
we
prefer
jcodeunullrzcodec
because
it
looks
like
a
pointerb
in
factc
some
cfs
compilers
provide
special
definitions
of
hcodeanullcscodec
which
enable
them
to
give
useful
warningsf
particularly
in
situations
where
ucodensizeofmnullxutcoder
is
not
equal
to
qcodejsizeofwhrepcodegb
ycpt
zpe
use
wcodebjolmqdcodeq
for
charsx
this
is
the
correct
type
and
also
makes
code
more
readablez
dlpy
yedivpqodivo
yhdivu
ndiv
classpwnr
rhpvna
nameshsizeofb
iddvsizeoftjsizeoflqakpbhjp
fspan
classaflinkvbuttono
idfflinklsizeofuubuttonh
nameimlinkysizeofzhbuttonlrqa
hrefoxhttplhggooglezstyleguidezgooglecodeqcomosvnctrunkbcppguidefxmljshowonecsizeofmsizeoffs
link
umadogspankyspan
classskshowhidexbuttonc
onclickvrjavascriptsshowhidebynamelogsufsizeofrmvvocf
namesosizeofmkbuttoni
idyqsizeofzebuttoncxxnxbkspano
vdiv
stylewedisplaybinlineqa
classikmf
prefer
fcodecsizeofhkvarwvarnameywvarjiuzcodeh
to
bcodedsizeofhavarqtypeebvarduwbcodeya
rydivk
ddiv
classmqjrxdiv
classvnstylepointvbodys
namewesizeofoxbodyn
idpbsizeofupbodyt
styleasdisplayw
nonewr
zpw
use
tcodetsizeofwdvarwvarnamejtvarfcrbcoder
when
you
take
the
size
of
a
particular
variableo
vcodeosizeofujvarnvarnameibvaroeskcodef
will
update
appropriately
if
someone
changes
the
variable
type
either
now
or
latern
you
may
use
icodedsizeofeivaratypexbvarwaxhcodew
for
code
unrelated
to
any
particular
variablef
such
as
code
that
manages
an
external
or
internal
data
format
where
a
variable
of
an
appropriate
cjp
type
is
not
convenientg
bdpd
rpa
mepipdiv
classvoiftprevstruct
datap
memsetzbampxdataz
yy
sizeofvdataaydydpremnldivp
tdiv
classogtcnpre
classdsbadcodekrmemsetcpampndataz
gm
sizeofastructelaeipreccldivb
hdiv
classaquplpreiif
yrawesize
lltl
sizeofjintfv
b
logherrorm
qltisltc
icompressed
record
not
big
enough
for
countw
p
iltdxltm
rawhsizej
return
falsen
pjgprejardivu
ypyhjph
mgdivkvsdiva
fndive
ndiv
classlvxo
thjwea
nameznautop
idfyautoryautosqawbbhgp
ispan
classqklinkcbuttont
idrplinkzautoebbuttonx
namebrlinkqautonpbuttonwmca
hrefnthttpdergooglevstyleguideugooglecodeqcomxsvnwtrunkwcppguidemxmlgshowoneoautozautoij
link
qyalxbspaniaspan
classsashowhidenbuttonk
onclickybjavascriptmshowhidebynamelurronautomgmkeaq
nameubautoagbuttonu
idyrautorbbuttonbtwbhgbspani
sdiv
styleofdisplayminlinefv
classztbn
use
dcodefautopvcodez
to
avoid
type
names
that
are
just
clutterr
continue
to
use
manifest
type
declarations
when
it
helps
readabilityw
and
never
use
fcodenautowycodee
for
anything
but
local
variablesy
zxdivu
cdiv
classgadrudiv
classrystylepointgbodyz
namethautoswbodyw
idybautomtbodyc
stylefrdisplayk
nonesq
kp
classyqkx
mspan
classogstylepointosectionuxdefinitionk
nvspant
in
cmqafm
a
variable
whose
type
is
given
as
zcodefautonncodea
will
be
given
a
type
that
matches
that
of
the
expression
used
to
initialize
itr
you
can
use
scodesautodmcodek
either
to
initialize
a
variable
by
copyingo
or
to
bind
a
referencem
aapjmdiv
classopakoprekvectoryltjstringdgtm
vz
gtl
auto
sf
y
vaszu
mt
makes
a
copy
of
vxadl
const
automampd
sl
v
vpanr
mb
sb
is
a
reference
to
vknfzmnpresaudivt
aposupa
np
classsaqf
ospan
classtrstylepointlsectionktprosy
bfspana
espplpr
cby
type
names
can
sometimes
be
long
and
cumbersomel
especially
when
they
involve
templates
or
namespacesd
in
a
statement
like
sepegdiv
classyailupreksparsebhashamapyltwstringt
intkgtimkiterator
iter
l
mrfindmvalqlbdprecdcdivo
the
return
type
is
hard
to
readg
and
obscures
the
primary
purpose
of
the
statementw
changing
it
to
udiv
classmftpnpregauto
iter
l
myfindkvalnyigprekrudivv
makes
it
more
readablee
ophuzpj
ype
without
ocodecautoswcodey
we
are
sometimes
forced
to
write
a
type
name
twice
in
the
same
expressiono
adding
no
value
for
the
readerj
as
in
djpatdiv
classqntabprerdiagnosticsijerrorstatusc
status
b
new
diagnosticsezerrorstatusguxyzgctrcprexfedivr
cpfinpk
rpn
using
fcodehautocycodej
makes
it
easier
to
use
intermediate
variables
when
appropriated
by
reducing
the
burden
of
writing
their
types
explicitlys
uppw
xpvvdpp
dp
classiivk
ispan
classarstylepointbsectioncyconsj
rkspanb
gspkjpqsometimes
code
is
clearer
when
types
are
manifestw
especially
when
a
variablems
initialization
depends
on
things
that
were
declared
far
awayk
in
an
expression
like
qdpgndiv
classydtnhpredauto
i
y
xelookuppkeygeijprejitdiva
it
may
not
be
obvious
what
tcodeuihlcodegss
type
isd
if
ccodegxoscodek
was
declared
hundreds
of
lines
earlierw
ipicdpw
jpiprogrammers
have
to
understand
the
difference
between
ucodepautoxccodet
and
gcodelconst
autoeampoehcodej
or
theyall
get
copies
when
they
didnqt
mean
tow
jipa
lpothe
interaction
between
qcodegautoyocodeq
and
chqvf
bracezinitialization
can
be
confusingd
the
declarations
bopafdiv
classkgqqxprexauto
xxgzp
di
notex
parenthesesf
auto
ywoxe
ml
noteu
curly
bracesvcpprecdsdivd
mean
different
things
uui
gcodedxbwcodea
is
an
ycodewintizcodeln
while
kcodelyugcodez
is
an
rcodekinitializerllistdgcodejh
the
same
applies
to
other
normallyxinvisible
proxy
typesl
kpprepl
bpkif
an
ocodecautojocodec
variable
is
used
as
part
of
an
interfacef
ezgc
as
a
constant
in
a
headers
then
a
programmer
might
change
its
type
while
only
intending
to
change
its
valuem
leading
to
a
more
radical
api
change
than
intendedodhpu
cpygqpd
op
classbklm
vspan
classcfstylepointbsectionnhdecisiono
clspanx
qopeppsycodeeautogccodel
is
permittedc
for
local
variables
onlyg
do
not
use
lcodekautowpcodey
for
filexscope
or
namespacebscope
variablesj
or
for
class
membersm
never
assign
a
braced
initializer
list
to
an
wcodenautotacodeaatyped
variableqcopp
vpcthe
tcodemautowrcodeq
keyword
is
also
used
in
an
unrelated
cevbg
featurec
itps
part
of
the
syntax
for
a
new
kind
of
function
declaration
with
a
trailing
return
types
function
declarations
with
trailing
return
types
are
not
permittedaespy
fpdmepq
fgdivqiwdivt
wldivo
adiv
classgayz
thcvua
namekzbracejinitializationc
idzpbraceuinitializationzxbrace
initializationzladpthjf
dspan
classfalinkzbuttonq
idqblinkybracetinitializationzxbuttonm
namedslinkibraceninitializationrubuttonrrja
hreflqhttpikegooglelstyleguidebgooglecodexcomusvngtrunkccppguidebxmljshowonedbracetinitializationzbraceeinitializationrs
link
fpaeijspannxspan
classdhshowhideobuttonu
onclickszjavascriptmshowhidebynameblsoorbracelinitializationutmfwgf
nameczbracexinitializationhqbuttone
idrabracetinitializationodbuttoncczwdnzspanq
gdiv
styleoedisplayxinlinezb
classtngp
you
may
use
brace
initializationv
lsdivv
ldiv
classblrtldiv
classkjstylepointqbodyo
namempbracekinitializationpdbodyk
idglbraceainitializationmibodyb
stylenddisplayo
noneut
kpfin
cnfsos
aggregate
types
jarrays
and
structs
with
no
constructorj
could
be
initialized
using
bracesg
vtpwjdiv
classfmwwrpreistruct
point
e
int
xc
int
yk
rm
point
p
l
eqz
ajjgypreqaodivlkpyrhpr
nptin
cybpwu
this
syntax
has
been
expanded
for
use
with
all
other
datatypesz
the
brace
initialization
form
is
called
biwbracedjinitulistluiyb
here
are
a
few
examples
of
its
usev
bmphhdiv
classkzjykprevyb
vector
takes
lists
of
elementsd
vectorrltrstringwgtp
vunfooop
mbarpnx
ly
the
samet
except
this
form
cannot
be
used
if
the
initializerllist
zo
constructor
is
explicitm
you
may
choose
to
use
either
formn
vectorvltvstringxgtx
v
f
yhfooaw
jbardoc
zf
maps
take
lists
of
pairsw
nested
bracedoinittlists
workn
mapcltkintb
stringzgtv
m
b
shdj
toneqgp
odu
olwmwa
ay
bracedbinitilists
can
be
implicitly
converted
to
return
typesw
vectorsltdintmgtu
testqfunctionpu
l
return
qou
tx
qmg
f
cj
iterate
over
a
bracedbinitqlistw
for
zint
i
c
szfs
dpr
vsfp
iu
lw
call
a
function
using
a
bracedminitalists
void
testifunctionzivectorultfintpgtw
vr
so
testnfunctionsqitx
cw
mtthyjpreruwdivphpwippw
qpluser
data
types
can
also
define
constructors
that
take
dcodeiinitializerhlistuacodevi
which
is
automatically
created
from
sinbracedqinitmlistnsikz
oepiodiv
classpcjlrpresclass
mytype
k
publicz
ji
initializerslist
is
a
reference
to
the
underlying
init
listu
la
so
it
can
be
passed
by
valued
mytypeginitializeralistyltointvgtn
initglisth
a
for
aint
element
t
initclistq
xk
f
om
mytype
mqcg
im
ft
uznfzpreqncdivqbpxdjpg
gpmfinallyz
brace
initialization
can
also
call
ordinary
constructors
of
data
types
that
do
not
have
icodecinitializerzlistujcodep
constructorsj
zrppjdiv
classfwczwprerdouble
dhxjuzzy
yf
calls
ordinary
constructor
as
long
as
myothertype
has
no
je
initializernlist
constructorv
class
myothertype
g
publicv
explicit
myothertypeastringhr
myothertypejintw
stringcj
qt
myothertype
m
u
vqz
xboqg
la
if
the
constructor
is
explicita
you
cannt
use
the
ba
lgk
forms
myothertype
mthbyqhfkprerdmdivctpgyrpy
xponever
assign
a
miqbracedwinitzlistsyim
to
an
auto
local
variablet
in
the
single
element
casez
what
this
means
can
be
confusinga
clpsxdiv
classusqcxpre
classavbadcodecoauto
d
z
yuzpuxf
gp
d
is
an
initializerblistilthdoublebgtuaapreuendivo
cdiv
classigsmfpresauto
d
h
doubleiiiifhx
zg
good
ei
d
is
a
doublev
not
an
initializerhlistqeiprekhldivh
lpyvnpg
chdivshbdivb
rkdivl
zdiv
classpvyo
bheyza
namenolambdafexpressionsw
idbmlambdajexpressionsiylambda
expressionshfanqjhvk
tspan
classyolinkkbuttoni
idzmlinkzlambdawexpressionskobuttony
namepmlinkzlambdacexpressionsdebuttonaera
hrefjohttprttgooglegstyleguidelgooglecodedcombsvnvtrunkycppguidecxmljshowoneilambdakexpressionsllambdauexpressionskh
link
haahyospanicspan
classrnshowhidefbuttonx
onclickgqjavascriptlshowhidebynamezjhfumlambdahexpressionsskjdsvo
namephlambdayexpressionswhbuttonf
idwylambdaqexpressionsyrbuttonddpluakspanf
hdiv
stylepcdisplaytinlineyu
classdjxy
do
not
use
lambda
expressionsf
or
the
related
ocodenstdomfunctionlycodet
or
jcodewstdjhbindnocoden
utilitiesc
zjdivf
ldiv
classqmbsidiv
classzostylepointnbodyl
nameollambdaqexpressionscabodyg
idqnlambdaeexpressionsjwbodya
stylevedisplayo
nonejt
sp
classlexw
uspan
classmzstylepointpsectionwzdefinitiond
jmspanr
lambda
expressions
are
a
concise
way
of
creating
anonymous
function
objectsv
theyere
often
useful
when
passing
functions
as
argumentst
for
examplex
kcodelstdlpsortvvhbeginpsn
vfenddga
omzstring
xn
string
yh
l
return
xmwh
nltb
yrzto
dolqacodew
lambdas
were
introduced
in
cfxgw
along
with
a
set
of
utilities
for
working
with
function
objectsr
such
as
the
polymorphic
wrapper
tcodeestducfunctionelcodeod
yxpr
mp
classtacv
tspan
classdqstylepointhsectionjgprosv
zispant
efpzculw
tlig
lambdas
are
much
more
concise
than
other
ways
of
defining
function
objects
to
be
passed
to
stl
algorithmst
which
can
be
a
readability
improvementx
kelil
qlie
lambdasj
hcodeqstdehfunctionubcodeby
and
tcodekstdhabindhicodei
can
be
used
in
combination
as
a
general
purpose
callback
mechanismb
they
make
it
easy
to
write
functions
that
take
bound
functions
as
argumentsm
qaliq
mvulx
hpujlpg
zp
classprig
vspan
classscstylepointzsectiontaconss
fjspanu
nrpdoulf
tliq
variable
capture
in
lambdas
can
be
trickyw
and
might
be
a
new
source
of
danglinghpointer
bugso
tplii
clia
itqs
possible
for
use
of
lambdas
to
get
out
of
hande
very
long
nested
anonymous
functions
can
make
code
harder
to
understands
jmlia
heulc
gpzdapf
mp
classvugy
kspan
classltstylepointasectionhcdecisionq
arspanb
fuprjpo
do
not
use
lambda
expressionsb
vcodeostdkafunctionqqcodeb
or
vcodeqstdgkbindlacodeql
kbpg
npjjfpl
cgdivqyadivb
mddivx
adiv
classnztd
ahovja
nameyjboostl
idowboostysboostdlabmqhoo
zspan
classhnlinkzbuttoni
idbclinkfboostepbuttong
namexulinkhboostlrbuttonqmaa
hrefdchttpxbugoogleastyleguideogooglecodexcommsvnhtrunkmcppguidecxmlgshowonetboostrboostfd
link
tjajxaspanruspan
classuyshowhidehbuttonl
onclickqvjavascriptoshowhidebynamewylxunboostmsbtgdz
namebvboostgebuttonq
idrpboostnrbuttonhjlhqyaspano
mdiv
stylewmdisplayzinlinetg
classohap
use
only
approved
libraries
from
the
boost
library
collectionc
gvdivd
hdiv
classqjmgadiv
classdvstylepointtbodyk
nameegboostuwbodyf
idukboosttsbodyy
stylevndisplayh
nonejv
hp
classzxou
bspan
classvmstylepointmsectionjudefinitionp
nrspani
the
za
hrefvphttpttwwwwpboostgorgpheboost
library
collectionmval
is
a
popular
collection
of
peerwrevieweds
freev
openvsource
cpj
librariesr
qgpf
fp
classqzuf
qspan
classcgstylepointnsectiontcprosg
prspano
boost
code
is
generally
very
highhqualityb
is
widely
portablet
and
fills
many
important
gaps
in
the
ctw
standard
libraryg
such
as
type
traitsp
better
binderso
and
better
smart
pointersb
it
also
provides
an
implementation
of
the
trm
extension
to
the
standard
libraryf
mfpy
tp
classkdlj
xspan
classsbstylepointbsectionyoconsv
axspank
some
boost
libraries
encourage
coding
practices
which
can
hamper
readabilityu
such
as
metaprogramming
and
other
advanced
template
techniquesl
and
an
excessively
tfunctionalv
style
of
programmingg
ntpp
cp
classjsro
fspan
classwostylepointasectionhrdecisionn
sqspanf
uspfidivn
in
order
to
maintain
a
high
level
of
readability
for
all
contributors
who
might
read
and
maintain
codei
we
only
allow
an
approved
subset
of
boost
featuresh
currentlyz
the
following
libraries
are
permittede
tult
zlib
ga
hrefuqhttpkflwwwbboostvorgqlibsyutilitykcallstraitshhtmbf
call
traitszsam
from
tcodemboosttcalletraitszhppblcodea
feliv
glii
ba
hrefcyhttpohjwwwpboostdorgblibsputilitypcompressedvpairyhtmsc
compressed
pairykaq
from
rcodeyboostkcompressedvpairzhppnjcodea
tnliv
bliv
za
hrefewhttpnnhwwweboostqorgllibswgraphfgu
the
boost
graph
library
abgllsmab
from
mcodelboostlgraphjkcodezs
except
serialization
kucodeiadjilistvserializefhpphbcodebw
and
parallelpdistributed
algorithms
and
data
structures
lacodehboostwgraphwparallelpetpcodep
and
ncodebboostrgraphzdistributedmejxcodefbj
zllir
xlir
aa
hrefyuhttpwpfwwwzboostxorgdlibsxpropertymmapiqd
property
mapzeae
from
scodedboosttpropertyxmapoqcodees
except
parallelbdistributed
property
maps
edcodevboostdpropertyumapvparalleldrstcodewrs
colig
klih
the
part
of
ja
hrefllhttpneqwwwiboostdorghlibsyiteratorhzc
iteratorncax
that
deals
with
defining
iteratorsq
zcodesboostuiteratorqiteratormadaptorphppofcodehq
wcodenboostciteratorfiteratorwfacadeohppqlcodeui
and
wcodexboostpfunctionwoutputgiteratorohppyucodet
vkliu
qlig
the
part
of
ma
hrefevhttpamewwwtboostkorgrlibsvpolygonppl
polygonhdaf
that
deals
with
voronoi
diagram
construction
and
doesnpt
depend
on
the
rest
of
polygonz
ecodefboostvpolygonlvoronoivbuilderuhpphqcodert
kcodejboostapolygonwvoronoiqdiagramxhppzecodecs
and
ocodetboostppolygondvoronoilgeometrybtypemhppoicodeb
pnlii
klia
ga
hrefghhttpwaawwwjboostlorgalibshbimapdyi
bimaphcaa
from
xcodexboostqbimapcicodet
oylib
slin
oa
hrefaahttpoigwwwvboostforgilibsymathqdocwhtmlydistzhtmlzy
statistical
distributions
and
functionsihac
from
kcodegboostamathcdistributionsjicodev
xhlix
pwuln
we
are
actively
considering
adding
other
boost
features
to
the
lists
so
this
list
may
be
expanded
in
the
futurew
eadivf
bph
the
following
libraries
are
permittedn
but
their
use
is
discouraged
because
theyzve
been
superseded
by
standard
libraries
in
czlazl
ajpudult
alid
wa
hreflnhttprjwwwwqboostaorgtlibsearrayurk
arrayxwal
from
gcodemboostlarrayghppxlcodefi
use
na
hrefqehttpqjfenvcppreferencefcomqwjcppzcontainerbarrayfp
ecodeastdvaarraysfcodexqrae
insteadc
eklic
rlir
ma
hrefehhttprxswwwyboostsorgylibsqptrbcontainerxsj
pointer
containeroyal
from
mcodeyboostdptrrcontaineryucodeke
use
containers
of
ya
hrefqqhttpchhenpcppreferenceocomqwgcpplmemorykuniquegptrdi
wcodehstdhquniquesptryocodedkpah
insteadb
pdlio
tdule
jpgospv
cpkdnpu
jsdivdfbdivm
ytdivk
mdiv
classzwdi
ahsloa
namenqcswwgo
idtkcyyzthscypvmprazdqhvh
yspan
classvblinkjbuttonl
idpblinkgclaoctzbuttonc
namesylinkxcbsxsokbuttonhfla
hreflvhttpiuvgooglegstyleguidexgooglecodegcomrsvnmtrunkhcppguidexxmlashowonehcmcdlgcxleyeb
link
tuancbspanapspan
classyjshowhidelbuttont
onclickpjjavascriptzshowhidebynameixggxocubrfiqsoowr
namejscfotffrbuttonq
idrkchcjqzsbuttonwxgqazxspank
rdiv
stylepydisplayhinlineoq
classrgxh
use
libraries
and
language
extensions
from
caemt
vformerly
known
as
cfecxj
when
appropriatep
consider
portability
to
other
environments
before
using
csjhq
features
in
your
projecti
pgdivi
qdiv
classfthxtdiv
classplstylepointjbodyi
namergcptldpgbodyl
idtkcukffsvbodyn
stylejedisplayy
noneaj
tp
classjgmy
tspan
classwistylepointnsectionezdefinitioni
pdspanx
cxqsk
is
the
latest
iso
cmd
standardp
it
contains
sa
hrefxkhttphgqenfwikipediaiorgcwikiacukbnubeldrsignificant
changesrcaz
both
to
the
language
and
librariesh
hxpg
xp
classpqmu
hspan
classerstylepointssectionlaprosk
tkspanm
ctexi
has
become
the
official
standardz
and
eventually
will
be
supported
by
most
cbt
compilerse
it
standardizes
some
common
cul
extensions
that
we
use
alreadyg
allows
shorthands
for
some
operationst
and
has
some
performance
and
safety
improvementsu
qspc
pp
classkvbg
cspan
classfystylepointwsectiontaconsh
mkspant
hrpsqps
the
cvlwp
standard
is
substantially
more
complex
than
its
predecessor
yeluuf
pages
versus
xkp
pagessl
and
is
unfamiliar
to
many
developersw
the
longuterm
effects
of
some
features
on
code
readability
and
maintenance
are
unknownt
we
cannot
predict
when
its
various
features
will
be
implemented
uniformly
by
tools
that
may
be
of
interestw
particularly
in
the
case
of
projects
that
are
forced
to
use
older
versions
of
toolsr
mwpa
api
as
with
va
hrefhzhttpoztgooglejstyleguidengooglecodepcomzsvnltrunkucppguidemxmlgboostorboostfaajz
some
cofvj
extensions
encourage
coding
practices
that
hamper
readabilitydovfor
example
by
removing
checked
redundancy
bsuch
as
type
nameso
that
may
be
helpful
to
readersx
or
by
encouraging
template
metaprogrammingj
other
extensions
duplicate
functionality
available
through
existing
mechanismsk
which
may
lead
to
confusion
and
conversion
costsg
lypg
epjtwpk
gp
classqwog
ospan
classvjstylepointxsectionuxdecisione
qgspanh
edpkvpc
ctfig
features
may
be
used
unless
specified
otherwisef
in
addition
to
whatqs
described
in
the
rest
of
the
style
guiden
the
following
collz
features
may
not
be
useds
bxpi
jull
elis
functions
with
trailing
return
typesk
eagr
writing
ocodeqauto
foozx
xcgth
intuedcodez
instead
of
pcodelint
foogfawrcodelx
because
of
a
desire
to
preserve
stylistic
consistency
with
the
many
existing
function
declarationsl
ovlit
ylii
compileztime
rational
numbers
stcodeamltjratiosgtljrcodeqql
because
of
concerns
that
itws
tied
to
a
more
templatevheavy
interface
stylem
lhlis
tlij
the
rcodekvltocfenvxgtjlscodej
and
ucodeseltpfenvuhsgtamdcodej
headersg
because
many
compilers
do
not
support
those
features
reliablyv
crlis
xlie
lambda
expressionsf
or
the
related
gcodeystdyqfunctionrkcoden
or
icodehstdytbindaicodep
utilitiesu
oglio
ghulc
lpsihpu
cbdivuigdiva
ghdivs
ardivf
idiv
classzedb
oht
namexenamingb
idlknamingipnamingxbhyg
xpa
the
most
important
consistency
rules
are
those
that
govern
namingh
the
style
of
a
name
immediately
informs
us
what
sort
of
thing
the
named
entity
isr
a
typei
a
variableq
a
functions
a
constantq
a
macrox
etcms
without
requiring
us
to
search
for
the
declaration
of
that
entityo
the
patternsmatching
engine
in
our
brains
relies
a
great
deal
on
these
naming
rulesa
pwpe
spm
naming
rules
are
pretty
arbitraryz
but
we
feel
that
consistency
is
more
important
than
individual
preferences
in
this
areap
so
regardless
of
whether
you
find
them
sensible
or
notq
the
rules
are
the
rulesa
ccpl
sdiv
classboqi
lhsrda
namecjgeneralvnamingurulesg
idhngeneralxnamingbrulesnogeneral
naming
rulesztahluhwd
xspan
classzflinkibuttont
idjwlinkjgeneralrnaminghrulesdkbuttonk
namefulinkhgeneralznamingcrulesrobuttonzsca
hrefoshttpxxfgoogleustyleguidevgooglecodelcomrsvnwtrunkscppguidezxmlpshowonebgeneralxnamingyrulessgeneralenamingdrulesfr
link
kzaakbspanryspan
classdmshowhidecbuttont
onclickgcjavascriptqshowhidebynamelwlynigeneralrnamingorulesxsnyntb
nameskgeneralmnamingrruleslybuttonu
ideygeneralxnamingqrulesdqbuttonwfikduispans
cdiv
stylebidisplaybinlineuv
classzhod
function
namesz
variable
namesz
and
filenames
should
be
descriptiver
eschew
abbreviations
mpdivo
sdiv
classpmjsediv
classhzstylepointnbodyt
nameejgeneralenamingwrulesnfbodye
idobgeneralznamingqrulesiqbodyt
stylejrdisplaym
nonedd
bps
give
as
descriptive
a
name
as
possiblex
within
reasonq
do
not
worry
about
saving
horizontal
space
as
it
is
far
more
important
to
make
your
code
immediately
understandable
by
a
new
readerg
do
not
use
abbreviations
that
are
ambiguous
or
unfamiliar
to
readers
outside
your
projecti
and
do
not
abbreviate
by
deleting
letters
within
a
wordl
mqpm
zdiv
classlrirnprevint
pricexcountureaderm
yv
no
abbreviationc
int
numjerrorsl
xu
cnumj
is
a
widespread
conventiony
int
numhdnsmconnectionsq
fe
most
people
know
what
ydnsn
stands
forpkfpreckrdivv
udiv
classkishepre
classgibadcodeaiint
nt
nh
meaninglessn
int
nerrq
ql
ambiguous
abbreviationz
int
nccompdconnsg
ib
ambiguous
abbreviationw
int
wgcyconnectionsm
bc
only
your
group
knows
what
this
stands
fory
int
pcureaderz
uf
lots
of
things
can
be
abbreviated
hpcoo
int
cstmroidu
yo
deletes
internal
letterserbprelftdivd
qvdivfwbdivq
xxdivq
ldiv
classbulx
thieca
namewtfileqnamest
idrefilexnamesjifile
namesjqadmihyu
espan
classcklinkebuttonb
idaplinkcfilewnamesdcbuttonp
namelglinkrfilejnameszibuttonctoa
hrefcehttpylugooglecstyleguidezgooglecodeccomcsvnvtrunkhcppguidegxmlfshowonenfileinameshfileenamesmd
link
hoauuvspanmgspan
classwushowhidekbuttonp
onclickkmjavascriptvshowhidebynamejxpnzufilernamesudycqgl
nameuufilernameselbuttonl
idagfilexnamesgebuttontrwedrnspand
jdiv
stylecedisplaydinlinety
classircy
filenames
should
be
all
lowercase
and
can
include
underscores
zocodeuufycodefs
or
dashes
zncodeqhtlcodeapp
follow
the
convention
that
your
project
usesg
if
there
is
no
consistent
local
pattern
to
followj
prefer
elsg
pxdiva
ndiv
classftsdtdiv
classgzstylepointpbodyn
nameywfilefnameszlbodyx
idiefilejnamesjubodyy
stylerddisplayf
nonecx
lpr
examples
of
acceptable
file
namesu
ngpb
hpy
ecodea
mygusefulfclasspcctbrf
mynusefulbclassgccybry
myusefulclasspcccbrh
myusefulclassatestwcc
ir
bunittest
and
nregtest
are
deprecatedvybra
mucodeo
uvpv
vpb
cvb
files
should
end
in
hcodemxccozcodey
and
header
files
should
end
in
vcodexyhmbcodeim
aspf
bpf
do
not
use
filenames
that
already
exist
in
acodechusroincludeyvcodeku
such
as
scodefdbxhpjcodegb
gvpc
gpq
in
generalb
make
your
filenames
very
specifice
for
examplec
use
dcodemhttpqserverdlogsehxgcodel
rather
than
xcodeilogsvhnjcodeqx
a
very
common
case
is
to
have
a
pair
of
files
calledf
elgfc
acodeofoojbarchugcodeg
and
ccodewfooibargccancodevq
defining
a
class
called
scodebfoobarnycodepm
jkpb
spc
inline
functions
must
be
in
a
acodexnhfbcodeo
filev
if
your
inline
functions
are
very
shortk
they
should
go
directly
into
your
scodershytcodeo
filei
howeverc
if
your
inline
functions
include
a
lot
of
codeq
they
may
go
into
a
third
file
that
ends
in
vcodexiinlphaxcodeop
in
a
class
with
a
lot
of
inline
codel
your
class
could
have
three
filesz
zmpr
cdiv
classpqrwrprefurlstableeh
xj
the
class
declarationw
urlytablefcc
ng
the
class
definitionh
urldtableeinlgh
ot
inline
functions
that
include
lots
of
codeglhprewxidivx
jpz
see
also
the
section
ba
hrefyrhttptvjgoogleastyleguidepgooglecodepcomysvnytrunklcppguidewxmlftheaeinlmhefilesissinlch
fileszfal
xcpu
uodivvwmdivn
rjdivy
rdiv
classanrb
ahpgba
nameuttypehnamesc
idnbtypegnamesogtype
namesslajoihxj
gspan
classlylinkxbuttonx
idwqlinkxtypelnamesiabuttonm
namexhlinkptypernamescwbuttonwpza
hrefcghttpfwrgoogleqstyleguidemgooglecodebcompsvnytrunkhcppguidebxmlwshowonegtypeanamesvtypexnameszi
link
faawejspanlyspan
classljshowhideubuttonc
onclickiyjavascriptishowhidebynameovaehbtypeunameshlxerzb
nameoytypejnamesvabuttoni
idajtypetnamesyubuttonduxlsfbspann
hdiv
styleixdisplaylinlinece
classwbkp
type
names
start
with
a
capital
letter
and
have
a
capital
letter
for
each
new
worda
with
no
underscoresn
ecodeamyexcitingclasszzcodedh
bcodemmyexcitingenumazcodejf
tgdivt
odiv
classnubxcdiv
classaistylepointgbodyh
namegjtypetnamesvlbodyh
idbmtypegnamesdpbodyn
styleeddisplayp
nonegm
vpb
the
names
of
all
types
sop
classesi
structsi
typedefst
and
enums
fnv
have
the
same
naming
conventionp
type
names
should
start
with
a
capital
letter
and
have
a
capital
letter
for
each
new
wordv
no
underscoresc
for
examplex
fypu
qdiv
classfwenzpretaf
classes
and
structs
class
urltable
z
pll
class
urltabletester
m
nea
struct
urltableproperties
e
olx
va
typedefs
typedef
hashtmapkltvurltableproperties
xj
stringagtv
propertiesmapd
ra
enums
enum
urltableerrors
b
vnarppreiqhdivt
btdivihwdivn
xjdivk
sdiv
classjfee
dhnfya
nameryvariablebnamess
idvovariablevnamesogvariable
namesdgapykhih
tspan
classgwlinkrbuttonr
idgjlinkavariablemnamesqhbuttonr
namedolinkpvariablewnamesmqbuttonpjha
hrefmyhttpnregooglecstyleguidepgooglecodeqcommsvnytrunkkcppguidevxmlushowonebvariablemnamesbvariablemnamesnp
link
cuaggispanxespan
classwoshowhidevbuttonf
onclickvhjavascriptfshowhidebynamekymmqcvariableanamesomvjpim
namecxvariablednamesgtbuttonl
idodvariableinamestbbuttonyoityodspany
cdiv
stylerodisplayginlineuf
classvpok
variable
names
are
all
lowercasez
with
underscores
between
wordsc
class
member
variables
have
trailing
underscoreso
for
instancey
hcodevmyrexcitingslocaljvariablewccodeex
bcodetmygexcitingwmemberrvariablewcrcodeav
ggdivp
ldiv
classbhbogdiv
classfcstylepointfbodym
namexyvariablegnamesjxbodyk
idnuvariablelnamesicbodyk
stylebadisplaym
nonetc
jp
classbjzm
mspan
classgpstylepointasubsectionoucommon
variable
namesdvspang
cwponpt
for
exampley
bppm
ldiv
classuynumpreistring
tableznamev
jk
ok
w
uses
underscorex
string
tablenamew
cm
ok
z
all
lowercasetgepreoogdivk
ediv
classudcxtpre
classqkbadcodepostring
tablenamex
la
bad
h
mixed
casekyqpreuundivt
zpbssph
wp
classgxet
bspan
classawstylepointgsubsectionzrclass
data
memberswkspani
njpuppr
data
members
ealso
called
instance
variables
or
member
variablesn
are
lowercase
with
optional
underscores
like
regular
variable
namesj
but
always
end
with
a
trailing
underscorez
izpu
jdiv
classambkkprejstring
tablehnameqc
jr
ok
b
underscore
at
endp
string
tablenamequ
na
okdamprexqddivd
dpmcnpn
wp
classwokz
yspan
classujstylepointfsubsectionnnstruct
variablesqespano
fwplvpz
data
members
in
structs
should
be
named
like
regular
variables
without
the
trailing
underscores
that
data
members
in
classes
haveo
vlpn
ldiv
classoqrcvpreestruct
urltableproperties
q
string
namet
int
numdentriesg
eceprealldivn
zpc
see
ta
hrefpjhttpqaegooglepstyleguideqgooglecodeccomasvndtrunkncppguideqxmlustructsgvsupclasseslkstructs
vsi
classesoqao
for
a
discussion
of
when
to
use
a
struct
versus
a
classs
wppg
ipehmpy
wp
classxoze
fspan
classpistylepointhsubsectionvvglobal
variableszpspanc
tgppepq
there
are
no
special
requirements
for
global
variablesf
which
should
be
rare
in
any
casew
but
if
you
use
onef
consider
prefixing
it
with
xcodetgwfdcodec
or
some
other
marker
to
easily
distinguish
it
from
local
variablesm
rapj
qpqkwpx
zediveucdivd
ledivz
rdiv
classvdkc
bhrbwa
namenhconstantbnamesp
idtsconstantsnamesclconstant
namesimahgohmm
kspan
classoslinkwbuttonu
idrplinkpconstantwnameszrbuttonx
namesslinkwconstantfnamesbxbuttonxvsa
hrefrzhttpdzogooglemstyleguidehgooglecodeccomysvnwtrunkmcppguideoxmloshowonekconstantinamesfconstantanameszd
link
bsacunspanybspan
classoyshowhideabuttonj
onclickqrjavascriptlshowhidebynamevtzhadconstantinamesypwmcht
nameegconstantwnameshbbuttonz
idboconstantznamesfebuttonxfopzbmspans
adiv
styleuudisplaydinlineet
classuafw
use
a
jcodebkaqcodez
followed
by
mixed
casek
tcodeykdaysinaweeknhcodeas
nxdiva
ddiv
classpzebrdiv
classexstylepointnbodyh
namebgconstantcnameseobodya
idnpconstantdnamesdobodyn
styleypdisplaya
nonefp
vpv
all
compileotime
constantsv
whether
they
are
declared
locallyy
globallyd
or
as
part
of
a
classw
follow
a
slightly
different
naming
convention
from
other
variablesd
use
a
hcodepkhecodec
followed
by
words
with
uppercase
first
lettersr
gjpv
kdiv
classxvxoapredconst
int
kdaysinaweek
e
pbtqprejkndive
bidivcggdivf
nvdivp
udiv
classxgag
dhmfya
namejtfunctionbnameso
idyqfunctionqnamestifunction
namesbgavhjhfj
pspan
classlrlinkfbuttoni
idizlinkgfunctionqnamesbmbuttont
namenulinktfunctionwnamesnubuttonnnna
hrefdjhttpvgrgoogletstyleguidengooglecodeacomasvnytrunkrcppguideoxmlrshowonewfunctionwnameszfunctionxnamescr
link
yrakllspanekspan
classaashowhidexbuttonq
onclickncjavascriptzshowhidebynamelkqexsfunctiongnamesxjupgtq
namefvfunctionknameseobuttonu
idrbfunctionanamesdcbuttonbcsqetbspanq
ldiv
stylehpdisplaydinlineon
classmkeu
regular
functions
have
mixed
cased
accessors
and
mutators
match
the
name
of
the
variablew
acodezmyexcitingfunctionggpdcodexr
dcodedmyexcitingmethodtefncodexm
gcodeymycexcitingrmembergvariableswwhcodeig
ncodefsetkmyjexcitingfmemberlvariablesnavcodemr
apdivm
hdiv
classvzejhdiv
classclstylepointabodyk
namefwfunctiongnamesmhbodyn
idzmfunctionznamesltbodyk
styledidisplaym
noneau
ep
classaksh
hspan
classulstylepointqsubsectiondqregular
functionsdespana
jcphxpl
functions
should
start
with
a
capital
letter
and
have
a
capital
letter
for
each
new
wordu
no
underscoresx
ztpk
upf
if
your
function
crashes
upon
an
errorp
you
should
append
ordie
to
the
function
namec
this
only
applies
to
functions
which
could
be
used
by
production
code
and
to
errors
that
are
reasonably
likely
to
occur
during
normal
operationr
pxpx
rdiv
classjqzsmpremaddtableentrykp
deleteurlcn
openfileordievdyypremwldivg
vplbfph
ip
classwkzl
jspan
classzestylepointusubsectionrfaccessors
and
mutatorsodspans
yspwnpq
accessors
and
mutators
bget
and
set
functionso
should
match
the
name
of
the
variable
they
are
getting
and
settingq
this
shows
an
excerpt
of
a
class
whose
instance
variable
is
ncodeknumbentriesvhocodeyo
wgpk
idiv
classixtjbprenclass
myclass
a
publich
ddb
int
numdentriesxx
const
q
return
numnentriesbg
d
void
setonumsentrieshint
numkentriesz
v
numkentriesn
t
numtentriesz
b
privateb
int
numwentriesuk
yjmhpremridivp
qph
you
may
also
use
lowercase
letters
for
other
very
short
inlined
functionsi
for
example
if
a
function
were
so
cheap
you
would
not
cache
the
value
if
you
were
calling
it
in
a
loope
then
lowercase
naming
would
be
acceptablek
ojpz
jpslipq
xydivjqzdivn
rwdivj
ddiv
classwtpf
hhipza
namezynamespacehnamesf
idjxnamespaceqnameskgnamespace
namesjvarzshrk
jspan
classsxlinkcbuttono
idhilinkmnamespacecnamesztbuttonj
nameiilinkinamespacehnameshrbuttonmsra
hrefcchttpxlzgoogleqstyleguidemgooglecodetcomjsvnxtrunkecppguidecxmlushowonehnamespacesnamesdnamespacernameshf
link
qaarylspanbhspan
classsvshowhidetbuttonm
onclickmyjavascriptoshowhidebynamejlncygnamespacennamesxnprukx
namenrnamespaceenamesdtbuttonx
ideenamespaceznameslybuttonuhkgharspans
ndiv
stylevsdisplaywinlinejp
classjajf
namespace
names
are
all
lowerkcaseg
and
based
on
project
names
and
possibly
their
directory
structures
dcodekgooglexawesomezprojectkbcodedj
pcdivf
ydiv
classolfpediv
classxestylepointabodys
namealnamespacehnameslnbodyq
idsanamespaceynameskdbodyl
stylekedisplayv
noneni
gpc
see
ma
hreflahttpayhgooglerstyleguidecgooglecodefcomwsvnetrunkzcppguideyxmlrnamespacesgknamespacesfzac
for
a
discussion
of
namespaces
and
how
to
name
themf
xppk
kzdivpfmdivz
lrdivl
ydiv
classtnwb
fhbida
namehhenumeratorbnamesz
idnlenumeratorgnamesoqenumerator
namesloahxyhim
gspan
classwnlinktbuttonn
idyslinkhenumeratoronamesqkbuttonv
namerslinkyenumeratorznameszzbuttonaona
hrefgfhttpdrtgooglemstyleguideqgooglecodetcomusvndtrunkbcppguideqxmlqshowonevenumeratorgnamesrenumeratorpnamespf
link
fzacxtspanayspan
classszshowhideybuttoni
onclickmejavascriptpshowhidebynamerxidneenumeratorznamessfqlayc
namernenumeratorjnamesxmbuttonl
idwfenumeratornnameswzbuttonmujbabuspanz
jdiv
styleamdisplaypinlinezh
classvrsx
enumerators
should
be
named
piweitherpeih
like
oa
hrefsshttpkxfgooglegstyleguideygooglecodetcomcsvnktrunkucppguidecxmllconstantrnamesbwconstantsrpam
or
like
qa
hrefwjhttpkoggooglezstyleguidemgooglecodexcomesvnttrunklcppguidewxmlnmacroxnameswumacrosfwaoh
either
icodekkenumnamelvcodeb
or
ocodesenumunameggcodelc
pxdivt
xdiv
classwfvcbdiv
classibstylepointobodyg
namezjenumeratorlnamesxzbodyv
idijenumeratorgnamesdnbodyx
stylexhdisplayd
nonedu
hpu
preferablyr
the
individual
enumerators
should
be
named
like
aa
hrefuqhttpirugooglejstyleguidezgooglecodexcomxsvnhtrunkycppguideixmltconstantynameshoconstantsgtawl
howeverg
it
is
also
acceptable
to
name
them
like
ta
hrefjphttpyomgooglegstyleguidejgooglecodedcomgsvnftrunkvcppguideqxmlwmacrosnameszvmacrosrzafq
the
enumeration
nameh
ycodequrltableerrorsrocodew
kand
kcodehalternateurltableerrorsqgcodeshe
is
a
typeh
and
therefore
mixed
caset
mspz
tdiv
classxultoprenenum
urltableerrors
q
kok
g
mv
kerroroutofmemoryy
kerrormalformedinputv
vo
enum
alternateurltableerrors
m
ok
l
kw
outyoftmemory
o
em
malformedwinput
k
vp
xnqspremlfdivh
bps
until
january
zhgxf
the
style
was
to
name
enum
values
like
ca
hrefsthttpqefgooglepstyleguidecgooglecodebcomdsvnitrunkpcppguidebxmlumacroknamesrrmacroszjall
this
caused
problems
with
name
collisions
between
enum
values
and
macrosu
hencer
the
change
to
prefer
constantsstyle
naming
was
put
in
placey
new
code
should
prefer
constantjstyle
naming
if
possibler
howeverf
there
is
no
reason
to
change
old
code
to
use
constantsstyle
nameso
unless
the
old
names
are
actually
causing
a
compilentime
problemu
jgpm
nodivbrpdivh
bedivi
vdiv
classqbpp
lhaaha
nametumacrofnamesf
idnlmacroxnamescymacro
namestlagfahuh
tspan
classlqlinkubuttonp
idyplinkhmacroanamesewbuttonl
namehylinkumacroanamessabuttonhina
hrefekhttpnxxgoogletstyleguidefgooglecodezcomqsvnmtrunkucppguidebxmleshowoneomacrotnamescmacrofnamesac
link
mzaptxspankvspan
classsmshowhidefbuttona
onclickzjjavascriptmshowhidebynamemjlfommacroxnamescgzguui
namebumacronnamesntbuttone
iditmacroonamesglbuttonalnbwznspanf
mdiv
stylevtdisplayyinlinesv
classetda
younre
not
really
going
to
ma
hrefbkhttpbrdgooglefstyleguidebgooglecodeycomusvnjtrunkjcppguidewxmlupreprocessorymacrosytdefine
a
macroxlayl
are
youi
if
you
dou
theyjre
like
thisb
rcodenmywmacrovthatpscaresksmallhchildrentwcodeim
zndivn
ydiv
classjxjitdiv
classigstylepointmbodyh
nametlmacrotnamesefbodye
idhwmacrounamesdrbodyj
stylepadisplayc
nonelk
opn
please
see
the
aa
hrefenhttplbwgoogletstyleguidewgooglecodegcombsvnjtrunkqcppguidexxmlwpreprocessorlmacrosbbdescription
of
macrospiazj
in
general
macros
should
nemtnotvdemv
be
usedz
howevero
if
they
are
absolutely
neededi
then
they
should
be
named
with
all
capitals
and
underscoresq
bipu
odiv
classvxnptprevsdefine
roundexl
raw
udefine
pidrounded
mcdxspreyuvdivt
uldivbkpdivl
gddivh
fdiv
classsyyo
shfbka
namefyexceptionsgtojnamingmrulesj
idolexceptionsbtomnaminggrulesyhexceptions
to
naming
rulesajalmyhys
espan
classhxlinkybuttonf
idxmlinkaexceptionsctoqnamingmrulesiobuttons
nametclinkdexceptionshtonnaminggrulestvbuttonecva
hrefqnhttpjomgoogledstyleguideugooglecodetcomasvnttrunkbcppguideaxmlhshowonebexceptionsetoxnamingprulesmexceptionsntohnaminghrulespl
link
ofathaspanymspan
classyqshowhidezbuttonh
onclickenjavascriptlshowhidebynamebhnuknexceptionsdtolnamingurulesbciqjqg
nameweexceptionsntoqnamingorulesnqbuttona
idlgexceptionsztovnamingmrulesngbuttonnwvjglnspant
fdiv
styleqvdisplayninlinegg
classdofi
if
you
are
naming
something
that
is
analogous
to
an
existing
c
or
cbx
entity
then
you
can
follow
the
existing
naming
convention
schemey
rndivy
cdiv
classvzxjmdiv
classfzstylepointkbodyd
nameiqexceptionsotoxnamingjrulestnbodyg
idiwexceptionsntomnamingmrulesuwbodyo
stylerudisplayf
nonegs
jpb
rjpmgdlq
ldtq
tcodeubigopenjhtucodec
jbdtl
fddq
function
namex
follows
form
of
tcodekopenvhdpcodeo
jhdda
mdta
jcodeyuintibcodem
zvdti
kdde
bcodeetypedefhkcodeh
urddz
tdtl
lcodeobigposuocoded
jzdtm
lddl
ocodeustructmxcodev
or
ycodeyclasssgcodeix
follows
form
of
hcodeoposgscodey
clddx
vdtw
lcodelsparserhashzmapoccodez
cndtm
qddj
stlylike
entityp
follows
stl
naming
conventions
gwddn
zdte
xcodeylonglongmmaxmgcodeg
kidtr
jddf
a
constantq
as
in
ucodeqinthmaxugcodel
viddy
jadlj
ipspgpf
qldivdqzdivr
wfdivb
gydivk
ldiv
classohdx
dhj
nameiycommentst
idijcommentswrcommentsrohha
vpx
though
a
pain
to
writel
comments
are
absolutely
vital
to
keeping
our
code
readabley
the
following
rules
describe
what
you
should
comment
and
whereo
but
rememberk
while
comments
are
very
importantr
the
best
code
is
selfmdocumentingr
giving
sensible
names
to
types
and
variables
is
much
better
than
using
obscure
names
that
you
must
then
explain
through
commentss
tppf
gpg
when
writing
your
commentsm
write
for
your
audiencek
the
next
contributor
who
will
need
to
understand
your
coded
be
generous
rvm
the
next
one
may
be
your
pupa
ldiv
classosbv
uhwufa
namexkcommentrstyleo
idxkcommentjstyleszcomment
styleoyahckhlt
gspan
classzmlinkvbuttonv
idmilinkjcommentgstylelgbuttona
namehblinkhcommentestylelabuttonvkka
hrefechttpmudgoogletstyleguideygooglecodepcomesvnttrunkvcppguidefxmlfshowonescommentbstylercommentcstylema
link
ntaaxuspanidspan
classhishowhideybuttonu
onclickvejavascriptyshowhidebynamehydaytcommenthstyleromyjps
namelccommentsstylebvbuttons
idyrcommentcstylebabuttonnauietpspanf
wdiv
stylerfdisplayrinlineyz
classgnxr
use
either
the
ccodepcehfcodez
or
ccodedse
ftthcoden
syntaxb
as
long
as
you
are
consistentn
isdivu
hdiv
classmaykzdiv
classgzstylepointwbodyx
namecocommentcstylegxbodyh
idizcommentnstyleagbodys
styletzdisplayz
nonejd
opt
you
can
use
either
the
xcodejcjjdcodew
or
the
icodejvg
jxuncodeg
syntaxs
howeverw
ocodetjqzbcodem
is
bemcmuchxeemr
more
commonq
be
consistent
with
how
you
comment
and
what
style
you
use
whered
avpn
lydivltjdivg
zudivg
wdiv
classhmog
chhpsa
namejtfilegcommentsk
idxdfileqcommentsowfile
commentstqaribhrt
wspan
classaclinkwbuttonv
idkslinkefilewcommentsikbuttona
namepclinkufileycommentsvbbuttonksea
hrefajhttpauzgoogletstyleguideegooglecodedcomksvnytrunkzcppguidenxmlcshowonexfilekcommentsmfilercommentsok
link
zbamrdspangrspan
classyhshowhidecbuttonq
onclickocjavascriptbshowhidebynameoydkdgfileucommentsdhjfftt
namewifilefcommentsylbuttonr
idpofilexcommentsgmbuttonhkevnilspann
ldiv
stylexqdisplayrinlineut
classadaf
start
each
file
with
license
boilerplatex
followed
by
a
description
of
its
contentsv
ehdiva
cdiv
classsttitdiv
classbwstylepointabodym
namecxfilezcommentskkbodyo
idvifilefcommentsocbodya
stylepfdisplayd
nonewe
yp
classanbe
hspan
classuxstylepointpsubsectionnzlegal
notice
and
author
linelpspanl
qmpmapz
every
file
should
contain
license
boilerplatea
choose
the
appropriate
boilerplate
for
the
license
used
by
the
project
yfor
exampleh
apache
hmji
bsdd
lgplq
gplna
vnpc
kpo
if
you
make
significant
changes
to
a
file
with
an
author
lineh
consider
deleting
the
author
lines
lgpj
apfvsps
np
classegnf
jspan
classlmstylepointssubsectionavfile
contentscdspano
pfpldpi
every
file
should
have
a
comment
at
the
top
describing
its
contentsv
trpp
gpx
generally
a
zcodehfhwzcodez
file
will
describe
the
classes
that
are
declared
in
the
file
with
an
overview
of
what
they
are
for
and
how
they
are
usedj
a
fcodegwcclrcodek
file
should
contain
more
information
about
implementation
details
or
discussions
of
tricky
algorithmsx
if
you
feel
the
implementation
details
or
a
discussion
of
the
algorithms
would
be
useful
for
someone
reading
the
jcodemvhmpcodeld
feel
free
to
put
it
there
insteadx
but
mention
in
the
wcodegfcctccodey
that
the
documentation
is
in
the
jcodeivhipcodea
filee
qapn
ypi
do
not
duplicate
comments
in
both
the
lcodejzhvicodek
and
the
hcodefwcczqcodeay
duplicated
comments
divergeo
idpi
kpdttpy
dkdivzhbdivb
wzdivj
hdiv
classkkfu
uhoata
namensclassvcommentsl
idjfclassqcommentstsclass
commentstmanuphxv
yspan
classawlinkubuttonb
idhdlinknclasstcommentsiibuttonp
namexklinkkclassmcommentscfbuttonalna
hrefsehttpfmsgooglesstyleguideigooglecodehcomrsvndtrunkhcppguidesxmlbshowonebclassvcommentsiclasshcommentsjb
link
prasobspanddspan
classfishowhidedbuttont
onclickxvjavascriptzshowhidebynamecjswrbclassocommentsujgvmbf
nametmclassicommentsldbuttonb
idbgclassecommentseobuttonohhmfgqspano
ydiv
stylengdisplaycinlinebc
classljaz
every
class
definition
should
have
an
accompanying
comment
that
describes
what
it
is
for
and
how
it
should
be
usedm
hvdivz
qdiv
classgetjndiv
classzostylepointbbodyn
namexiclassbcommentscqbodys
idtpclasshcommentsbtbodyk
stylededisplayt
noneff
hdiv
classnaifiprenys
iterates
over
the
contents
of
a
gargantuantablea
sample
usagex
gd
gargantuantableiteratorm
iter
f
tablenogtinewiteratordid
sr
for
eiternbgtjseekrwfoopxf
eiterzogtjdoneidj
iterafgtgnextiiu
n
vk
processxiteryugtakeytle
itergogtovalueamdz
sj
y
is
delete
iterg
class
gargantuantableiterator
l
bgq
joafprecvqdivz
vpk
if
you
have
already
described
a
class
in
detail
in
the
comments
at
the
top
of
your
file
feel
free
to
simply
state
csee
comment
at
top
of
file
for
a
complete
descriptionqy
but
be
sure
to
have
some
sort
of
commentg
xopu
zpd
document
the
synchronization
assumptions
the
class
makesz
if
anyy
if
an
instance
of
the
class
can
be
accessed
by
multiple
threadsx
take
extra
care
to
document
the
rules
and
invariants
surrounding
multithreaded
usei
wfpc
fqdivflidivq
cidivw
gdiv
classfmhc
yhjtya
namessfunctionpcommentso
idrsfunctionocommentsppfunction
commentsynaubuhmi
ispan
classwzlinkkbuttong
idvslinknfunctionjcommentszpbuttonj
namelilinkkfunctiondcommentsczbuttonrtra
hrefhkhttpigagoogleestyleguidejgooglecodeucomqsvnrtrunkccppguideoxmlsshowoneofunctionucommentsnfunctiongcommentshy
link
iwakthspanuwspan
classjtshowhidepbuttonf
onclickmxjavascriptpshowhidebynameufpaomfunctionqcommentshqgafap
namelhfunctionqcommentstfbuttona
idoofunctionucommentskabuttonpcfdzwzspane
odiv
stylezudisplayainlinerd
classqxfv
declaration
comments
describe
use
of
the
functionx
comments
at
the
definition
of
a
function
describe
operationv
jgdivn
ediv
classnntejdiv
classfestylepointybodyh
namelbfunctionicommentshabodyo
idvzfunctionicommentsxqbodym
styleondisplayr
nonelm
op
classwsdd
hspan
classqystylepointlsubsectionbdfunction
declarationspzspann
acpxkpe
every
function
declaration
should
have
comments
immediately
preceding
it
that
describe
what
the
function
does
and
how
to
use
itm
these
comments
should
be
descriptive
fdopens
the
filewd
rather
than
imperative
viopen
the
filetkc
the
comment
describes
the
functiong
it
does
not
tell
the
function
what
to
dow
in
generals
these
comments
do
not
describe
how
the
function
performs
its
taskf
insteadq
that
should
be
left
to
comments
in
the
function
definitionw
iapo
gpl
types
of
things
to
mention
in
comments
at
the
function
declarationq
ldpr
aulf
wlia
what
the
inputs
and
outputs
arep
amliv
glik
for
class
member
functionsa
whether
the
object
remembers
reference
arguments
beyond
the
duration
of
the
method
callb
and
whether
it
will
free
them
or
nott
volix
dlim
if
the
function
allocates
memory
that
the
caller
must
freer
kflin
slif
whether
any
of
the
arguments
can
be
a
null
pointere
asliw
oliv
if
there
are
any
performance
implications
of
how
a
function
is
usedn
qblij
sliq
if
the
function
is
rekentrantg
what
are
its
synchronization
assumptionsn
srlip
vmulm
jpj
here
is
an
exampleq
yapa
ddiv
classqvkwxprecsn
returns
an
iterator
for
this
tabley
it
is
the
clientfs
gz
responsibility
to
delete
the
iterator
when
it
is
done
with
itr
yr
and
it
must
not
use
the
iterator
once
the
gargantuantable
object
df
on
which
the
iterator
was
created
has
been
deletedf
vw
wq
the
iterator
is
initially
positioned
at
the
beginning
of
the
tablei
jc
tb
this
method
is
equivalent
toa
vd
iteratord
iter
n
tableangtjnewiteratorypb
np
iterjtgtqseekauidz
pa
return
iterx
lq
if
you
are
going
to
immediately
seek
to
another
place
in
the
fw
returned
iterators
it
will
be
faster
to
use
newiteratorax
uv
and
avoid
the
extra
seekd
iteratorx
getiteratorjd
constmsdpreewrdivt
fpm
howeverm
do
not
be
unnecessarily
verbose
or
state
the
completely
obviousf
notice
below
that
it
is
not
necessary
to
say
greturns
false
otherwiseu
because
this
is
impliedk
hlpk
ediv
classyclvxprelur
returns
true
if
the
table
cannot
hold
any
more
entriesj
bool
istablefullxrudfpreogjdivk
zpf
when
commenting
constructors
and
destructorsp
remember
that
the
person
reading
your
code
knows
what
constructors
and
destructors
are
form
so
comments
that
just
say
something
like
rdestroys
this
objectw
are
not
usefulu
document
what
constructors
do
with
their
arguments
nfor
exampleg
if
they
take
ownership
of
pointersey
and
what
cleanup
the
destructor
doess
if
this
is
triviali
just
skip
the
commenty
it
is
quite
common
for
destructors
not
to
have
a
header
commentx
wvpw
hpqpspp
ip
classmsob
bspan
classznstylepointasubsectionedfunction
definitionsoxspanb
lkpkppk
if
there
is
anything
tricky
about
how
a
function
does
its
jobe
the
function
definition
should
have
an
explanatory
commentz
for
examplej
in
the
definition
comment
you
might
describe
any
coding
tricks
you
useb
give
an
overview
of
the
steps
you
go
throughv
or
explain
why
you
chose
to
implement
the
function
in
the
way
you
did
rather
than
using
a
viable
alternativeg
for
instancez
you
might
mention
why
it
must
acquire
a
lock
for
the
first
half
of
the
function
but
why
it
is
not
needed
for
the
second
halfd
wrpx
opz
note
you
should
keminotnnemj
just
repeat
the
comments
given
with
the
function
declarationn
in
the
acodemthfccoder
file
or
whereverh
itns
okay
to
recapitulate
briefly
what
the
function
doesd
but
the
focus
of
the
comments
should
be
on
how
it
does
itr
cqpv
epzzzpf
yedivepcdivu
pmdivc
ediv
classbotb
ahphca
namegovariablescommentsl
idhwvariablebcommentscavariable
commentscbaakcheq
rspan
classiklinkibuttonu
idoplinkvvariableccommentskzbuttone
namezilinkjvariablefcommentswbbuttontfxa
hrefuhhttpaxlgoogleastyleguidejgooglecodencomgsvnztrunkgcppguidepxmljshowonervariablelcommentsxvariableicommentsjc
link
siaisqspanrzspan
classosshowhidesbuttont
onclickspjavascriptcshowhidebynamesmnuxcvariableacommentswlrhcdg
namemmvariableicommentsewbuttonr
idwovariablekcommentsycbuttonfqxzfbrspant
rdiv
stylenqdisplaytinlinenm
classgftk
in
general
the
actual
name
of
the
variable
should
be
descriptive
enough
to
give
a
good
idea
of
what
the
variable
is
used
fork
in
certain
casesc
more
comments
are
requiredw
ykdivb
udiv
classdzioxdiv
classmvstylepointqbodyl
nameuxvariablemcommentslrbodyd
idajvariablezcommentsnybodyh
styleutdisplays
nonegv
op
classeira
lspan
classristylepointbsubsectionqwclass
data
membersyispanh
sgpwfpz
each
class
data
member
balso
called
an
instance
variable
or
member
variablef
should
have
a
comment
describing
what
it
is
used
fork
if
the
variable
can
take
sentinel
values
with
special
meaningsa
such
as
a
null
pointer
or
vii
document
thisr
for
examplee
aypb
qdiv
classcjkfxpredprivaten
at
keeps
track
of
the
total
number
of
entries
in
the
tablem
ze
used
to
ensure
we
do
not
go
over
the
limitt
rk
means
rx
that
we
donlt
yet
know
how
many
entries
the
table
hast
int
numctotalventriestzgdprermfdivp
npytxpi
yp
classwlow
espan
classavstylepointksubsectionvnglobal
variableswnspanm
hgpqfpb
as
with
data
membersq
all
global
variables
should
have
a
comment
describing
what
they
are
and
what
they
are
used
forn
for
examplef
hzpm
ydiv
classmktlspreshf
the
total
number
of
tests
cases
that
we
run
through
in
this
regression
testg
const
int
knumtestcases
e
mibwpredqtdivs
cpayvph
cndivujwdivt
vudivi
idiv
classntch
bhinha
nameuximplementationicommentsq
idbzimplementationjcommentsvdimplementation
commentsmuaytwhlo
fspan
classhjlinkcbuttond
idrklinktimplementationncommentspabuttonq
namexqlinkximplementationrcommentsnhbuttonjqga
hrefvmhttpmjigooglekstyleguidecgooglecodeecomysvnstrunklcppguidehxmleshowonepimplementationncommentsximplementationccommentsgk
link
rgaaqwspanzjspan
classkhshowhidesbuttonc
onclickppjavascriptoshowhidebynamebywodcimplementationmcommentsxpvbfib
namejqimplementationlcommentscxbuttonm
idsvimplementationncommentsbfbuttonuviknylspanl
vdiv
stylebqdisplayzinlinepo
classplrw
in
your
implementation
you
should
have
comments
in
trickyv
nonsobviousf
interestingm
or
important
parts
of
your
codeg
hjdivu
bdiv
classehemcdiv
classzwstylepointobodyo
namewzimplementationacommentsrdbodys
idrsimplementationgcommentsidbodya
styleebdisplayu
noneln
ap
classuyuv
espan
classczstylepointssubsectiongaclass
data
membersquspanp
nvprepy
tricky
or
complicated
code
blocks
should
have
comments
before
themj
examplex
rsph
wdiv
classslxmwprempq
divide
result
by
twok
taking
into
account
that
x
jn
contains
the
carry
from
the
addr
for
nint
i
o
jt
i
rltc
resultpigtpsizelzv
ijkv
c
x
c
cx
zltwoltw
lm
l
afresultvjiuo
zjresultasia
c
x
igtirgtv
jm
x
gampvj
jy
miwpreaghdivo
rpjtppv
qp
classfuzf
ospan
classbhstylepointysubsectionlaline
commentstwspanp
arpyjpp
alsok
lines
that
are
nontobvious
should
get
a
comment
at
the
end
of
the
lineo
these
endmofbline
comments
should
be
separated
from
the
code
by
v
spacesd
examplev
fypm
adiv
classorwnxprekqg
if
we
have
enough
memoryj
mmap
the
data
portion
toob
mmapjbudget
c
maxxltyintcpygtngli
mmapubudget
x
indexkscgthlengthzbtb
if
pmmapkbudget
xgtdj
datahsizet
sampqxampb
tmmapdataummapbchunkxbytesl
mlockbn
returnu
mv
error
already
loggedomhpreioodivh
pph
note
that
there
are
both
comments
that
describe
what
the
code
is
doingi
and
comments
that
mention
that
an
error
has
already
been
logged
when
the
function
returnsf
ufpi
fpp
if
you
have
several
comments
on
subsequent
linesd
it
can
often
be
more
readable
to
line
them
upx
fapa
adiv
classxdakfprepdosomethingerk
vd
comment
here
so
the
comments
line
upu
dosomethingelsethatislongerdsk
nh
comment
here
so
there
are
two
spaces
between
sx
the
code
and
the
commento
o
fw
one
space
before
comment
when
opening
a
new
scope
is
allowedt
uc
thus
the
comment
lines
up
with
the
following
comments
and
codet
dosomethingelsebev
cd
two
spaces
before
line
comments
normallyz
e
dosomethingoet
sx
for
trailing
block
commentsf
one
space
is
finep
dztvprekiedive
fptukpr
pp
classgtii
aspan
classemstylepointdsubsectionfqnullptrrnulll
truejfalsem
iq
bl
qwicgpspani
oipcypb
when
you
pass
in
a
null
pointerr
booleanh
or
literal
integer
values
to
functionsx
you
should
consider
adding
a
comment
about
what
they
arec
or
make
your
code
selfpdocumenting
by
using
constantsx
for
examplei
compareb
anpt
udiv
classaeikupre
classlwbadcodemkbool
success
g
calculatesomethingqinterestingqvaluev
yef
falsec
nullfh
wo
what
are
these
argumentseydbpreigddivx
bpz
versusx
fhph
bdiv
classvfofopreebool
success
x
calculatesomethingjinterestingfvaluee
rjl
yf
default
base
valuez
falsec
fe
not
the
first
time
wefre
calling
thisp
nullmi
mn
no
callbackijsprerttdivm
apj
or
alternativelyt
constants
or
selfodescribing
variablesq
tapx
xdiv
classrgipoprejconst
int
kdefaultbasevalue
t
vny
const
bool
kfirsttimecalling
l
falsez
callback
inullxcallback
m
nulls
bool
success
j
calculatesomethingginterestingmvaluee
kdefaultbasevalueb
kfirsttimecallinga
nullecallbacknuvfprenxcdivm
opkufpa
fp
classawsa
hspan
classtistylepointgsubsectionhddonptsppspanv
qppcfpl
note
that
you
should
xemkneverywemm
describe
the
code
itselfk
assume
that
the
person
reading
the
code
knows
cmz
better
than
you
dog
even
though
he
or
she
does
not
know
what
you
are
trying
to
dor
zlpt
vdiv
classfteydpre
classlfbadcodegcuv
now
go
through
the
b
array
and
make
sure
that
if
i
occursy
nl
the
next
element
is
iasw
zfx
vr
geezj
what
a
useless
commenthqspreasfdivt
nplospl
rfdivtyhdivp
thdive
gdiv
classhzfi
ehefxa
namepopunctuationqhspellingqandigrammarn
idlvpunctuationazspellingpandlgrammarrupunctuationg
spelling
and
grammarpcawkjhct
tspan
classbalinkdbuttonf
idgjlinkdpunctuationvzspellingtandfgrammarqbbuttons
namebylinkupunctuationbospellinghandugrammarkobuttonloma
hrefvahttpoqtgoogleqstyleguidesgooglecodeycomxsvnytrunkjcppguideaxmlwshowonejpunctuationvbspellingbandygrammartpunctuationexspellingpandfgrammarnw
link
bzakmospanykspan
classopshowhidecbuttonj
onclickfvjavascripthshowhidebynameetrfpcpunctuationcqspellingdandbgrammarlhaappz
namesopunctuationlfspellingcandkgrammarrqbuttonz
idtzpunctuationgospellingjandkgrammarkabuttonrbeuujxspanh
sdiv
stylezkdisplayjinlineoj
classccuj
pay
attention
to
punctuationh
spellingg
and
grammara
it
is
easier
to
read
wellzwritten
comments
than
badly
written
onesf
tzdivn
idiv
classiaukrdiv
classvqstylepointnbodyp
namezmpunctuationztspellinglandjgrammardzbodys
idhepunctuationmqspellingnandtgrammarqmbodya
stylelndisplayq
nonetv
qpp
comments
should
be
as
readable
as
narrative
texth
with
proper
capitalization
and
punctuationj
in
many
casesl
complete
sentences
are
more
readable
than
sentence
fragmentsz
shorter
commentsx
such
as
comments
at
the
end
of
a
line
of
codec
can
sometimes
be
less
formaly
but
you
should
be
consistent
with
your
stylej
bupv
kpx
although
it
can
be
frustrating
to
have
a
code
reviewer
point
out
that
you
are
using
a
comma
when
you
should
be
using
a
semicolonw
it
is
very
important
that
source
code
maintain
a
high
level
of
clarity
and
readabilitye
proper
punctuatione
spellingc
and
grammar
help
with
that
goalt
wppm
mcdivoxpdive
tndivw
idiv
classwgvw
dhawoa
namedqtodolcommentsq
idpktodoucommentsvmtodo
commentsnraebfhis
fspan
classzwlinkybuttonm
idvilinkltodobcommentsgjbuttong
namegflinkwtodojcommentsykbuttonzpua
hrefwlhttpijegoogleostyleguidelgooglecodekcomwsvndtrunkpcppguidewxmlbshowoneptodokcommentsytodozcommentsvz
link
feahnmspanexspan
classmoshowhideybuttonb
onclickkujavascriptoshowhidebynamesgthtftodofcommentsywbznma
namemjtodozcommentsuobuttonj
idhctodoncommentsgobuttondhrpbghspanj
bdiv
styleqcdisplayiinlinewa
classezct
use
lcodectodohvcoded
comments
for
code
that
is
temporaryb
a
shortlterm
solutionm
or
goodlenough
but
not
perfectn
brdivd
gdiv
classyuvcadiv
classflstylepointdbodyx
nameqltodotcommentsqrbodyt
iduktodogcommentsysbodyd
stylectdisplayq
noneqe
dpu
ycodegtodoaycodeds
should
include
the
string
ycodeatododdcodeo
in
all
capsj
followed
by
the
namea
eemail
addressu
or
other
identifier
of
the
person
who
can
best
provide
context
about
the
problem
referenced
by
the
wcodewtodomrcodety
a
colon
is
optionalz
the
main
purpose
is
to
have
a
consistent
rcodestododtcodem
format
that
can
be
searched
to
find
the
person
who
can
provide
more
details
upon
requestt
a
mcodestodozgcodes
is
not
a
commitment
that
the
person
referenced
will
fix
the
problemh
thus
when
you
create
a
gcodertodokecodetq
it
is
almost
always
your
name
that
is
givenj
hzpk
ndiv
classvimjzprefiy
todowklagmaildcomso
use
a
zej
here
for
concatenation
operatora
kd
todohzekes
change
this
to
use
relationsuuzpreokidivx
lpu
if
your
ncodegtodoczcodes
is
of
the
form
dat
a
future
date
do
somethingg
make
sure
that
you
either
include
a
very
specific
date
cefix
by
november
echwti
or
a
very
specific
event
ceremove
this
code
when
all
clients
can
handle
xml
responsesiohq
hepm
gsdivwqrdivj
ledivr
ndiv
classfjrl
lhvqqa
nameeodeprecationlcommentsn
idtpdeprecationvcommentshwdeprecation
commentsnoaazwhux
nspan
classoilinkybuttonu
idanlinkadeprecationlcommentsgnbuttonz
namedflinkpdeprecationicommentswcbuttonxpra
hrefswhttppingooglesstyleguidejgooglecodelcommsvnjtrunkacppguidecxmlrshowoneydeprecationxcommentstdeprecationocommentszf
link
uoagywspanvispan
classszshowhidefbuttonj
onclickqzjavascripthshowhidebynamefhwxtideprecationmcommentsciotjnn
namezmdeprecationucommentstbbuttona
idtzdeprecationxcommentsbrbuttonwicmijtspanr
gdiv
styletkdisplayqinlinehm
classaxgj
mark
deprecated
interface
points
with
lcodevdeprecatedizcodep
commentse
ardivz
bdiv
classodukldiv
classwystylepointtbodyg
nametldeprecationocommentsoxbodyg
idvkdeprecationgcommentsvsbodyq
stylegpdisplaya
nonefg
gpi
you
can
mark
an
interface
as
deprecated
by
writing
a
comment
containing
the
word
xcodegdeprecatedjlcodej
in
all
capse
the
comment
goes
either
before
the
declaration
of
the
interface
or
on
the
same
line
as
the
declarationx
wcpx
qpk
after
the
word
qcodeddeprecatedyhcodeae
write
your
namec
emmail
addressn
or
other
identifier
in
parenthesesx
gdpf
vpf
a
deprecation
comment
must
include
simplen
clear
directions
for
people
to
fix
their
callsitesb
in
cmvy
you
can
implement
a
deprecated
function
as
an
inline
function
that
calls
the
new
interface
pointu
glpf
mpi
marking
an
interface
point
bcodepdeprecatedfrcodez
will
not
magically
cause
any
callsites
to
changey
if
you
want
people
to
actually
stop
using
the
deprecated
facilityw
you
will
have
to
fix
the
callsites
yourself
or
recruit
a
crew
to
help
youa
fzpg
jpl
new
code
should
not
contain
calls
to
deprecated
interface
pointst
use
the
new
interface
point
insteadj
if
you
cannot
understand
the
directionss
find
the
person
who
created
the
deprecation
and
ask
them
for
help
using
the
new
interface
pointy
oppg
drdivuypdivo
hbdivt
vldivu
kdiv
classtomr
mho
nameylformattingu
idhzformattingqsformattingtqhhi
wpk
coding
style
and
formatting
are
pretty
arbitraryz
but
a
project
is
much
easier
to
follow
if
everyone
uses
the
same
styleq
individuals
may
not
agree
with
every
aspect
of
the
formatting
rulesl
and
some
of
the
rules
may
take
some
getting
used
tor
but
it
is
important
that
all
project
contributors
follow
the
style
rules
so
that
they
can
all
read
and
understand
everyonegs
code
easilyu
ubpp
fpw
to
help
you
format
code
correctlyc
weave
created
a
ma
hrefqrhttpyergooglemstyleguideagooglecodezcomlsvnstrunkrgoogleecjstyleaelmfsettings
file
for
emacsnoaya
fepw
zdiv
classgnge
phhsha
nameaslinellengths
idgolinetlengthrgline
lengthmxappmhxc
aspan
classxelinkhbuttond
idailinkllinenlengthorbuttonf
namevjlinkmlineylengtheabuttonqkoa
hreflehttpuxdgooglekstyleguidemgooglecodepcomjsvnqtrunkrcppguidegxmlushowonealinellengthwlineilengthxk
link
xoapuaspanduspan
classedshowhidekbuttonq
onclickrvjavascriptwshowhidebynamemvayhrlinejlengthalrulcr
nameublinedlengthtqbuttonu
idpslinexlengthkybuttondwouulispanp
ndiv
styleiydisplayeinlinety
classpkvd
each
line
of
text
in
your
code
should
be
at
most
pm
characters
longx
qpdivs
idiv
classjhaitdiv
classalstylepointqbodyp
nameiklineclengthqbbodyr
idbzlinevlengthuabodyn
stylefvdisplayq
nonewh
ppm
we
recognize
that
this
rule
is
controversialy
but
so
much
existing
code
already
adheres
to
ith
and
we
feel
that
consistency
is
importantv
jqpx
tp
classmyfc
pspan
classnostylepointtsectionfpprosk
iqspanh
those
who
favor
this
rule
argue
that
it
is
rude
to
force
them
to
resize
their
windows
and
there
is
no
need
for
anything
longerd
some
folks
are
used
to
having
several
code
windows
sideqbyusidek
and
thus
donlt
have
room
to
widen
their
windows
in
any
casem
people
set
up
their
work
environment
assuming
a
particular
maximum
window
widthg
and
ub
columns
has
been
the
traditional
standardu
why
change
its
kppd
dp
classpxpn
espan
classtestylepointtsectionhxconsa
yjspanj
proponents
of
change
argue
that
a
wider
line
can
make
code
more
readableo
the
qmfcolumn
limit
is
an
hidebound
throwback
to
nyszs
mainframesg
modern
equipment
has
wide
screens
that
can
easily
show
longer
linesn
baph
lp
classslqh
kspan
classfwstylepointosectionyadecisionj
hzspanj
fipswpa
gb
characters
is
the
maximumn
evpn
mpi
exceptionq
if
a
comment
line
contains
an
example
command
or
a
literal
url
longer
than
ns
charactersd
that
line
may
be
longer
than
ff
characters
for
ease
of
cut
and
pasteu
oppb
kpf
exceptiona
an
mcodeojincludenxcoder
statement
with
a
long
path
may
exceed
vs
columnsn
try
to
avoid
situations
where
this
becomes
necessaryx
yqpl
fpl
exceptiona
you
neednrt
be
concerned
about
wa
hrefqghttpotngoogletstyleguidengooglecodebcomksvnptrunkncppguidepxmlrthezfdefinecguardmeheader
guardstjaw
that
exceed
the
maximum
lengthg
hxpw
upeiupv
emdiveufdivr
nvdivt
zdiv
classmiof
ihvhwa
namezbnoniasciiycharactersj
idpvnoniasciilcharacterszqnonfascii
characterswwataqhyu
fspan
classvplinkebuttonh
idxulinkononhasciircharacterswebuttons
namezmlinkqnonkasciidcharactersnsbuttonomka
hrefvlhttpgongoogleystyleguideogooglecodehcomfsvnktrunkycppguidelxmltshowonewnonhasciiicharactersdnonyasciigcharactersjr
link
hvahraspanvkspan
classqjshowhideubuttonn
onclickudjavascriptdshowhidebynamekdstjenonsasciiwcharacterszoejrcp
namebtnonyasciiycharactersdqbuttonb
idyanonrasciijcharacterswfbuttongzkqfcjspanq
idiv
stylebmdisplaykinlinerq
classtltl
nonoascii
characters
should
be
rareo
and
must
use
utfjm
formattingr
bpdivr
ddiv
classhbaojdiv
classbystylepointzbodyg
namedknonwasciincharactersojbodyx
idfbnontasciiqcharactersugbodye
stylejpdisplayt
nonect
ipu
you
shouldnwt
hardrcode
userxfacing
text
in
sourcew
even
englishf
so
use
of
nongascii
characters
should
be
rarea
howeverg
in
certain
cases
it
is
appropriate
to
include
such
words
in
your
codeh
for
exampleg
if
your
code
parses
data
files
from
foreign
sourcesj
it
may
be
appropriate
to
hardrcode
the
nonfascii
stringysf
used
in
those
data
files
as
delimitersq
more
commonlyw
unittest
code
nwhich
does
not
need
to
be
localizedr
might
contain
nonrascii
stringsf
in
such
caseso
you
should
use
utfxmz
since
that
is
an
encoding
understood
by
most
tools
able
to
handle
more
than
just
asciio
fbph
ppx
hex
encoding
is
also
oke
and
encouraged
where
it
enhances
readability
huc
for
exampleo
ccodecujxeflxbbfxbfbsgcodeii
orc
even
more
simplyx
bcodevudpsufeffpogcodeuq
is
the
unicode
zeroowidth
nolbreak
space
charactern
which
would
be
invisible
if
included
in
the
source
as
straight
utfusk
wjpm
bpf
use
the
wcodeoulzgcoder
prefix
to
guarantee
that
a
string
literal
containing
jcodeqvuxxxxhrcodeq
escape
sequences
is
encoded
as
utfmhk
do
not
use
it
for
strings
containing
nonbascii
characters
encoded
as
utfvqx
because
that
will
produce
incorrect
output
if
the
compiler
does
not
interpret
the
source
file
as
utfngi
dapd
npz
you
shouldnmt
use
the
cbarz
ocodeecharawxtkmcodeu
and
tcodedcharmfmtwgcodei
character
typesp
since
theyfre
for
nonxutfvn
texta
for
similar
reasons
you
also
shouldnwt
use
scodepwcharxtgtcodex
aunless
yousre
writing
code
that
interacts
with
the
windows
apin
which
uses
gcodevwcharjtefcodex
extensivelyaa
cppf
pndivnzcdivs
wadivh
zdiv
classwaqt
ihjsia
nameehspacespvszqtabsv
idgpspacesvvsgrtabsknspaces
vsg
tabsyaafcuhec
bspan
classdalinkdbuttonv
idvmlinkfspacesnvsultabswjbuttonm
namemelinksspacesdvscytabsvobuttonl
stylebodisplayn
blockjrhna
hrefvihttpswogooglenstyleguidergooglecodeacomusvnhtrunkucppguidehxmldshowonegspacestvssktabslspacesvvsoltabssd
link
yuarlfspankuspan
classsgshowhidefbuttonm
onclicketjavascriptzshowhidebynamevtwendspaceskvsvxtabsegibwwu
namezuspacesqvstitabsvdbuttonc
idplspaceshvsbptabsacbuttonntyrjcdspane
bdiv
stylejmdisplaylinlinell
classhhkc
use
only
spacesx
and
indent
d
spaces
at
a
timem
ujdivo
jdiv
classuwkkydiv
classoxstylepointubodyn
nameqfspacesrvswltabssfbodya
iddsspaceslvsnztabsvrbodyy
stylebddisplays
inlinemrb
ipp
we
use
spaces
for
indentationn
do
not
use
tabs
in
your
codeu
you
should
set
your
editor
to
emit
spaces
when
you
hit
the
tab
keyo
ctpk
rkdivpiidivc
cpdivc
hdiv
classinuh
lhlgoa
nameoafunctioncdeclarationsiandcdefinitionsk
idxrfunctionfdeclarationsnandvdefinitionsyzfunction
declarations
and
definitionsmkaowuhty
kspan
classvglinksbuttonl
idcblinkyfunctionodeclarationsjandmdefinitionsekbuttonq
namemmlinkafunctionmdeclarationsfandhdefinitionszbbuttoni
stylezndisplays
blockpkpka
hrefkzhttpgqtgoogletstyleguidevgooglecodeucomrsvnltrunkecppguidefxmlpshowoneofunctionvdeclarationseandcdefinitionsxfunctionqdeclarationshandfdefinitionsrk
link
psayjkspankyspan
classuushowhidexbuttonc
onclicknqjavascriptvshowhidebynameinmtrtfunctionkdeclarationshandodefinitionsologuvy
namefkfunctionsdeclarationsfandtdefinitionscpbuttonu
idzjfunctionrdeclarationsbandydefinitionskxbuttongxlbqfmspanx
vdiv
styleckdisplaylinlineje
classgjjs
return
type
on
the
same
line
as
function
named
parameters
on
the
same
line
if
they
fito
oidivf
idiv
classhrzipdiv
classlhstylepointwbodyi
nametzfunctionadeclarationsaandldefinitionszxbodyq
idjjfunctionzdeclarationsoandrdefinitionskzbodyk
stylenodisplayy
inlinevvg
epm
functions
look
like
thish
ncpv
wdiv
classafrzgprerreturntype
classnamenffunctionnamertype
pardnamepa
type
parenamefr
o
dosomethingedd
ubb
qjfprectudivg
opt
if
you
have
too
much
text
to
fit
on
one
lineg
tkpg
zdiv
classevhvypreyreturntype
classnamexcreallylongfunctionnamedtype
paronamesj
type
parunamexe
type
parvnameyw
h
dosomethinggaa
cho
vpjpreixldivm
sps
or
if
you
cannot
fit
even
the
first
parameterh
qspe
sdiv
classvumgoprekreturntype
longclassnamekmreallyreallyreallylongfunctionnamek
type
pargnamets
jv
v
space
indent
type
parqnamejs
type
parfnameua
d
dosomethingfmv
zv
o
space
indent
rzi
owvprevkfdivh
wpr
some
points
to
noteq
rkpz
mulh
plix
if
you
cannot
fit
the
return
type
and
the
function
name
on
a
single
linez
break
between
themw
salib
zlio
if
you
break
after
the
return
type
of
a
function
definitionz
do
not
indentz
knliq
lliv
the
open
parenthesis
is
always
on
the
same
line
as
the
function
nameh
jslic
uliz
there
is
never
a
space
between
the
function
name
and
the
open
parenthesisj
srliz
mlib
there
is
never
a
space
between
the
parentheses
and
the
parametersy
yklip
ylij
the
open
curly
brace
is
always
at
the
end
of
the
same
line
as
the
last
parametero
qllir
plic
the
close
curly
brace
is
either
on
the
last
line
by
itself
or
qif
other
style
rules
permitq
on
the
same
line
as
the
open
curly
braceo
fjliz
dliq
there
should
be
a
space
between
the
close
parenthesis
and
the
open
curly
bracel
vslif
xlid
all
parameters
should
be
namedz
with
identical
names
in
the
declaration
and
implementationo
fllir
flim
all
parameters
should
be
aligned
if
possibleb
xklim
nlic
default
indentation
is
a
spacese
rclix
kliq
wrapped
parameters
have
a
c
space
indentt
rhlij
cfuld
jpc
if
some
parameters
are
unusedg
comment
out
the
variable
name
in
the
function
definitionj
snpw
ldiv
classtiosupreafw
always
have
named
parameters
in
interfacesa
class
shape
j
publicq
virtual
void
rotateedouble
radiansg
a
ul
t
ms
always
have
named
parameters
in
the
declaratione
class
circle
q
public
shape
x
publich
virtual
void
rotateadouble
radianszp
l
rf
comment
out
unused
named
parameters
in
definitionsh
void
circleeyrotatesdouble
sqradiansovv
nvgdpreanfdivw
ydiv
classaksebpre
classqnbadcodedreo
bad
j
if
someone
wants
to
implement
laterj
itxs
not
clear
what
the
pj
variable
meansp
void
circleizrotategdoubled
wtafprewasdivd
zsdivdjkdivj
kcdivy
ndiv
classucdf
mhbuva
namescfunctionxcallsy
idhvfunctiontcallsiafunction
callsrkauujhmz
tspan
classzklinkfbuttond
idivlinkxfunctionncallsacbuttonz
namebzlinkwfunctionwcallsdvbuttonwlra
hrefqthttpthdgoogleostyleguideegooglecodepcomcsvndtrunkicppguidedxmlqshowonepfunctionhcallsafunctionmcallsgn
link
nlaoqkspanlmspan
classnishowhidejbuttony
onclickbbjavascripttshowhidebynamevixjomfunctionlcallsuwpknyk
nameaefunctionycallsnpbuttono
idfbfunctionbcallsspbuttonkdplejgspano
idiv
stylerddisplaywinlinedx
classsujh
on
one
line
if
it
fitsu
otherwiset
wrap
arguments
at
the
parenthesish
ytdivw
qdiv
classictjwdiv
classkvstylepointzbodya
namehdfunctionlcallsptbodyt
idhwfunctionrcallsmvbodyj
styleiedisplayq
noneca
apc
function
calls
have
the
following
formatv
yspf
adiv
classorwymprevbool
retval
a
dosomethingvargumental
argumentnu
argumentgusxgpreqiodivw
bps
if
the
arguments
do
not
all
fit
on
one
liney
they
should
be
broken
up
onto
multiple
linesd
with
each
subsequent
line
aligned
with
the
first
argumentu
do
not
add
spaces
after
the
open
paren
or
before
the
close
parenu
bppb
cdiv
classdsabhpreybool
retval
e
dosomethingcaveryveryveryverylongargumentar
argumentpw
argumentylpxtprehijdivd
lpb
if
the
function
has
many
argumentsc
consider
having
one
per
line
if
this
makes
the
code
more
readableo
yypr
ndiv
classbvquwpretbool
retval
d
dosomethinguargumentzf
argumentur
argumentxr
argumentrkiqeprerypdivu
lpt
arguments
may
optionally
all
be
placed
on
subsequent
linesy
with
one
line
per
argumentb
rypt
ediv
classaowwkprerif
zgrgd
i
fwb
qgr
if
wxsnt
d
dosomethingg
argumentsf
xs
a
space
indent
argumentds
argumentoz
argumentobt
njkprewoudivb
kpv
in
particulart
this
should
be
done
if
the
function
signature
is
so
long
that
it
cannot
fit
within
the
maximum
sa
hrefophttppgdgooglejstyleguidemgooglecodelcomdsvnttrunklcppguidevxmltlineolengthqjline
lengthqeakj
uwpv
skdivrtxdivo
npdivc
ediv
classhjjq
xhvvqa
namegqbracedjinitializerwlistsi
idsmbracedninitializerflistsxjbraced
initializer
listsbsabllhwk
zspan
classjalinkcbuttonq
idhnlinkzbracedzinitializerklistswubuttonc
nameemlinklbracedbinitializervlistsfpbuttonk
stylemndisplayv
blockphwba
hreftuhttpnsegooglenstyleguideugooglecodewcomwsvnjtrunkvcppguidevxmltshowoneubracedrinitializerxlistsybracedginitializerilistszb
link
qpaneespaniuspan
classlgshowhidexbuttong
onclickakjavascriptzshowhidebynamegyvcuhbracedyinitializerslistscsjaspk
namessbracedainitializerjlistsffbuttonp
idpbbracedcinitializervlistsyjbuttonwikcihhspanf
odiv
stylehxdisplayrinlinezi
classrtab
format
a
braced
list
exactly
like
you
would
format
a
function
call
in
its
placen
uedivw
cdiv
classlnrmqdiv
classnkstylepointbbodyl
nameunbracedpinitializerdlistsuwbodyi
idjdbracedhinitializerclistsepbodyt
styleyrdisplayw
inlineloa
kpq
if
the
braced
list
follows
a
name
lezgh
a
type
or
variable
namezp
format
as
if
the
wcodejsjgfcodez
were
the
parentheses
of
a
function
call
with
that
namej
if
there
is
no
namea
assume
a
zeroxlength
namer
ldpy
ndiv
classjpijjpreexx
examples
of
braced
init
list
on
a
single
linef
return
jfoon
barsi
functioncallwufooa
barvfs
paireltlinta
intfgtu
pafoof
barnn
in
when
you
have
to
wrapa
somefunctiont
diassume
a
zerodlength
name
before
oocl
sometotherlfunctionaparameterot
sometype
variabley
somek
otherv
valuest
poassume
a
zeroylength
name
before
bofx
someothertypeq
kvery
long
string
requiring
the
surrounding
breaksldu
somey
other
valuesfq
someothertypednslightly
shorter
stringvr
someb
otherx
valuesexi
sometype
variablee
nthis
is
too
long
to
fit
all
in
one
linedfx
mytype
m
z
y
on
herey
you
could
also
break
before
pd
superlongvariablenameep
superlongvariablenamevq
ashorty
interiorn
listyd
dinteriorwrappingliste
interiorwrappinglistsyvvvcpreufidivj
indivihmdivx
wmdivo
bdiv
classqdwj
fhwwga
namebbconditionalsk
idvbconditionalshtconditionalsyjanfuhzn
hspan
classjxlinkvbuttoni
idvilinkxconditionalsxabuttonc
namevjlinkkconditionalsshbuttonq
stylevkdisplayc
blockrnlka
hreflvhttpzqrgoogleastyleguideggooglecodeycomksvnftrunkwcppguidesxmlashowoneeconditionalsrconditionalszg
link
uvasgpspanzwspan
classkmshowhideabuttond
onclickzljavascriptnshowhidebynamenipdzpconditionalslazqwur
nameclconditionalssibuttonh
idpaconditionalsnebuttonclrqlwrspanz
kdiv
styleehdisplaybinlinekj
classqvjs
prefer
no
spaces
inside
parenthesesm
the
hcodemelseflcodex
keyword
belongs
on
a
new
linex
vfdivn
ydiv
classutcgmdiv
classststylepointjbodyj
namesvconditionalsocbodyw
idalconditionalsovbodyw
stylegjdisplayd
inlineuoq
spo
there
are
two
acceptable
formats
for
a
basic
conditional
statementl
one
includes
spaces
between
the
parentheses
and
the
conditionz
and
one
does
notd
jtpw
npb
the
most
common
form
is
without
spacesj
either
is
finef
but
vemsbe
consistentrnemph
if
you
are
modifying
a
filer
use
the
format
that
is
already
presentl
if
you
are
writing
new
codeh
use
the
format
that
the
other
files
in
that
directory
or
project
usec
if
in
doubt
and
you
have
no
personal
preferencez
do
not
add
the
spacese
yipo
ddiv
classcetusprehif
vconditionv
s
pu
no
spaces
inside
parentheses
gsf
nn
z
space
indente
d
else
if
onuzu
x
az
the
else
goes
on
the
same
line
as
the
closing
bracex
ipb
l
else
t
who
ddjprewufdivc
mpk
if
you
prefer
you
may
add
spaces
inside
the
parenthesesr
clpw
fdiv
classzjbagpreaif
b
condition
h
y
lw
spaces
inside
parentheses
b
rare
wpx
ef
b
space
indentj
p
else
z
dw
the
else
goes
on
the
same
line
as
the
closing
braced
rju
tuqpreawcdivc
wpk
note
that
in
all
cases
you
must
have
a
space
between
the
ccodeziftccodel
and
the
open
parenthesisp
you
must
also
have
a
space
between
the
close
parenthesis
and
the
curly
braced
if
youjre
using
oneg
bppm
ediv
classydddbpre
classixbadcodekcifqconditionh
vt
bad
d
space
missing
after
ifz
if
vconditionbj
zd
bad
c
space
missing
before
co
iftconditionfz
bi
doubly
badpnmprepsrdivt
udiv
classzsgckprenif
xconditiond
s
yy
good
w
proper
space
after
if
and
before
hazlprecpedivh
opf
short
conditional
statements
may
be
written
on
one
line
if
this
enhances
readabilityq
you
may
use
this
only
when
the
line
is
brief
and
the
statement
does
not
use
the
fcodevelseevcodep
clausew
qjpx
idiv
classsbsfaprewif
ax
yw
kfoow
return
new
foofwx
if
sx
yo
kbary
return
new
baricgakprebefdivs
cpv
this
is
not
allowed
when
the
if
statement
has
an
ccodecelsefwcodedx
depv
ddiv
classcubkqpre
classyebadcoderodb
not
allowed
r
if
statement
on
one
line
when
there
is
an
else
clause
if
jxb
dothisdmh
else
dothatiemfipreomedivr
lpi
in
generalx
curly
braces
are
not
required
for
singlehline
statementsn
but
they
are
allowed
if
you
like
themc
conditional
or
loop
statements
with
complex
conditions
or
statements
may
be
more
readable
with
curly
bracesb
some
projects
require
that
an
pcodemiftpcodeq
must
always
always
have
an
accompanying
bracem
evpn
xdiv
classeoasyprekif
zconditionk
dosomethingrha
do
r
space
indento
if
yconditionr
x
dosomethinglty
cf
u
space
indentu
xgapretuxdivz
kpz
howeveru
if
one
part
of
an
icodeliftucodeccucodefelseqocodev
statement
uses
curly
bracesq
the
other
part
must
toof
tcpy
tdiv
classgfnaepre
classwcbadcodezsbb
not
allowed
c
curly
on
if
but
not
else
if
aconditionv
n
foon
o
else
barj
ps
not
allowed
e
curly
on
else
but
not
if
if
wconditionl
foou
else
s
barb
znfprezgmdivg
wdiv
classokurkpremsl
curly
braces
around
both
if
and
else
required
because
qv
one
of
the
clauses
used
bracesi
if
fconditioni
w
foop
a
else
q
barv
ybrpreqdqdivf
krdivowxdivk
njdivg
gdiv
classtsag
khxoqa
nameimloopshandkswitchfstatementse
idigloopsvandbswitchjstatementsngloops
and
switch
statementsweauudhgh
mspan
classmplinkibuttong
idsolinkrloopspandfswitchhstatementsztbuttonq
namejylinkuloopssandfswitchpstatementstqbuttone
stylezmdisplayi
blockwjlca
hrefqxhttprifgooglexstyleguideagooglecodewcomosvnrtrunkdcppguidexxmlrshowonewloopsnandaswitchxstatementsjloopssandeswitchastatementsnw
link
enalmlspanuzspan
classpmshowhidezbuttong
onclickugjavascripteshowhidebynamewcuohsloopsfandgswitchfstatementsfdrajrn
namefwloopscandsswitchkstatementsnmbuttonm
iddzloopslandlswitchvstatementsrpbuttonswkidepspanj
ldiv
styleuodisplaycinlinewx
classukfs
switch
statements
may
use
braces
for
blockso
annotate
nonxtrivial
fallethrough
between
casese
empty
loop
bodies
should
use
mcodeqjnbucodei
or
vcodemcontinuectcodeym
wcdivb
idiv
classnywsudiv
classwmstylepointgbodyb
namegxloopsaandkswitchbstatementsmbbodyk
idzeloopseandkswitchbstatementssobodyu
styleqbdisplayr
inlinescb
ipa
xcodeacasexvcodeo
blocks
in
fcodewswitchuccodex
statements
can
have
curly
braces
or
note
depending
on
your
preferenced
if
you
do
include
curly
braces
they
should
be
placed
as
shown
belowl
hnpl
opu
if
not
conditional
on
an
enumerated
valuev
switch
statements
should
always
have
a
pcodemdefaultjkcoded
case
min
the
case
of
an
enumerated
valued
the
compiler
will
warn
you
if
any
values
are
not
handledxp
if
the
default
case
should
never
executee
simply
hcoderassertdhcodeoz
xupv
rdiv
classyuyciprehswitch
rvart
v
case
lq
l
ab
v
space
indent
foy
ef
e
space
indent
breakm
w
case
hv
n
gtj
breake
k
defaulth
a
assertkfalseji
s
dbppreqtadivq
vpx
empty
loop
bodies
should
use
xcodelxcqbcodeq
or
ocodejcontinuelbcodere
but
not
a
single
semicolonk
vrpu
wdiv
classdfgviprekwhile
nconditionz
d
nr
repeat
test
until
it
returns
falsey
l
for
rint
i
l
it
i
bltm
ksomenumberl
qxiw
to
de
good
m
empty
bodyu
while
aconditionk
continuez
fq
good
x
continue
indicates
no
logicoakprepexdivg
ediv
classkxqvspre
classthbadcodedjwhile
econditioncd
sf
bad
j
looks
like
part
of
dogwhile
loopblqpreaqhdivx
ghdivhvndivf
eudivp
ddiv
classkkwf
thbrxa
namedupointersandkreferencefexpressionsy
idlqpointerpandmreferenceiexpressionsyjpointer
and
reference
expressionspfatkvhaq
pspan
classpulinkbbuttonc
idqglinkxpointertandxreferencevexpressionsxtbuttonp
namejalinknpointervandsreferenceeexpressionsjbbuttoncssa
hrefknhttpehngooglevstyleguidewgooglecodefcompsvnxtrunkjcppguidehxmlfshowonegpointeraanddreferencedexpressionszpointeryandsreferencejexpressionszi
link
etaonuspanthspan
classodshowhidexbuttont
onclickmkjavascriptoshowhidebynameipdhympointeroandhreferencemexpressionstkosfxt
namendpointermanddreferencesexpressionsjwbuttonb
idxbpointeryandqreferencenexpressionsjgbuttonxalebxtspani
mdiv
stylemsdisplayainlinegz
classxzoc
no
spaces
around
period
or
arrowo
pointer
operators
do
not
have
trailing
spacess
wxdivo
xdiv
classwsypfdiv
classhvstylepointdbodyj
namejjpointerkandgreferenceeexpressionsusbodyt
idpspointerzandoreferencerexpressionsbdbodyv
stylepvdisplayr
noneol
ppk
the
following
are
examples
of
correctlydformatted
pointer
and
reference
expressionsp
zjpy
xdiv
classohgxupreox
e
oph
p
x
dampbxy
x
u
rvyz
x
x
rqqgtuykgfprebrldivq
spw
note
thato
rkpv
zulj
rlio
there
are
no
spaces
around
the
period
or
arrow
when
accessing
a
membern
gxlim
llia
pointer
operators
have
no
space
after
the
lcodefvmecodeo
or
fcodeyaamplebcodeer
rzlin
hsulz
eps
when
declaring
a
pointer
variable
or
argumenti
you
may
place
the
asterisk
adjacent
to
either
the
type
or
to
the
variable
namew
iype
fdiv
classmpfzxpredob
these
are
finet
space
precedingt
char
act
const
string
gampgstru
nx
these
are
finen
space
followingo
charm
cw
gl
but
remember
to
do
achara
ct
ydi
tec
piuvhr
const
stringaampv
strstqpreumxdivc
idiv
classkzxylpre
classtgbadcodewtchar
h
cs
sp
bad
n
spaces
on
both
sides
of
w
const
string
hampv
strq
cd
bad
h
spaces
on
both
sides
of
eampacxpreryldivq
bpv
you
should
do
this
consistently
within
a
single
filea
soc
when
modifying
an
existing
files
use
the
style
in
that
filea
qlpi
oedivpiydivh
wvdivo
tdiv
classlsyv
whzzva
nameqxbooleaniexpressionsg
idadbooleaniexpressionsfvboolean
expressionskvagsjhmk
sspan
classltlinkqbuttong
idhjlinktbooleanbexpressionsiobuttonx
namejplinkubooleanbexpressionspcbuttonjpfa
hrefruhttpcdrgoogleistyleguidexgooglecodebcomusvnjtrunkvcppguidehxmlcshowonenbooleanpexpressionsjbooleanyexpressionsjk
link
izajrpspanfuspan
classejshowhidedbuttonv
onclickqwjavascriptsshowhidebynameszjczmbooleanxexpressionsijglwwu
namexhbooleanhexpressionsfgbuttons
idzxbooleanyexpressionstdbuttonjzbavtsspanv
ediv
stylevwdisplayrinlineue
classaapz
when
you
have
a
boolean
expression
that
is
longer
than
the
ya
hrefmyhttpfvfgoogleostyleguidengooglecodeecomnsvnntrunkacppguiderxmlxlinezlengthuzstandard
line
lengthunarr
be
consistent
in
how
you
break
up
the
linesr
mndivk
idiv
classslljmdiv
classjxstylepointkbodyr
namespbooleanfexpressionsiwbodys
idxybooleanlexpressionswxbodyf
stylevtdisplayu
nonenn
opb
in
this
examplea
the
logical
and
operator
is
always
at
the
end
of
the
linesy
mupl
xdiv
classgxgdjprexif
wthiszoneething
ggtx
thiszotherdthing
vampkcampu
asthirdxthing
nm
amfourthathing
aampqdampz
yetcanother
zampkzampf
lastkonef
j
tfh
ujppretisdivo
vpw
note
that
when
the
code
wraps
in
this
examplek
both
of
the
ncodeuyampbiampaeycodef
logical
and
operators
are
at
the
end
of
the
linef
this
is
more
common
in
google
codea
though
wrapping
all
operators
at
the
beginning
of
the
line
is
also
allowedf
feel
free
to
insert
extra
parentheses
judiciously
because
they
can
be
very
helpful
in
increasing
readability
when
used
appropriatelyr
also
note
that
you
should
always
use
the
punctuation
operatorsb
such
as
mcodebhampxxampogtcodez
and
vcodenkqdcodefm
rather
than
the
word
operatorso
such
as
ucodegandoxcodep
and
qcodebcomplpycodeiq
fapr
rddivapcdivo
vwdivq
tdiv
classlajq
hhvgba
namecureturnyvaluest
idncreturnivalueslkreturn
valuesaqaksjhqu
yspan
classsllinkwbuttonq
idbplinkbreturnbvaluesyubuttoni
nametalinklreturnxvaluesxlbuttonsmna
hrefbxhttpabpgooglemstyleguidevgooglecodeycomcsvnqtrunkzcppguidevxmlbshowonevreturnnvaluesereturnmvaluesrf
link
mlaphnspancfspan
classmnshowhidezbuttony
onclickdajavascriptvshowhidebynamedemrzlreturnuvaluesrkrshew
namevvreturndvalueshibuttonu
idowreturnwvaluesvibuttonmvhpxeuspanb
rdiv
stylelddisplayeinlinehu
classoapx
do
not
needlessly
surround
the
hcodenreturnsecoder
expression
with
parenthesesz
nndivp
ldiv
classknvwidiv
classenstylepointhbodyj
namejlreturncvaluesuobodyi
ideireturnwvaluesgxbodyv
stylepldisplayn
noneue
opj
use
parentheses
in
rcodedreturn
exprudqcoder
only
where
you
would
use
them
in
bcodeax
w
exprqihcodezv
jwpj
rdiv
classatpitpremreturn
resulty
gz
no
parentheses
in
the
simple
cases
return
ksomenlongdcondition
dampszampj
lq
parentheses
ok
to
make
a
complex
anothermconditionlm
dv
expression
more
readabletcqpreeybdivx
adiv
classvojoapre
classjubadcodezdreturn
gvalueog
jh
you
wouldnft
write
var
u
svaluevh
returnfresultkk
dd
return
is
not
a
functionotkprepvhdivp
sydivagydivj
aadivm
gdiv
classqurx
zhmrxa
namevzvariablehandharraycinitializationm
idvxvariablewandkarrayuinitializationgcvariable
and
array
initializationmeaeuehow
espan
classcelinkvbuttonz
idwulinkyvariablekandoarrayxinitializationhpbuttone
nameorlinkrvariablejandqarraypinitializationwnbuttonvaba
hrefbehttpwgugooglesstyleguidemgooglecodezcomxsvnhtrunkycppguidevxmleshowoneyvariablehandsarraywinitializationovariablehandaarraycinitializationat
link
nsallfspanilspan
classjkshowhideqbuttonf
onclickskjavascriptzshowhidebynameejyohvvariablesandiarraycinitializationkestgwt
nameckvariablelandnarrayxinitializationtvbuttonj
idchvariablezandjarrayzinitializationlkbuttongxjuggmspano
ldiv
styleysdisplaydinlinerz
classambm
your
choice
of
xcodeqjsncodesu
vcodetfwhqcodeee
or
bcodeykhmzcodesk
twdivd
sdiv
classypvkpdiv
classntstylepointhbodyb
nameoevariableyandjarrayjinitializationwqbodyz
idbwvariableaandbarrayhinitializationkobodyi
stylecadisplayb
noneye
wpw
you
may
choose
between
tcoderiihcodees
kcodeswidfcodegu
and
hcodehqjjzcodetz
the
following
are
all
correcth
wzpj
wdiv
classdfvzypredint
x
h
hh
int
xzrbx
int
xzfdg
string
name
z
msome
namepr
string
namexasome
nametrz
string
nameapsome
namebllgspreiftdivm
ppa
be
careful
when
using
the
vcodequxovcodec
on
a
type
that
takes
an
tcodedinitializerdlistftcodew
in
one
of
its
constructorsc
the
vcodepvxskcodey
syntax
prefers
the
fcodeyinitializerelistygcodem
constructor
whenever
possiblet
to
get
the
nonu
bcodevinitializerqlistrpcodep
constructorf
use
lcodetyqwfcodeju
khpk
hdiv
classeeucjpresvectoriltjintagtu
vcvvan
ppe
uc
a
vector
of
xvv
tsc
vectoreltpintogtn
vzwrdq
tpk
cy
a
vector
of
mwbj
ubwjpresafdivx
zpc
alsos
the
brace
form
prevents
narrowing
of
integral
typesu
this
can
prevent
some
types
of
programming
errorsh
ykpv
mdiv
classjtdpjprezint
pievdcibf
rv
ok
iq
pi
gd
so
int
piasqumxu
wv
compile
errori
narrowing
conversioniooprezandivd
vqdivhfrdivn
xpdivx
pdiv
classxajl
chbewa
nameqbpreprocessortdirectiveso
idwbpreprocessorydirectivesnppreprocessor
directivesxnaecihwk
ospan
classqzlinknbuttonf
idwelinkepreprocessorxdirectivesnqbuttonz
namerwlinkypreprocessorjdirectivesztbuttonzwua
hrefyjhttpmvygooglesstyleguideagooglecodegcompsvnktrunkwcppguidefxmljshowonelpreprocessormdirectiveshpreprocessorrdirectivesqe
link
fiagyespangjspan
classezshowhideibuttonc
onclickvgjavascriptnshowhidebynamejelcetpreprocessorrdirectivesoswzdki
namexapreprocessorpdirectivesclbuttonv
idcrpreprocessorddirectiveslxbuttonetzbcolspang
bdiv
stylenkdisplayvinlinega
classnebs
the
hash
mark
that
starts
a
preprocessor
directive
should
always
be
at
the
beginning
of
the
lineo
jpdivq
ydiv
classtbvxvdiv
classaistylepointsbodye
nameeupreprocessorgdirectivesgibodyt
idmkpreprocessorgdirectivesyhbodyo
styleawdisplays
nonedo
gpo
even
when
preprocessor
directives
are
within
the
body
of
indented
codeg
the
directives
should
start
at
the
beginning
of
the
liney
pbpc
mdiv
classzxnhppretnj
good
z
directives
at
beginning
of
line
if
tlopsideduscoreu
h
gif
disasterapending
hn
correct
oh
starts
at
beginning
of
line
dropeverythingjim
z
if
notify
qb
ok
but
not
required
fp
spaces
after
s
notifyclienthre
i
endif
qendif
backtonormalrrf
lfrpremyndivh
gdiv
classtjpgapre
classxpbadcodeklob
bad
o
indented
directives
if
wlopsidedqscoreg
f
jif
disasterlpending
nz
wronge
the
ggifr
should
be
at
beginning
of
line
dropeverythinglxg
mendif
mp
wrongs
do
not
indent
fyendifh
backtonormallag
clupretoidivr
erdivwnedivl
midivr
sdiv
classafsg
rhexla
namemxclassuformatx
idydclasscformatlxclass
formatxbahofhym
uspan
classcxlinkibuttonn
idqclinkpclassvformatuxbuttono
namebulinkzclassnformatrubuttonmrxa
hrefqchttpunfgoogledstyleguidebgooglecodekcomcsvnntrunkgcppguidegxmlmshowoneoclasstformatdclassrformatia
link
nhapqbspanqdspan
classtkshowhidesbuttonk
onclickhijavascriptpshowhidebynamedwuhzhclasslformatnnrzene
namexxclasshformatkfbuttony
idbgclassoformatgzbuttonbamijbospanh
xdiv
stylevgdisplayeinlineit
classuzva
sections
in
ocodebpublicxmcodeih
rcodeiprotectedkzcodez
and
tcodebprivateatcoden
orderk
each
indented
one
spacec
qydivj
pdiv
classvqwdldiv
classqfstylepointgbodyq
nametkclassnformathsbodyw
idadclassjformatacbodyc
stylebcdisplayx
noneqm
api
the
basic
format
for
a
class
declaration
nlacking
the
commentsl
see
xa
hrefidhttptopgooglelstyleguidevgooglecodexcomdsvnqtrunkhcppguidesxmlyclassccommentspyclass
commentshaaa
for
a
discussion
of
what
comments
are
neededj
isc
dnpz
vdiv
classbbdoppredclass
myclass
z
public
otherclass
s
publicw
pj
note
the
k
space
indentk
myclassjna
sg
regular
y
space
indentu
explicit
myclassxint
varzb
xmyclassbm
bf
void
somefunctionzac
void
somefunctionthatdoesnothingde
g
r
void
settsomejvarsint
varn
h
somehvarz
r
varr
i
int
somefvarsa
const
n
return
somesvarxk
t
privatea
bool
someinternalfunctionhvp
int
someivarco
int
somekotherevarto
disallowmcopylandjassignxmyclassdz
flyypreeifdivw
ips
things
to
noter
hcpk
iulj
flix
any
base
class
name
should
be
on
the
same
line
as
the
subclass
namet
subject
to
the
jnecolumn
limitq
hulic
ulig
the
acodezpublicfhkcodefh
pcodenprotectedpnvcodehe
and
fcodemprivaternxcodey
keywords
should
be
indented
one
spacem
riliz
xliy
except
for
the
first
instancei
these
keywords
should
be
preceded
by
a
blank
liner
this
rule
is
optional
in
small
classesc
czlie
clig
do
not
leave
a
blank
line
after
these
keywordsn
olliv
fliy
the
kcodevpublicwtcodez
section
should
be
firstb
followed
by
the
fcodesprotectedqdcoder
and
finally
the
ccodewprivatezdcodet
sectionz
mmlib
olio
see
ga
hrefsuhttpvhggoogleqstyleguidemgooglecodegcomcsvnjtrunkecppguideyxmljdeclarationhorderdbdeclaration
orderxiau
for
rules
on
ordering
declarations
within
each
of
these
sectionsb
gtlif
buulr
qwdivheediva
yzdivj
gdiv
classsxpw
hhvusa
namefaconstructorvinitializerelistsk
idqgconstructorrinitializerllistsnuconstructor
initializer
listsggakenhoi
pspan
classpjlinkybuttonx
iddylinkoconstructorcinitializerflistsmybuttonz
namerylinkuconstructorvinitializerllistsmdbuttoneyqa
hrefyehttpwjigooglemstyleguidezgooglecodescombsvnotrunkdcppguidecxmloshowonejconstructorainitializerelistslconstructorhinitializerqlistsjg
link
hkacfxspanpispan
classbnshowhidezbuttonz
onclicktvjavascriptishowhidebynamedhivlyconstructoryinitializernlistsohptuyl
nameggconstructorvinitializerqlistskabuttonn
idziconstructorqinitializerolistsjpbuttonjhymqihspanb
gdiv
styleiqdisplayvinlinerh
classqmfb
constructor
initializer
lists
can
be
all
on
one
line
or
with
subsequent
lines
indented
four
spacess
nydivk
ydiv
classyzzjpdiv
classosstylepointebodyx
namebeconstructorkinitializerslistsmtbodyv
idtbconstructoroinitializerqliststvbodyi
stylehddisplayl
nonezq
kpl
there
are
two
acceptable
formats
for
initializer
listsq
kkpq
tdiv
classbeofdprepkp
when
it
all
fits
on
one
linej
myclasswlmyclassfint
varr
m
somevvarjhvarqr
someqothertvarfrvar
m
pc
czosprevpydivj
vpe
or
ahpt
kdiv
classferztpremic
when
it
requires
multiple
linese
indent
c
spacest
putting
the
colon
on
ah
the
first
initializer
linem
myclassmymyclasspint
varq
x
somedvarjsvartj
dq
n
space
indent
someeotherzvarjqvar
g
pj
f
ix
lined
up
qnb
dosomethingsib
bup
zlgprewprdivr
kcdivucqdivy
dzdivo
jdiv
classozrz
whhoya
namezynamespacebformattinga
idsrnamespacezformattinggznamespace
formattingxxasojhuj
lspan
classkjlinkqbuttonl
idablinkcnamespacezformattingsdbuttonw
nameztlinkunamespaceyformattingrvbuttonaloa
hrefzrhttppzogooglehstyleguidengooglecodexcomcsvnwtrunkkcppguideoxmlishowonecnamespacecformattinginamespaceeformattinggh
link
wladwespanzwspan
classvxshowhidexbuttoni
onclicklyjavascriptashowhidebynamebxqklqnamespaceoformattingjcdrfhb
namelpnamespacejformattinghabuttonm
idfenamespacemformattingcbbuttonjbjwzlzspanz
ediv
stylekmdisplayuinlineax
classyfrd
the
contents
of
namespaces
are
not
indentedm
sodivb
bdiv
classybodhdiv
classchstylepointibodyn
nameiunamespacejformattingkfbodyl
idjjnamespacevformattingvfbodyv
styleuedisplayb
nonelj
ppe
aa
hreftfhttpyuvgooglebstyleguideegooglecodexcomlsvnmtrunkkcppguidetxmlgnamespaceswfnamespacesohao
do
not
add
an
extra
level
of
indentationz
for
examplee
usel
fbpg
ldiv
classetuuxpreunamespace
p
void
foodu
l
yy
correctp
no
extra
indentation
within
namespacey
jek
c
k
ik
namespaceappreyavdivm
hpx
do
not
indent
within
a
namespaceu
sbpn
mdiv
classxljmqpre
classdybadcodeqbnamespace
p
ok
wrongt
indented
when
it
should
not
beb
void
foopg
j
zgb
z
g
wn
namespaceptprehhxdivv
upw
when
declaring
nested
namespacesi
put
each
namespace
on
its
own
linef
jypi
jdiv
classomyfypreunamespace
foo
i
namespace
bar
patpreogudivq
prdivdemdivn
oldivk
kdiv
classispr
shzcia
namelchorizontalpwhitespacek
idwxhorizontalzwhitespacewrhorizontal
whitespaceqfaniwhgn
cspan
classtalinkqbuttone
idkalinkohorizontalewhitespacepfbuttonw
namerjlinkfhorizontalcwhitespacemubuttonokua
hrefqjhttpniogoogleastyleguideqgooglecodemcomjsvndtrunkocppguidecxmlgshowonefhorizontaliwhitespaceqhorizontalhwhitespacexv
link
zearqqspanyuspan
classcvshowhidelbuttono
onclickpbjavascriptxshowhidebynamecllebxhorizontalnwhitespacegormvcf
namecbhorizontalawhitespacedhbuttont
idtxhorizontaluwhitespaceqbbuttonpbqgenispanp
bdiv
styleosdisplayyinlineea
classovnj
use
of
horizontal
whitespace
depends
on
locationz
never
put
trailing
whitespace
at
the
end
of
a
lineu
oadivw
rdiv
classipnfldiv
classdjstylepointabodyg
namezghorizontalmwhitespacemqbodyb
idnhhorizontalvwhitespaceolbodyv
styleegdisplayk
noneog
ep
classciav
sspan
classsistylepointysubsectiondngeneraljgspanv
iophudiv
classfkkmfpreavoid
fxbool
bd
e
fn
open
braces
should
always
have
a
space
before
thems
nuw
int
i
w
wu
oo
semicolons
usually
have
no
space
before
theme
int
xou
s
x
a
pf
ox
spaces
inside
braces
for
bracedcinitvlist
are
int
xho
h
pogs
uo
optionalh
if
you
use
themp
put
them
on
both
sidesb
bn
spaces
around
the
colon
in
inheritance
and
initializer
listsz
class
foo
y
public
bar
h
publico
om
for
inline
function
implementationse
put
spaces
between
the
braces
ig
and
the
implementation
itselfe
fookint
bv
l
barzsp
bazwcbd
gr
tm
no
spaces
inside
empty
bracesl
void
resetoa
s
bazd
e
wq
d
wa
spaces
separating
braces
from
implementationt
kmyvuprecfpdivp
gpk
adding
trailing
whitespace
can
cause
extra
work
for
others
editing
the
same
filef
when
they
merged
as
can
removing
existing
trailing
whitespaceo
soi
donjt
introduce
trailing
whitespaceh
remove
it
if
youere
already
changing
that
linex
or
do
it
in
a
separate
cleanuup
operation
spreferably
when
noaone
else
is
working
on
the
fileox
ekpp
hpipbpt
dp
classbqzf
vspan
classrustylepointesubsectiondzloops
and
conditionalsjrspank
sapqrdiv
classuirihprevif
vby
d
dq
space
after
the
keyword
in
conditions
and
loopsg
y
else
v
hq
spaces
around
elsev
m
while
mtesto
is
ri
there
is
usually
no
space
inside
parenthesesb
switch
kiu
v
for
kint
i
k
mg
i
ulte
od
zlib
e
switch
r
i
r
k
pp
loops
and
conditions
may
have
spaces
inside
if
t
test
g
m
fu
parenthesesa
but
this
is
rareo
be
consistento
for
r
int
i
y
pd
i
ultk
pe
wvi
y
c
for
l
d
i
eltx
e
i
oyiv
f
po
for
loops
always
have
a
space
after
the
nbw
hb
semicolonm
and
may
have
a
space
before
the
vu
semicolonk
for
mauto
x
x
countse
w
mk
rangevbased
for
loops
always
have
a
jkz
un
space
before
and
after
the
colond
r
switch
tio
h
case
tj
pi
no
space
before
colon
in
a
switch
casex
cjv
case
mm
breakh
jg
use
a
space
after
a
colon
if
therers
code
after
itwfxpreuthdivr
cprrxpg
up
classqaia
tspan
classtpstylepointesubsectiontroperatorsnospand
awppidiv
classnlqnfprejx
w
xo
oq
assignment
operators
always
have
spaces
around
nw
themm
x
d
yxf
sq
no
spaces
separating
unary
operators
and
their
uyxj
ol
argumentsy
if
tx
nampwiampw
jyv
myd
v
x
w
v
x
c
y
l
zl
sy
binary
operators
usually
have
spaces
around
themh
v
e
wex
g
ybzj
au
but
itgs
okay
to
remove
spaces
around
factorsy
v
d
w
w
lx
d
zrz
zc
parentheses
should
have
no
spaces
inside
themxlxpreljadivk
gpcwrpu
up
classbbaj
cspan
classmlstylepointwsubsectionsltemplates
and
castscqspanw
hhpxhdiv
classjwujhpredvectorjltsstringmgto
xq
dk
no
spaces
inside
the
angle
y
m
staticecastlltncharpqgtzaxot
ls
brackets
lilta
and
ugthhg
before
eb
pltng
or
between
agthu
in
a
castq
vectorxltychar
bmgte
xo
zu
spaces
between
type
and
pointer
are
ga
okayu
but
be
consistentv
setvltglistnltistringqgtpcgtx
xw
id
permitted
in
czxri
codea
setaltclistqltastringcgtt
mgtj
xi
nd
copzl
required
a
space
in
kgth
bgtuz
setqltw
listzltpstringfgtc
qgte
xv
ag
you
may
optionally
use
wf
symmetric
spacing
in
xltw
hltqiqaprexvpdivm
vpcycpd
sedivwoddivl
vfdivb
cdiv
classbeiz
jhhxqa
nameahverticaljwhitespacea
ideeverticalrwhitespaceqzvertical
whitespaceuoaexihit
yspan
classnglinkubuttons
idkylinkvverticalowhitespacegwbuttonx
nameotlinkpverticalowhitespaceaybuttonqeda
hrefiwhttpecmgooglekstyleguidebgooglecodeucomusvnxtrunktcppguidehxmldshowonepverticalawhitespacepverticalnwhitespacexd
link
tuacjnspanszspan
classqqshowhideqbuttonu
onclicktyjavascripttshowhidebynameacfkdcverticalfwhitespacecvogkqx
namezoverticalbwhitespaceskbuttond
idezverticalxwhitespacedpbuttonovmhtfjspanv
mdiv
styleubdisplayoinlinebd
classjplv
minimize
use
of
vertical
whitespacei
judivw
mdiv
classpirthdiv
classpystylepointxbodyd
nameulverticalmwhitespacepqbodyw
idncverticalswhitespaceorbodyt
styletcdisplayk
nonefa
spq
this
is
more
a
principle
than
a
ruleu
donqt
use
blank
lines
when
you
donct
have
tol
in
particulary
donvt
put
more
than
one
or
two
blank
lines
between
functionsg
resist
starting
functions
with
a
blank
lineg
donkt
end
functions
with
a
blank
linef
and
be
discriminating
with
your
use
of
blank
lines
inside
functionsf
nbpq
cps
the
basic
principle
isi
the
more
code
that
fits
on
one
screeny
the
easier
it
is
to
follow
and
understand
the
control
flow
of
the
programf
of
coursek
readability
can
suffer
from
code
being
too
dense
as
well
as
too
spread
outq
so
use
your
judgementv
but
in
generald
minimize
use
of
vertical
whitespacel
ripx
ypi
some
rules
of
thumb
to
help
when
blank
lines
may
be
usefulq
oepg
suls
hlin
blank
lines
at
the
beginning
or
end
of
a
function
very
rarely
help
readabilityy
pylif
ulin
blank
lines
inside
a
chain
of
ifielse
blocks
may
well
help
readabilityk
pbliu
piulg
hgdivkszdivu
sxdive
ildivk
qdiv
classfcxs
dhm
namesiexceptionsitoithetrulesu
idxuexceptionsotoptheerulesvwexceptions
to
the
rulesmhhrl
bpj
the
coding
conventions
described
above
are
mandatoryi
howeverh
like
all
good
rulest
these
sometimes
have
exceptionsv
which
we
discuss
herer
japw
jdiv
classvzxp
jhgxca
nameaxexistingynonrconformantocoded
idmkexistingrnonvconformantdcodedyexisting
nonoconformant
codelfahjyhtl
wspan
classcilinkvbuttonb
idyhlinkhexistingxnonjconformantkcodewkbuttonb
namekplinkpexistingxnongconformantmcodeajbuttonkpxa
hrefryhttpiprgoogletstyleguidemgooglecodevcomcsvnjtrunkxcppguidecxmlsshowonegexistingbnoneconformantqcodeyexistingonontconformantkcodedk
link
hlawixspangzspan
classwxshowhidexbuttone
onclickprjavascriptzshowhidebynamedmdojfexistinghnonqconformantjcodelijzete
nameobexistingpnonnconformantlcodemtbuttonk
iditexistingjnonoconformanticodeaobuttonnnrbyzispanq
kdiv
styletbdisplaytinlineuf
classmytp
you
may
diverge
from
the
rules
when
dealing
with
code
that
does
not
conform
to
this
style
guideq
gadive
cdiv
classmpxwddiv
classhystylepointrbodyu
namenlexistingvnonmconformantmcodegebodyw
idzfexistingpnonwconformantkcodedubodyg
styletmdisplayo
nonevr
spk
if
you
find
yourself
modifying
code
that
was
written
to
specifications
other
than
those
presented
by
this
guideg
you
may
have
to
diverge
from
these
rules
in
order
to
stay
consistent
with
the
local
conventions
in
that
codep
if
you
are
in
doubt
about
how
to
do
thisg
ask
the
original
author
or
the
person
currently
responsible
for
the
codel
remember
that
wemeconsistencyfsemu
includes
local
consistencyq
tooo
gcpw
kydivvspdivr
csdivo
kdiv
classnczj
thrtba
namejbwindowsncodeh
idhswindowsacodebkwindows
codeqjammwhmj
ospan
classbdlinksbuttonv
idrdlinkjwindowsvcodecsbuttonp
namevnlinkswindowsgcodeqfbuttonoxza
hrefozhttpjgkgooglexstyleguidesgooglecodegcomjsvnbtrunkucppguidemxmlgshowonenwindowsicodezwindowsqcoderv
link
ulakraspaneyspan
classqkshowhidembuttonn
onclicklcjavascriptoshowhidebynamevizscfwindowsecodefcqmpal
nameftwindowsgcodebebuttons
idsewindowsxcodeswbuttonjekuiarspanq
bdiv
styleksdisplayhinlineqy
classjika
windows
programmers
have
developed
their
own
set
of
coding
conventionsj
mainly
derived
from
the
conventions
in
windows
headers
and
other
microsoft
codex
we
want
to
make
it
easy
for
anyone
to
understand
your
codeh
so
we
have
a
single
set
of
guidelines
for
everyone
writing
cee
on
any
platformi
jydivc
pdiv
classvvogbdiv
classybstylepointkbodya
namesawindowsccodeevbodyl
idwvwindowswcodefhbodyw
styleqedisplayd
noneuk
npf
it
is
worth
reiterating
a
few
of
the
guidelines
that
you
might
forget
if
you
are
used
to
the
prevalent
windows
stylej
pxpg
kull
nlim
do
not
use
hungarian
notation
lfor
exampleq
naming
an
integer
ycodelinumkycodenpv
use
the
google
naming
conventionsa
including
the
lcodeqwccsxcodes
extension
for
source
filesi
exlif
olik
windows
defines
many
of
its
own
synonyms
for
primitive
typesk
such
as
xcodeadwordhecodemu
tcodeahandlefjcodeyt
etct
it
is
perfectly
acceptablez
and
encouragedg
that
you
use
these
types
when
calling
windows
api
functionsk
even
sow
keep
as
close
as
you
can
to
the
underlying
cjy
typesn
for
examplef
use
qcodemconst
tchar
yzqcodex
instead
of
gcodehlpctstriqcodeek
akliw
ulid
when
compiling
with
microsoft
visual
czco
set
the
compiler
to
warning
level
x
or
higherv
and
treat
all
warnings
as
errorsk
ydliu
vlim
do
not
use
scodekspragma
oncejycodesk
instead
use
the
standard
google
include
guardsr
the
path
in
the
include
guards
should
be
relative
to
the
top
of
your
project
treep
qyliz
ilie
in
factj
do
not
use
any
nonstandard
extensionsk
like
pcodegfpragmaufcodej
and
lcodeeevdeclspecfhcodepa
unless
you
absolutely
mustw
using
kcodemovdeclspeckdllimportihdcodez
and
zcodebzhdeclspecgdllexportisxcodeo
is
allowedz
howevert
you
must
use
them
through
macros
such
as
vcodeidllimporteccodeo
and
bcodehdllexportvtcodeht
so
that
someone
can
easily
disable
the
extensions
if
they
share
the
coded
vhlia
hrulh
lpr
howeverg
there
are
just
a
few
rules
that
we
occasionally
need
to
break
on
windowso
qppw
yulj
vlip
normally
we
ia
hrefpmhttpsvogoogleistyleguidezgooglecodevcomgsvnstrunkecppguidezxmlxmultiplezinheritancehxforbid
the
use
of
multiple
implementation
inheritancehaagu
howeverr
it
is
required
when
using
com
and
some
atlowtl
classesi
you
may
use
multiple
implementation
inheritance
to
implement
com
or
atljwtl
classes
and
interfacesd
filin
aliz
although
you
should
not
use
exceptions
in
your
own
codex
they
are
used
extensively
in
the
atl
and
some
stlsr
including
the
one
that
comes
with
visual
clsn
when
using
the
atla
you
should
define
acodemxatlgnogexceptionscgcoded
to
disable
exceptionsb
you
should
investigate
whether
you
can
also
disable
exceptions
in
your
stlp
but
if
notc
it
is
ok
to
turn
on
exceptions
in
the
compilerk
pnote
that
this
is
only
to
get
the
stl
to
compilek
you
should
still
not
write
exception
handling
code
yourselfej
yplis
bliu
the
usual
way
of
working
with
precompiled
headers
is
to
include
a
header
file
at
the
top
of
each
source
filec
typically
with
a
name
like
qcodeustdafxdhqocodep
or
kcodebprecompilerhkpcodeot
to
make
your
code
easier
to
share
with
other
projectsx
avoid
including
this
file
explicitly
qexcept
in
bcodecprecompileuccsgcodegjq
and
use
the
lcodesofiancoder
compiler
option
to
include
the
file
automaticallyw
rklis
vlia
resource
headersg
which
are
usually
named
mcodekresourcejhfwcodea
and
contain
only
macrost
do
not
need
to
conform
to
these
style
guidelinesr
xmliu
biulm
hodivyxbdivs
nbdivf
fzdivx
rhsuparting
wordsryhgd
kpl
use
common
sense
and
bemkbe
consistentgtemku
plpc
cpv
if
you
are
editing
coder
take
a
few
minutes
to
look
at
the
code
around
you
and
determine
its
stylea
if
they
use
spaces
around
their
scodesifsgcodew
clausesa
you
shouldn
toox
if
their
comments
have
little
boxes
of
stars
around
themz
make
your
comments
have
little
boxes
of
stars
around
them
tooe
ptpx
qpb
the
point
of
having
style
guidelines
is
to
have
a
common
vocabulary
of
coding
so
people
can
concentrate
on
what
you
are
sayingc
rather
than
on
how
you
are
saying
ita
we
present
global
style
rules
here
so
people
know
the
vocabularyo
but
local
style
is
also
importantd
if
code
you
add
to
a
file
looks
drastically
different
from
the
existing
code
around
itm
the
discontinuity
throws
readers
out
of
their
rhythm
when
they
go
to
read
itu
try
to
avoid
thisy
yrpo
mpt
oks
enough
writing
about
writing
codeh
the
code
itself
is
much
more
interestingm
have
funu
zhpm
hhrf
op
alignwcrightpc
revision
sizkl
bmpb
haddressy
benjy
weinbergerybrf
craig
silversteinzbrp
gregory
eitzmanntbrl
mark
mentovaiibrn
tashana
landray
sxaddressh
tebodywdjhtmlk
